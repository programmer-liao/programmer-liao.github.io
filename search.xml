<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设置远程连接redis</title>
      <link href="/posts/18ad/"/>
      <url>/posts/18ad/</url>
      
        <content type="html"><![CDATA[<h1 id="设置远程连接redis"><a class="markdownIt-Anchor" href="#设置远程连接redis"></a> 设置远程连接redis</h1><h2 id="修改配置文件"><a class="markdownIt-Anchor" href="#修改配置文件"></a> 修改配置文件</h2><p>这里假设已经在服务器安装好了redis环境，但是我们现在还无法连接服务器上的redis，这时我们编辑redis.conf文件</p><p><img src="/posts/18ad/image-20220823173502769.png" alt="image-20220823173502769"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim redis.conf<br></code></pre></td></tr></table></figure><p>将下面这行注销即可</p><p><img src="/posts/18ad/image-20220823180631332.png" alt="image-20220823180631332"></p><p>再次连接，可以看到连接成功</p><p><img src="/posts/18ad/image-20220823173544992.png" alt="image-20220823173544992"></p><p>但是这时候，使用不了命令</p><p><img src="/posts/18ad/image-20220823173801151.png" alt="image-20220823173801151"></p><p>提示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">(error) DENIED Redis is running in protected mode because protected mode is enabled and no password is set for the default user. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &#x27;CONFIG SET protected-mode no&#x27; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &#x27;no&#x27;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &#x27;--protected-mode no&#x27; option. 4) Setup a an authentication password for the default user. NOTE: You only need to do one of the above things in order for the server to start accepting connections<br>翻译如下：<br>(错误)DENIED Redis运行在保护模式，因为保护模式已启用，默认用户没有设置密码。在这种模式下，只接受来自loopback接口的连接。如果你想从外部计算机连接到Redis，你可以采用以下解决方案之一:1)只要禁用保护模式发送命令&#x27;CONFIG SET protected-mode no&#x27;从环回接口连接到服务器正在运行的同一主机，但确保Redis不是公开从互联网访问，如果你这样做。使用CONFIG REWRITE使此更改永久生效。2)或者你可以通过编辑Redis的配置文件来禁用保护模式，并将保护模式选项设置为“no”，然后重新启动服务器。3)如果你只是为了测试而手动启动服务器，用“——protected-mode no”选项重新启动它。4)为默认用户设置认证密码。注意:为了让服务器开始接受连接，您只需要做上面的一件事<br></code></pre></td></tr></table></figure><h2 id="设置密码"><a class="markdownIt-Anchor" href="#设置密码"></a> 设置密码</h2><p>这里我们选择设置密码</p><p>连接服务器，打开客户端</p><p>获取当前密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">config get requirepass<br></code></pre></td></tr></table></figure><p>可以看到当前密码为空</p><p><img src="/posts/18ad/image-20220823174907425.png" alt="image-20220823174907425"></p><p>设置密码为123456</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">config set requirepass 123456<br></code></pre></td></tr></table></figure><p><img src="/posts/18ad/image-20220823175735359.png" alt="image-20220823175735359"></p><p>再次查看密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">config get requirepass<br></code></pre></td></tr></table></figure><p><img src="/posts/18ad/image-20220823175832704.png" alt="image-20220823175832704"></p><p>密码设置完成</p><h2 id="远程连接redis"><a class="markdownIt-Anchor" href="#远程连接redis"></a> 远程连接redis</h2><h3 id="方式1使用auth"><a class="markdownIt-Anchor" href="#方式1使用auth"></a> 方式1：使用auth</h3><p>我们再来尝试一次远程连接</p><p>这时使用任何命令都提示需要验证密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">(error) NOAUTH Authentication required.<br>翻译：<br>(错误)NOAUTH需要认证。<br></code></pre></td></tr></table></figure><p>进行验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">auth 123456<br></code></pre></td></tr></table></figure><p>可以看到已经验证成功</p><p><img src="/posts/18ad/image-20220823180053126.png" alt="image-20220823180053126"></p><p>使ping命令进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping<br></code></pre></td></tr></table></figure><p>可以看到测试成功</p><p><img src="/posts/18ad/image-20220823180331532.png" alt="image-20220823180331532"></p><h3 id="方式2使用-a"><a class="markdownIt-Anchor" href="#方式2使用-a"></a> 方式2：使用-a</h3><p>除了在客户端里面输入密码验证外，还可以在连接redis的时候输入密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -h 主机ip -p 6379 -a 123456<br></code></pre></td></tr></table></figure><p><img src="/posts/18ad/image-20220823180534528.png" alt="image-20220823180534528"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装redis</title>
      <link href="/posts/d4a2/"/>
      <url>/posts/d4a2/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><p>进入github下载地址：<a href="https://github.com/tporadowski/redis/releases">Releases · tporadowski/redis · GitHub</a></p><p>点击下载</p><p><img src="/posts/d4a2/image-20220823171115100.png" alt="image-20220823171115100"></p><h2 id="解压"><a class="markdownIt-Anchor" href="#解压"></a> 解压</h2><p>解压后文件如下</p><p><img src="/posts/d4a2/image-20220823171552091.png" alt="image-20220823171552091"></p><h2 id="添加环境变量"><a class="markdownIt-Anchor" href="#添加环境变量"></a> 添加环境变量</h2><p>为了能够全局使用redis命令</p><p>我们添加环境变量</p><h3 id="复制路径"><a class="markdownIt-Anchor" href="#复制路径"></a> 复制路径</h3><p><img src="/posts/d4a2/image-20220823171814787.png" alt="image-20220823171814787"></p><h3 id="添加环境变量-2"><a class="markdownIt-Anchor" href="#添加环境变量-2"></a> 添加环境变量</h3><p><img src="/posts/d4a2/image-20220823171945875.png" alt="image-20220823171945875"></p><h3 id="测试能否使用"><a class="markdownIt-Anchor" href="#测试能否使用"></a> 测试能否使用</h3><p>打开我们的终端工具，我用的是powershell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server<br></code></pre></td></tr></table></figure><p><img src="/posts/d4a2/image-20220823172230564.png" alt="image-20220823172230564"></p><p>正常运行，安装成功！</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的启动和停止</title>
      <link href="/posts/54a/"/>
      <url>/posts/54a/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h2><p>为了能够全局使用redis的相关命令，我们配置环境变量(但是貌似/usr/local/bin已经在环境变量中了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;export PATH=$PATH:/usr/local/bin&quot; &gt;&gt; /etc/profile<br></code></pre></td></tr></table></figure><h2 id="启动服务端"><a class="markdownIt-Anchor" href="#启动服务端"></a> 启动服务端</h2><h3 id="前台启动"><a class="markdownIt-Anchor" href="#前台启动"></a> 前台启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server<br></code></pre></td></tr></table></figure><p><img src="/posts/54a/image-20220823163207533.png" alt="image-20220823163207533"></p><h3 id="前台启动退出方法"><a class="markdownIt-Anchor" href="#前台启动退出方法"></a> 前台启动退出方法</h3><p>按CTRL+C即可退出</p><p><img src="/posts/54a/image-20220823163321503.png" alt="image-20220823163321503"></p><h3 id="后台启动"><a class="markdownIt-Anchor" href="#后台启动"></a> 后台启动</h3><h4 id="拷贝redisconf"><a class="markdownIt-Anchor" href="#拷贝redisconf"></a> 拷贝redis.conf</h4><p>首先我们拷贝一份redis.conf到~/redis目录，这也是对redis.conf配置文件的一种备份，之后我们操作的都是拷贝的redis.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -v ~/redis<br>cp -v ~/redis-stable/redis.conf ~/redis/redis.conf <br></code></pre></td></tr></table></figure><h4 id="设置后台启动"><a class="markdownIt-Anchor" href="#设置后台启动"></a> 设置后台启动</h4><p>修改我们的redis.conf文件，设置后台启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/redis/redis.conf<br></code></pre></td></tr></table></figure><p>将daeonize设置为yes</p><p><img src="/posts/54a/image-20220823164354374.png" alt="image-20220823164354374"></p><h4 id="后台启动-2"><a class="markdownIt-Anchor" href="#后台启动-2"></a> 后台启动</h4><p>参数带上我们的配置文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server ~/redis/redis.conf<br></code></pre></td></tr></table></figure><p>没有提示信息，但是我们可以查看redis的进程信息和端口号</p><h4 id="查看进程"><a class="markdownIt-Anchor" href="#查看进程"></a> 查看进程</h4><h4 id="查看6731端口"><a class="markdownIt-Anchor" href="#查看6731端口"></a> 查看6731端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -ntlp<br></code></pre></td></tr></table></figure><p><img src="/posts/54a/image-20220823165037669.png" alt="image-20220823165037669"></p><p>说明后台启动成功</p><h4 id="后台启动退出的方法"><a class="markdownIt-Anchor" href="#后台启动退出的方法"></a> 后台启动退出的方法</h4><h5 id="方法一kill进程"><a class="markdownIt-Anchor" href="#方法一kill进程"></a> 方法一：kill进程</h5><p>kill掉redis-server的进程即可，这里需要知道其pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p><img src="/posts/54a/image-20220823164850833.png" alt="image-20220823164850833"></p><p>pid为31221</p><p>kill掉它即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 31221<br></code></pre></td></tr></table></figure><h5 id="方法二在客户端使用shutdown命令"><a class="markdownIt-Anchor" href="#方法二在客户端使用shutdown命令"></a> 方法二：在客户端使用shutdown命令</h5><p>这种方法需要先连用redis-cli连接redis-server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown<br></code></pre></td></tr></table></figure><p><img src="/posts/54a/image-20220823170424375.png" alt="image-20220823170424375"></p><p>再次查看进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p>可以看到服务端已经被kill掉</p><p><img src="/posts/54a/image-20220823170629258.png" alt="image-20220823170629258"></p><h3 id="启动客户端"><a class="markdownIt-Anchor" href="#启动客户端"></a> 启动客户端</h3><h4 id="以默认的方式启动"><a class="markdownIt-Anchor" href="#以默认的方式启动"></a> 以默认的方式启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli<br></code></pre></td></tr></table></figure><p><img src="/posts/54a/image-20220823165706006.png" alt="image-20220823165706006"></p><h4 id="指定连接主机ip和端口号"><a class="markdownIt-Anchor" href="#指定连接主机ip和端口号"></a> 指定连接主机ip和端口号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -h localhost -p 6379<br></code></pre></td></tr></table></figure><p><img src="/posts/54a/image-20220823165958233.png" alt="image-20220823165958233"></p><h4 id="关闭客户端"><a class="markdownIt-Anchor" href="#关闭客户端"></a> 关闭客户端</h4><p>按CTRL+C即可退出</p><p><strong>注：shutdown命令是关闭连接的redis服务器，不是关闭客户端</strong></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作之库操作</title>
      <link href="/posts/a222/"/>
      <url>/posts/a222/</url>
      
        <content type="html"><![CDATA[<p>在redis中，默认有19个库，默认进入的数据库为0号库</p><h2 id="select"><a class="markdownIt-Anchor" href="#select"></a> select</h2><p>用于切换数据库，返回值为操作状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认操作为0号库，向0号库中添加3条数据</span><br>127.0.0.1:6379&gt; set k1 value1<br>OK<br>127.0.0.1:6379&gt; set k2 value2<br>OK<br>127.0.0.1:6379&gt; set k3 value3<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看0号库的所有key</span><br>127.0.0.1:6379&gt; keys *<br>1) &quot;k3&quot;<br>2) &quot;k2&quot;<br>3) &quot;k1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到1号库</span><br>127.0.0.1:6379&gt; select 1<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看1号库中所有key</span><br>127.0.0.1:6379[1]&gt; keys *<br>(empty array)<br></code></pre></td></tr></table></figure><h2 id="dbsize"><a class="markdownIt-Anchor" href="#dbsize"></a> dbsize</h2><p>查看当前库的key数量</p><p>返回值是当前库的key数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看1号库的key数量</span><br>127.0.0.1:6379[1]&gt; dbsize<br>(integer) 0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到0号库</span><br>127.0.0.1:6379[1]&gt; select 0<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看0号库的key数量</span><br>127.0.0.1:6379&gt; dbsize<br>(integer) 3<br></code></pre></td></tr></table></figure><h2 id="flushdb"><a class="markdownIt-Anchor" href="#flushdb"></a> flushdb</h2><p>清空当前库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清空0号库</span><br>127.0.0.1:6379&gt; flushdb<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看0号库key数量</span><br>127.0.0.1:6379&gt; dbsize<br>(integer) 0<br></code></pre></td></tr></table></figure><h2 id="flushall"><a class="markdownIt-Anchor" href="#flushall"></a> flushall</h2><p>清空所有库，返回值为操作状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">向0号库添加两条数据</span><br>127.0.0.1:6379&gt; set k1 v1<br>OK<br>127.0.0.1:6379&gt; set k2 v2<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到1号库</span><br>127.0.0.1:6379&gt; select 1<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">向1号库添加两条数据</span><br>127.0.0.1:6379[1]&gt; set k1 v1<br>OK<br>127.0.0.1:6379[1]&gt; set k2 v2<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空所有库</span><br>127.0.0.1:6379[1]&gt; flushall<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看1号库的key数量</span><br>127.0.0.1:6379[1]&gt; dbsize<br>(integer) 0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到0号库</span><br>127.0.0.1:6379[1]&gt; select 0<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看0号库的key数量</span><br>127.0.0.1:6379&gt; dbsize<br>(integer) 0<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作之Zset操作</title>
      <link href="/posts/1d65/"/>
      <url>/posts/1d65/</url>
      
        <content type="html"><![CDATA[<p>与set集合不同的是，zset是有序的</p><h2 id="zadd"><a class="markdownIt-Anchor" href="#zadd"></a> zadd</h2><p>将一个或多个member元素及其score值加入到有序集合key当中</p><p>语法：<code>zadd &lt;key&gt; &lt;score1&gt; &lt;value1&gt; &lt;score2&gt; &lt;value2&gt; ……</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">向top中添加以下三个元素</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">value score</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">c++ 100</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">java 200</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">javascript 150</span><br>127.0.0.1:6379&gt; zadd top 100 c 200 java 150 javascript<br>(integer) 3<br></code></pre></td></tr></table></figure><h2 id="zrange"><a class="markdownIt-Anchor" href="#zrange"></a> zrange</h2><p>返回有序集合key中，下标在start和stop之间的元素（包括start和stop）</p><p>参数带withscores则表示将分数和值一起返回到结果集中</p><p>start=0，stop=-1表示取出zset集合中所有的元素</p><p>返回结果集为升序排序</p><p>语法：<code>zrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [withscores]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">返回下标在0~1的元素</span><br>127.0.0.1:6379&gt; zrange top 0 1<br>1) &quot;c&quot;<br>2) &quot;javascript&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回下标在1~2的元素</span><br>127.0.0.1:6379&gt; zrange top 1 2<br>1) &quot;javascript&quot;<br>2) &quot;java&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回下标在0~2的元素</span><br>127.0.0.1:6379&gt; zrange top 0 2<br>1) &quot;c&quot;<br>2) &quot;javascript&quot;<br>3) &quot;java&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回所有元素，包括score</span><br>127.0.0.1:6379&gt; zrange top 0 -1 withscores<br>1) &quot;c&quot;<br>2) &quot;100&quot;<br>3) &quot;javascript&quot;<br>4) &quot;150&quot;<br>5) &quot;java&quot;<br>6) &quot;200&quot;<br></code></pre></td></tr></table></figure><h2 id="zrangebyscore"><a class="markdownIt-Anchor" href="#zrangebyscore"></a> zrangebyscore</h2><p>取出zset中score在min和max之间的元素（包括score等于min和max的元素）</p><p>参数带withscores则表示将分数和值一起返回到结果集中</p><p>结果集为升序排序</p><p>语法：<code>zrangebyscore key min max [withscores]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取出score在[100,200]的元素</span><br>127.0.0.1:6379&gt; zrangebyscore top 100 200<br>1) &quot;c&quot;<br>2) &quot;javascript&quot;<br>3) &quot;java&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出score在[150,200]的元素，参数带withscores</span><br>127.0.0.1:6379&gt; zrangebyscore top 150 200 withscores<br>1) &quot;javascript&quot;<br>2) &quot;150&quot;<br>3) &quot;java&quot;<br>4) &quot;200&quot;<br></code></pre></td></tr></table></figure><h2 id="zrevrange"><a class="markdownIt-Anchor" href="#zrevrange"></a> zrevrange</h2><p>返回有序集合key中，下标在start和stop之间的元素（包括start和stop）</p><p>参数带withscores则表示将分数和值一起返回到结果集中</p><p>start=0，stop=-1表示取出zset集合中所有的元素</p><p>返回结果集为降序排序</p><p>语法：<code>zrevrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [withscores]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">返回top集合中的所有元素</span><br>127.0.0.1:6379&gt; zrevrange top 0 -1<br>1) &quot;java&quot;<br>2) &quot;javascript&quot;<br>3) &quot;c&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">带结果集</span><br>127.0.0.1:6379&gt; zrevrange top 0 -1 withscores<br>1) &quot;java&quot;<br>2) &quot;200&quot;<br>3) &quot;javascript&quot;<br>4) &quot;150&quot;<br>5) &quot;c&quot;<br>6) &quot;100&quot;<br></code></pre></td></tr></table></figure><h2 id="zrevrangbyscore"><a class="markdownIt-Anchor" href="#zrevrangbyscore"></a> zrevrangbyscore</h2><p>取出zset中score在min和max之间的元素（包括score等于min和max的元素）</p><p>参数带withscores则表示将分数和值一起返回到结果集中</p><p>结果集为降序排序</p><p>语法：<code>zrevrangebyscore key max min [withscores]</code></p><p><strong>注意min和max的位置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取出score在[100,200]的元素</span><br>127.0.0.1:6379&gt; zrevrangebyscore top 200 100<br>127.0.0.1:6379&gt; zrevrangebyscore top 200 100<br>1) &quot;java&quot;<br>2) &quot;javascript&quot;<br>3) &quot;c&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出score在[150,200]的元素，参数带withscores</span><br>127.0.0.1:6379&gt;  zrevrangebyscore top 200 150 withscores<br>1) &quot;java&quot;<br>2) &quot;200&quot;<br>3) &quot;javascript&quot;<br>4) &quot;150&quot;<br></code></pre></td></tr></table></figure><h2 id="zincrby"><a class="markdownIt-Anchor" href="#zincrby"></a> zincrby</h2><p>为我们的元素value的score加上增量increment</p><p>语法：<code>zincrby &lt;key&gt; &lt;increment&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">为java的score加上增量100</span><br>127.0.0.1:6379&gt; zincrby top 100 java<br>&quot;300&quot;<br></code></pre></td></tr></table></figure><h2 id="zrem"><a class="markdownIt-Anchor" href="#zrem"></a> zrem</h2><p>删除指定zset集合下，指定值value的元素</p><p>语法：<code>zrem &lt;key&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">删除top中的java</span><br>127.0.0.1:6379&gt; zrem top java<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看该zset集合的所有值</span><br>127.0.0.1:6379&gt; zrange top 0 -1<br>1) &quot;c&quot;<br>2) &quot;javascript&quot;<br></code></pre></td></tr></table></figure><h2 id="zrank"><a class="markdownIt-Anchor" href="#zrank"></a> zrank</h2><p>返回值value在集合zset中的排名，从0开始</p><p>语法：<code>zrank &lt;key&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">返回c在top中的排名</span><br>127.0.0.1:6379&gt; zrank top c<br>(integer) 0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回javascript在top中的排名</span><br>127.0.0.1:6379&gt; zrank top javascript<br>(integer) 1<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作之String操作</title>
      <link href="/posts/d776/"/>
      <url>/posts/d776/</url>
      
        <content type="html"><![CDATA[<h2 id="set和get"><a class="markdownIt-Anchor" href="#set和get"></a> set和get</h2><p><strong>set：向库中添加string键值对</strong></p><p>多次添加相同key的记录时，会覆盖原来键对应的值</p><p><strong>get：取出key对应的值</strong></p><p>如果key对应的值不存在，返回nil</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加两条记录</span><br>127.0.0.1:6379&gt; set k1 v1<br>OK<br>127.0.0.1:6379&gt; set k2 v2<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前库中所有的key</span><br>127.0.0.1:6379&gt; keys *<br>1) &quot;k2&quot;<br>2) &quot;k1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k1对应的值</span><br>127.0.0.1:6379&gt; get k1<br>&quot;v1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加键为k1的一条记录</span><br>127.0.0.1:6379&gt; set k1 value1<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k1对应的值</span><br>127.0.0.1:6379&gt; get k1<br>&quot;value1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k3对应的值</span><br>127.0.0.1:6379&gt; get k3<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="setnx"><a class="markdownIt-Anchor" href="#setnx"></a> setnx</h2><p>向库中添加string键值对，只有key不存在时才能设置，key已经存在时就不能设置，注意和set的区别</p><p>设置不成功时返回0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; setnx k1 8<br>(integer) 0<br>127.0.0.1:6379&gt; setnx k3 v3<br>(integer) 1<br></code></pre></td></tr></table></figure><h2 id="append"><a class="markdownIt-Anchor" href="#append"></a> append</h2><p>追加内容到key对应的值上</p><p>返回值为追加后的字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1对应的值</span><br>127.0.0.1:6379&gt; get k1<br>&quot;value1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">追加abc到k1对应的值的后面</span><br>127.0.0.1:6379&gt; append k1 abc<br>(integer) 9<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1对应的值</span><br>127.0.0.1:6379&gt; get k1<br>&quot;value1abc&quot;<br></code></pre></td></tr></table></figure><h2 id="strlen"><a class="markdownIt-Anchor" href="#strlen"></a> strlen</h2><p>得到key对应的值的长度</p><p>如果key对应的值不存在，返回0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1对应的值长度</span><br>127.0.0.1:6379&gt; strlen k1<br>(integer) 9<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k3对应的值的长度</span><br>127.0.0.1:6379&gt; strlen k3<br>(integer) 0<br></code></pre></td></tr></table></figure><h2 id="incr和decr"><a class="markdownIt-Anchor" href="#incr和decr"></a> incr和decr</h2><p>incr：使key对应的值增1</p><p>decr：使key对应的值减1</p><p>注意：只有key对应的值为数字时才能使用</p><p>当incr或者decr后面的key不存在时，会自动创建，值默认为0，在0的基础上加1或者减1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置键值对k4</span><br>127.0.0.1:6379&gt; set k4 1<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">增1</span><br>127.0.0.1:6379&gt; incr k4<br>(integer) 2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">增1</span><br>127.0.0.1:6379&gt; incr k4<br>(integer) 3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">减1</span><br>127.0.0.1:6379&gt; decr k4<br>(integer) 2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">减1</span><br>127.0.0.1:6379&gt; decr k4<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">试图让k1对应的值增1，报错</span><br>127.0.0.1:6379&gt; incr k1<br>(error) ERR value is not an integer or out of range<br><span class="hljs-meta prompt_"># </span><span class="language-bash">当incr或者decr后面的key不存在时，会自动创建，值默认为0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">0的基础加1</span><br>127.0.0.1:6379&gt; incr k5<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">0的基础减1</span><br>127.0.0.1:6379&gt; decr k6<br>(integer) -1<br></code></pre></td></tr></table></figure><h2 id="incrby和decrby"><a class="markdownIt-Anchor" href="#incrby和decrby"></a> incrby和decrby</h2><p>这个是incr、decr的升级版，可以自定义自增和自减的步长</p><p>注意：只有key对应的值为数字时才能使用</p><p>当incr或者decr后面的key不存在时，会自动创建，值默认为0，在0的基础上加步长或者减步长</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使k4增10</span><br>127.0.0.1:6379&gt; incrby k4 10<br>(integer) 11<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使k4增100</span><br>127.0.0.1:6379&gt; incrby k4 100<br>(integer) 111<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使k4减10</span><br>127.0.0.1:6379&gt; decrby k4 10<br>(integer) 101<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使k4减100</span><br>127.0.0.1:6379&gt; decrby k4 100<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">当incr或者decr后面的key不存在时，会自动创建，值默认为0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">0的基础加100</span><br>127.0.0.1:6379&gt; decrby k8 100<br>(integer) -100<br><span class="hljs-meta prompt_"># </span><span class="language-bash">0的基础减100</span><br>127.0.0.1:6379&gt; incrby k9 100<br>(integer) 100<br></code></pre></td></tr></table></figure><h2 id="mset和mget"><a class="markdownIt-Anchor" href="#mset和mget"></a> mset和mget</h2><p>mset可以同时设置多个键值对</p><p>mget可以同时获取多个键对应的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">同时设置三个键值对</span><br>127.0.0.1:6379&gt; mset key1 value1 key2 value2 key3 value3<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">同时获取三个键对应的值</span><br>127.0.0.1:6379&gt; mget key1 key2 key3<br>1) &quot;value1&quot;<br>2) &quot;value2&quot;<br>3) &quot;value3&quot;<br></code></pre></td></tr></table></figure><h2 id="msetnx"><a class="markdownIt-Anchor" href="#msetnx"></a> msetnx</h2><p>这个也可以同时设置多个键值对，和mset不同的是，这个设置的键值对中，如果之前存在了key，那么整个语句就不会执行成功，即有一个失败都失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">之前存在了key3，所以语句不会执行成功，包括key4也不会生效</span><br>127.0.0.1:6379&gt; msetnx key3 value3 key4 value4<br>(integer) 0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个可以设置成功，原因在于没有和以及存在的键值对冲突</span><br>127.0.0.1:6379&gt; msetnx key4 value4 key5 value5<br>(integer) 1<br></code></pre></td></tr></table></figure><h2 id="getrange"><a class="markdownIt-Anchor" href="#getrange"></a> getrange</h2><p>获取key对应的值的子字符串</p><p>语法：<code>getrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</code>,（包含起始位置和结束位置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1的键值对</span><br>127.0.0.1:6379&gt; get k1<br>&quot;value1abc&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">截取k1的0~4位</span><br>127.0.0.1:6379&gt; getrange k1 0 4<br>&quot;value&quot;<br></code></pre></td></tr></table></figure><h2 id="setrange"><a class="markdownIt-Anchor" href="#setrange"></a> setrange</h2><p>覆写对应位置的字符串，从起始位置出发</p><p>语法：<code>setrange &lt;key&gt; &lt;起始位置&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1的键值对</span><br>127.0.0.1:6379&gt; get k1<br>&quot;value1abc&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从第五位开始覆写</span><br>127.0.0.1:6379&gt; setrange k1 5 ikun<br>(integer) 9<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1的键值对</span> <br>127.0.0.1:6379&gt; get k1<br>&quot;valueikun&quot;<br></code></pre></td></tr></table></figure><h2 id="setex"><a class="markdownIt-Anchor" href="#setex"></a> setex</h2><p>设置键值对的同时，设置其过期时间</p><p>语法：<code>setex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置key6键值对的同时，设置其过期时间为60秒</span><br>127.0.0.1:6379&gt; setex key6 60 value6<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取key6的过期时间</span><br>127.0.0.1:6379&gt; ttl key6<br>(integer) 48<br>127.0.0.1:6379&gt; ttl key6<br>(integer) 41<br>127.0.0.1:6379&gt; ttl key6<br>(integer) 31<br>127.0.0.1:6379&gt; ttl key6<br>(integer) -2<br></code></pre></td></tr></table></figure><h2 id="getset"><a class="markdownIt-Anchor" href="#getset"></a> getset</h2><p>以新值替换旧值，同时返回旧值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1的键值对</span><br>127.0.0.1:6379&gt; get k1<br>&quot;valueikun&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用getset，返回旧值</span><br>127.0.0.1:6379&gt; getset k1 ikun<br>&quot;valueikun&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k1的键值对</span><br>127.0.0.1:6379&gt; get k1<br>&quot;ikun&quot;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作之set操作</title>
      <link href="/posts/167f/"/>
      <url>/posts/167f/</url>
      
        <content type="html"><![CDATA[<p>set集合是无序、key不可重复的</p><h2 id="sadd"><a class="markdownIt-Anchor" href="#sadd"></a> sadd</h2><p>添加一个sadd集合</p><p>语法：<code>sadd &lt;key&gt; &lt;value1&gt; &lt;value2&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个<span class="hljs-built_in">set</span>集合set1</span><br>127.0.0.1:6379&gt; sadd set1 v1 v2 v3 v4<br>(integer) 4<br></code></pre></td></tr></table></figure><h2 id="smembers"><a class="markdownIt-Anchor" href="#smembers"></a> smembers</h2><p>查看set集合中所有元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看set1集合中所有元素</span><br>127.0.0.1:6379&gt; smembers set1<br>1) &quot;v3&quot;<br>2) &quot;v2&quot;<br>3) &quot;v1&quot;<br>4) &quot;v4&quot;<br></code></pre></td></tr></table></figure><h2 id="sismember"><a class="markdownIt-Anchor" href="#sismember"></a> sismember</h2><p>判断set集合中是否存在某值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">判断set1集合中是否存在v1</span><br>127.0.0.1:6379&gt; sismember set1 v1<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断set1集合中是否存在v5</span><br>127.0.0.1:6379&gt; sismember set1 v5<br>(integer) 0<br></code></pre></td></tr></table></figure><h2 id="scard"><a class="markdownIt-Anchor" href="#scard"></a> scard</h2><p>返回set集合中元素的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">返回set1集合中元素的个数</span><br>127.0.0.1:6379&gt; scard set1<br>(integer) 4<br></code></pre></td></tr></table></figure><h2 id="srem"><a class="markdownIt-Anchor" href="#srem"></a> srem</h2><p>删除集合中的指定元素</p><p>语法：<code>srem &lt;key&gt; &lt;value1&gt; &lt;value2&gt;……</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看set1集合中所有元素</span><br>127.0.0.1:6379&gt; smembers set1<br>1) &quot;v3&quot;<br>2) &quot;v2&quot;<br>3) &quot;v1&quot;<br>4) &quot;v4&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除set1中的v1和v2</span><br>127.0.0.1:6379&gt; srem set1 v1 v2 <br>(integer) 2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看set1集合中所有元素</span><br>127.0.0.1:6379&gt; smembers set1<br>1) &quot;v3&quot;<br>2) &quot;v4&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除set1中的v3</span><br>127.0.0.1:6379&gt; srem set1 v3<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看set1集合中所有元素</span><br>127.0.0.1:6379&gt; smembers set1<br>1) &quot;v4&quot;<br></code></pre></td></tr></table></figure><h2 id="spop"><a class="markdownIt-Anchor" href="#spop"></a> spop</h2><p>随机从集合中吐出一个值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个<span class="hljs-built_in">set</span>集合set2</span><br>127.0.0.1:6379&gt; sadd set2 v1 v2 v3 v4<br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">随机从集合中吐出一个值</span><br>127.0.0.1:6379&gt; spop set2<br>&quot;v1&quot;<br>127.0.0.1:6379&gt; spop set2<br>&quot;v3&quot;<br>127.0.0.1:6379&gt; spop set2<br>&quot;v4&quot;<br>127.0.0.1:6379&gt; spop set2<br>&quot;v2&quot;<br>127.0.0.1:6379&gt; spop set2<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="srandmember"><a class="markdownIt-Anchor" href="#srandmember"></a> srandmember</h2><p>随机集合中取出n个值，但是不会删除集合中的元素</p><p>语法：<code>srandmember &lt;key&gt; &lt;n&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个<span class="hljs-built_in">set</span>集合set3</span><br>127.0.0.1:6379&gt; sadd set3 v1 v2 v3 v4<br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">随机吐出2个值</span><br>127.0.0.1:6379&gt; srandmember set3 2<br>1) &quot;v2&quot;<br>2) &quot;v3&quot;<br>127.0.0.1:6379&gt; srandmember set3 2<br>1) &quot;v1&quot;<br>2) &quot;v3&quot;<br>127.0.0.1:6379&gt; srandmember set3 2<br>1) &quot;v2&quot;<br>2) &quot;v4&quot;<br>127.0.0.1:6379&gt; srandmember set3 2<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看set3中所有元素，可见set3中的元素并没有删除</span><br>127.0.0.1:6379&gt; smembers set3<br>1) &quot;v3&quot;<br>2) &quot;v2&quot;<br>3) &quot;v1&quot;<br>4) &quot;v4&quot;<br></code></pre></td></tr></table></figure><h2 id="smove"><a class="markdownIt-Anchor" href="#smove"></a> smove</h2><p>把集合中的一个值移动到另一个集合中去</p><p>语法：<code>smove &lt;源集合&gt; &lt;目标集合&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个集合set4</span><br>127.0.0.1:6379&gt; sadd set4 v1 v2<br>(integer) 2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个集合set5</span><br>127.0.0.1:6379&gt; sadd set5 v3 v4<br>(integer) 2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将set4中的v1移动到set5中</span><br>127.0.0.1:6379&gt; smove set4 set5 v1<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看set4中的所有元素</span><br>127.0.0.1:6379&gt; smembers set4<br>1) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看set5中的所有元素</span><br>127.0.0.1:6379&gt; smembers set5<br>1) &quot;v1&quot;<br>2) &quot;v3&quot;<br>3) &quot;v4&quot;<br></code></pre></td></tr></table></figure><h2 id="sinter"><a class="markdownIt-Anchor" href="#sinter"></a> sinter</h2><p>返回两个集合的交集元素</p><p>语法：<code>sinter &lt;key1&gt; &lt;key2&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建两个<span class="hljs-built_in">set</span>集合s1、s2</span><br>127.0.0.1:6379&gt; sadd s1 v1 v2 v3 v4<br>(integer) 4<br>127.0.0.1:6379&gt; sadd s2 v3 v4 v5 v6 <br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回s1、s2的交集元素</span><br>127.0.0.1:6379&gt; sinter s1 s2<br>1) &quot;v3&quot;<br>2) &quot;v4&quot;<br></code></pre></td></tr></table></figure><h2 id="sunion"><a class="markdownIt-Anchor" href="#sunion"></a> sunion</h2><p>返回两个集合的并集元素</p><p>语法：<code>suinon &lt;key1&gt; &lt;key2&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建两个<span class="hljs-built_in">set</span>集合s3、s4</span><br>127.0.0.1:6379&gt; sadd s3 v1 v2 v3 v4<br>(integer) 4<br>127.0.0.1:6379&gt; sadd s4 v3 v4 v5 v6 <br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回s3、s4的并集元素</span><br>127.0.0.1:6379&gt; sunion s3 s4<br>1) &quot;v1&quot;<br>2) &quot;v5&quot;<br>3) &quot;v3&quot;<br>4) &quot;v2&quot;<br>5) &quot;v6&quot;<br>6) &quot;v4&quot;<br></code></pre></td></tr></table></figure><h2 id="sdiff"><a class="markdownIt-Anchor" href="#sdiff"></a> sdiff</h2><p>返回两个集合中的差集（补集）元素（包含在key1中但是不包含key2中的）</p><p>语法：<code>sdiff &lt;key1&gt; &lt;key2&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建两个<span class="hljs-built_in">set</span>集合s5、s6</span><br>127.0.0.1:6379&gt; sadd s5 v1 v2 v3 v4<br>(integer) 4<br>127.0.0.1:6379&gt; sadd s6 v3 v4 v5 v6 <br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回s5、s6的差集元素</span><br>127.0.0.1:6379&gt; sdiff s5 s6<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作之List操作</title>
      <link href="/posts/d1b6/"/>
      <url>/posts/d1b6/</url>
      
        <content type="html"><![CDATA[<h2 id="lpush"><a class="markdownIt-Anchor" href="#lpush"></a> lpush</h2><p>从左边插入一个或多个值，新list默认为空</p><p>语法：<code>lpush &lt;key1&gt; &lt;value1&gt; &lt;value2&gt; …… &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加一个新的list键值对，从左边插入</span><br>127.0.0.1:6379&gt; lpush k1 v1 v2 v3<br>(integer) 3<br></code></pre></td></tr></table></figure><h2 id="rpush"><a class="markdownIt-Anchor" href="#rpush"></a> rpush</h2><p>从右边插入一个或多个值，新list默认为空</p><p>语法：<code>rpush &lt;key1&gt; &lt;value1&gt; &lt;value2&gt; …… &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加一个新的list键值对,从右边插入</span><br>127.0.0.1:6379&gt; rpush k2 v1 v2 v3<br>(integer) 3<br></code></pre></td></tr></table></figure><h2 id="lrange"><a class="markdownIt-Anchor" href="#lrange"></a> lrange</h2><p>取出key对应指定范围的list值</p><p>语法：<code>lrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</code>（包含起始位置和结束位置）</p><p>如果起始位置=0，结束位置=-1，表示取出key对应的所有list元素值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取出k1对应0~1范围的list元素值</span><br>127.0.0.1:6379&gt; lrange k1 0 1<br>1) &quot;v3&quot;<br>2) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意比较lpush和rpush的区别</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出k1对应的list所有元素值</span><br>127.0.0.1:6379&gt; lrange k1 0 -1<br>1) &quot;v3&quot;<br>2) &quot;v2&quot;<br>3) &quot;v1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出k2对应的list所有元素值</span><br>127.0.0.1:6379&gt; lrange k2 0 -1<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br>3) &quot;v3&quot;<br></code></pre></td></tr></table></figure><h2 id="lpop"><a class="markdownIt-Anchor" href="#lpop"></a> lpop</h2><p>从左边吐出一个值，返回值正是这个值</p><p>取出所有的元素后，这个键值对就不复存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从左边吐出k1的一个值</span><br>127.0.0.1:6379&gt; lpop k1<br>&quot;v3&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出k1对应的list所有元素值</span><br>127.0.0.1:6379&gt; lrange k1 0 -1<br>1) &quot;v2&quot;<br>2) &quot;v1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从左边吐出k2的一个值</span><br>127.0.0.1:6379&gt; lpop k2<br>&quot;v1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出k2对应的list所有元素值</span><br>127.0.0.1:6379&gt; lrange k2 0 -1<br>1) &quot;v2&quot;<br>2) &quot;v3&quot;<br></code></pre></td></tr></table></figure><h2 id="rpop"><a class="markdownIt-Anchor" href="#rpop"></a> rpop</h2><p>从右边吐出一个值，返回值正是这个值</p><p>取出所有的元素后，这个键值对就不复存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从右边吐出k1的一个值</span><br>127.0.0.1:6379&gt; rpop k1<br>&quot;v1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出k1对应的list所有元素值</span><br>127.0.0.1:6379&gt; lrange k1 0 -1<br>1) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从右边吐出k2的一个值</span><br>127.0.0.1:6379&gt; rpop k2<br>&quot;v3&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出k2对应的list所有元素值</span><br>127.0.0.1:6379&gt; lrange k2 0 -1<br>1) &quot;v2&quot;<br></code></pre></td></tr></table></figure><h2 id="rpoplpush"><a class="markdownIt-Anchor" href="#rpoplpush"></a> rpoplpush</h2><p>从key1的右边吐出一个值，插入到key2左边</p><p>语法：<code>rpoplpush &lt;list1&gt; &lt;list2&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新增一个列表k3</span><br>127.0.0.1:6379&gt; lpush k3 v1 v2 v3 v4<br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新增一个列表k4</span><br>127.0.0.1:6379&gt; lpush k4 v1 v2 v3<br>(integer) 3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将k3的v4放到k4的v1左边</span><br>127.0.0.1:6379&gt; rpoplpush k3 k4<br>&quot;v1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k3的list所有元素</span><br>127.0.0.1:6379&gt; lrange k3 0 -1<br>1) &quot;v4&quot;<br>2) &quot;v3&quot;<br>3) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k4的list所有元素</span><br>127.0.0.1:6379&gt; lrange k4 0 -1<br>1) &quot;v1&quot;<br>2) &quot;v3&quot;<br>3) &quot;v2&quot;<br>4) &quot;v1&quot;<br></code></pre></td></tr></table></figure><h2 id="lindex"><a class="markdownIt-Anchor" href="#lindex"></a> lindex</h2><p>获取list索引对应的元素值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k3的list所有元素</span><br>127.0.0.1:6379&gt; lrange k3 0 -1<br>1) &quot;v4&quot;<br>2) &quot;v3&quot;<br>3) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k3中索引0对应的元素</span><br>127.0.0.1:6379&gt; lindex k3 0<br>&quot;v4&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k3中索引1对应的元素</span><br>127.0.0.1:6379&gt; lindex k3 1<br>&quot;v3&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k3中索引2对应的元素</span><br>127.0.0.1:6379&gt; lindex k3 2<br>&quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k3中索引3对应的元素</span><br>127.0.0.1:6379&gt; lindex k3 3<br>(nil)<br></code></pre></td></tr></table></figure><h2 id="llen"><a class="markdownIt-Anchor" href="#llen"></a> llen</h2><p>获取list中元素的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k3的list所有元素</span><br>127.0.0.1:6379&gt; lrange k3 0 -1<br>1) &quot;v4&quot;<br>2) &quot;v3&quot;<br>3) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取k3的元素个数</span><br>127.0.0.1:6379&gt; llen k3<br>(integer) 3<br></code></pre></td></tr></table></figure><h2 id="linsert"><a class="markdownIt-Anchor" href="#linsert"></a> linsert</h2><p>往list指定位置插入元素值</p><p>语法：</p><ol><li><p><code>linsert &lt;key&gt; before &lt;value&gt; &lt;newvalue&gt;</code></p><p>在键为key的list中值为value元素的前面插入newvalue</p></li><li><p><code>linsert &lt;key&gt; after &lt;value&gt; &lt;newvalue&gt;</code></p><p>在键为key的list中值为value元素的后面插入newvalue</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k3的list所有元素</span><br>127.0.0.1:6379&gt; lrange k3 0 -1<br>1) &quot;v4&quot;<br>2) &quot;v3&quot;<br>3) &quot;v2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在v3前插入beforev3</span><br>127.0.0.1:6379&gt; linsert k3 before v3 beforev3<br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在v3后插入afterv3</span><br>127.0.0.1:6379&gt; linsert k3 after v3 afterv3<br>(integer) 5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k3的list所有元素</span><br>127.0.0.1:6379&gt; lrange k3 0 -1<br>1) &quot;v4&quot;<br>2) &quot;beforev3&quot;<br>3) &quot;v3&quot;<br>4) &quot;afterv3&quot;<br>5) &quot;v2&quot;<br></code></pre></td></tr></table></figure><h2 id="lrem"><a class="markdownIt-Anchor" href="#lrem"></a> lrem</h2><p>从左边删除n个value</p><p>语法：<code>lrem &lt;key&gt; &lt;n&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个键为k5的list</span><br>127.0.0.1:6379&gt; lpush k5 v1 v1 v1 v1<br>(integer) 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在k5中从左边删除3个v1</span><br>127.0.0.1:6379&gt; lrem k5 3 v1<br>(integer) 3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k5所有元素值</span><br>127.0.0.1:6379&gt; lrange k5 0 -1<br>1) &quot;v1&quot;<br></code></pre></td></tr></table></figure><h2 id="lset"><a class="markdownIt-Anchor" href="#lset"></a> lset</h2><p>将指定索引index的值替换成value</p><p>语法：<code>lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个键为k6的list</span><br>127.0.0.1:6379&gt; lpush k6 v1 v2 v3 v4 v5<br>(integer) 5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k6所有元素</span><br>127.0.0.1:6379&gt; lrange k6 0 -1<br>1) &quot;v5&quot;<br>2) &quot;v4&quot;<br>3) &quot;v3&quot;<br>4) &quot;v2&quot;<br>5) &quot;v1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将下标为2的元素替换成element</span><br>127.0.0.1:6379&gt; lset k6 2 element<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k6所有元素</span><br>127.0.0.1:6379&gt; lrange k6 0 -1<br>1) &quot;v5&quot;<br>2) &quot;v4&quot;<br>3) &quot;element&quot;<br>4) &quot;v2&quot;<br>5) &quot;v1&quot;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作之key键操作</title>
      <link href="/posts/6041/"/>
      <url>/posts/6041/</url>
      
        <content type="html"><![CDATA[<h2 id="keys"><a class="markdownIt-Anchor" href="#keys"></a> keys *</h2><p>查看当前库所有key</p><p>返回值：为当前库中所有key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">现在redis中没有数据</span><br>127.0.0.1:6379&gt; keys *<br>(empty list or set)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">向redis中放三条数据</span><br>127.0.0.1:6379&gt; set k1 value1<br>OK<br>127.0.0.1:6379&gt; set k2 value2<br>OK<br>127.0.0.1:6379&gt; set k3 value3<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前库中所有key</span><br>127.0.0.1:6379&gt; keys *<br>1) &quot;k2&quot;<br>2) &quot;k3&quot;<br>3) &quot;k1&quot;<br></code></pre></td></tr></table></figure><h2 id="exists"><a class="markdownIt-Anchor" href="#exists"></a> exists</h2><p>判断key是否存在</p><p>返回值：</p><ul><li><p>返回1说明存在</p></li><li><p>返回0说明不存在</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">判断k1是否存在</span><br>127.0.0.1:6379&gt; exists k1<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断key4是否存在</span><br>127.0.0.1:6379&gt; exists key4<br>(integer) 0<br></code></pre></td></tr></table></figure><h2 id="type"><a class="markdownIt-Anchor" href="#type"></a> type</h2><p>查看键对应的值的类型</p><p>返回值：键对应值的类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k2对应的值的类型</span><br>127.0.0.1:6379&gt; type k2<br>string<br></code></pre></td></tr></table></figure><h2 id="del和unlink"><a class="markdownIt-Anchor" href="#del和unlink"></a> del和unlink</h2><p>都是删除key对应的键值对</p><p>返回值为删除的键值对个数</p><blockquote><p>unlink与del的区别</p><ul><li>del是将数据立即从库中删除</li><li>unlink仅仅是将key从keyspace元数据中删除，真正的删除会在后续异步操作</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除k3键值对</span><br>127.0.0.1:6379&gt; del k2<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前所有的键</span><br>127.0.0.1:6379&gt; keys *<br>1) &quot;k3&quot;<br>2) &quot;k1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除k4</span><br>127.0.0.1:6379&gt; del k4<br>(integer) 0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除k1</span><br>127.0.0.1:6379&gt; unlink k1<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前库中所有key</span><br>127.0.0.1:6379&gt; keys *<br>1) &quot;k3&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除k4</span><br>127.0.0.1:6379&gt; unlink k4<br>(integer) 0<br></code></pre></td></tr></table></figure><h2 id="expire和ttl"><a class="markdownIt-Anchor" href="#expire和ttl"></a> expire和ttl</h2><p>expire：设置key对应的过期时间，以秒为单位</p><p>返回值为设置过期时间成功的键值对数</p><p>ttl：查看key的过期时间，以秒为单位</p><p>返回值</p><ul><li>-1表示永不过期</li><li>-2表示已过期</li><li>0和正数表示实际过期时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置k3的过期时间为100秒</span><br>127.0.0.1:6379&gt; expire k3 100<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">每隔一段时间查看k3的过期时间</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还未过期</span><br>127.0.0.1:6379&gt; ttl k3<br>(integer) 75<br>127.0.0.1:6379&gt; ttl k3<br>(integer) 58<br>127.0.0.1:6379&gt; ttl k3<br>(integer) 51<br><span class="hljs-meta prompt_"># </span><span class="language-bash">已过期</span><br>127.0.0.1:6379&gt; ttl k3<br>(integer) -2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前库中所有key</span><br>127.0.0.1:6379&gt; keys *<br>(empty array)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置一个永久key</span><br>127.0.0.1:6379&gt; set k1 value1<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看k1过期时间</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">永不过期</span><br>127.0.0.1:6379&gt; ttl k1<br>(integer) -1<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis操作之hash操作</title>
      <link href="/posts/6f4c/"/>
      <url>/posts/6f4c/</url>
      
        <content type="html"><![CDATA[<h2 id="hset"><a class="markdownIt-Anchor" href="#hset"></a> hset</h2><p>向哈希key中添加字段field和字段映射的值value</p><p>语法：<code>hset &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">向哈希user中添加一个字段name和字段对应的值ikun</span><br>127.0.0.1:6379&gt; hset user name ikun<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">向哈希user中添加一个字段age和字段对应的值18</span><br>127.0.0.1:6379&gt; hset user age 18<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">向哈希user中添加一个字段hobby和字段对应的值rap</span><br>127.0.0.1:6379&gt; hset user hobby rap<br>(integer) 1<br></code></pre></td></tr></table></figure><h2 id="hget"><a class="markdownIt-Anchor" href="#hget"></a> hget</h2><p>从哈希key中取出一个字段field对应的值value</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取出user中的name字段对应的值</span><br>127.0.0.1:6379&gt; hget user name<br>&quot;ikun&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出user中的age字段对应的值</span><br>127.0.0.1:6379&gt; hget user age<br>&quot;18&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出user中的hobby字段对应的值</span><br>127.0.0.1:6379&gt; hget user hobby<br>&quot;rap&quot;<br></code></pre></td></tr></table></figure><h2 id="hmset"><a class="markdownIt-Anchor" href="#hmset"></a> hmset</h2><p>批量设置哈希key的字段和字段值</p><p>语法：<code>hmset &lt;key&gt; &lt;field1&gt; &lt;value1&gt; &lt;field2&gt; &lt;value2&gt; &lt;field3&gt; &lt;value3&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先删除哈希user</span><br>127.0.0.1:6379&gt; del user<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">以下三步为同时操作</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">向哈希user中添加一个字段name和字段对应的值ikun</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">向哈希user中添加一个字段age和字段对应的值18</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">向哈希user中添加一个字段hobby和字段对应的值rap</span><br>127.0.0.1:6379&gt; hmset user name ikun age 18 hobby rap<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出user中的name字段对应的值</span><br>127.0.0.1:6379&gt; hget user name<br>&quot;ikun&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出user中的age字段对应的值</span><br>127.0.0.1:6379&gt; hget user age<br>&quot;18&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出user中的hobby字段对应的值</span><br>127.0.0.1:6379&gt; hget user hobby<br>&quot;rap&quot;<br></code></pre></td></tr></table></figure><h2 id="hexists"><a class="markdownIt-Anchor" href="#hexists"></a> hexists</h2><p>判断哈希key中是否存在某键值对field-value</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">判断user中是否有name字段</span><br>127.0.0.1:6379&gt; hexists user name<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断user中是否有sex字段</span><br>127.0.0.1:6379&gt; hexists user sex<br>(integer) 0<br></code></pre></td></tr></table></figure><h2 id="hkeys"><a class="markdownIt-Anchor" href="#hkeys"></a> hkeys</h2><p>列出该hash集合中所有field</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出user中所有field</span><br>127.0.0.1:6379&gt; hkeys user<br>1) &quot;name&quot;<br>2) &quot;age&quot;<br>3) &quot;hobby&quot;<br></code></pre></td></tr></table></figure><h2 id="hvals"><a class="markdownIt-Anchor" href="#hvals"></a> hvals</h2><p>列出hash集合中所有的value</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出user中所有value</span><br>127.0.0.1:6379&gt; hvals user<br>1) &quot;ikun&quot;<br>2) &quot;18&quot;<br>3) &quot;rap&quot;<br><br></code></pre></td></tr></table></figure><h2 id="hincrby"><a class="markdownIt-Anchor" href="#hincrby"></a> hincrby</h2><p>将哈希表key中的域field的值增加increment</p><p>注：field对应的值必须为数字时才可以增加</p><p>语法：<code>hincrby &lt;key&gt; &lt;field&gt; &lt;incrment&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将user的age增加1</span><br>127.0.0.1:6379&gt; hincrby user age 1<br>(integer) 19<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将user的age增加10</span><br>127.0.0.1:6379&gt; hincrby user age 10<br>(integer) 29<br><span class="hljs-meta prompt_"># </span><span class="language-bash">视图将user的name增加1,报错</span><br>127.0.0.1:6379&gt; hincrby user name 1<br>(error) ERR hash value is not an integer<br></code></pre></td></tr></table></figure><h2 id="hsetnx"><a class="markdownIt-Anchor" href="#hsetnx"></a> hsetnx</h2><p>将哈希表key中的域对象field的值设置为value，当且仅当域对象field不存在时可成功</p><p>语法：<code>hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">为user新增weight，值为60kg</span><br>127.0.0.1:6379&gt; hsetnx user weight 60kg<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">试图新增user的age属性，age此前已经存在，结果不成功</span><br>127.0.0.1:6379&gt; hsetnx user age 18<br>(integer) 0<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate常用方法详解</title>
      <link href="/posts/7704/"/>
      <url>/posts/7704/</url>
      
        <content type="html"><![CDATA[<h2 id="randomkey"><a class="markdownIt-Anchor" href="#randomkey"></a> randomKey</h2><p><code>public K randomKey()</code></p><p>从redis的key集合中随机返回一个key，如果key集合为空，则返回null</p><h2 id="expireat"><a class="markdownIt-Anchor" href="#expireat"></a> expireAt</h2><p><code>public Boolean expireAt(K key, Date date)</code></p><p>为指定key的键值对设置过期时间（在什么时间过期），如果key不存在返回false，设置成功返回true</p><h2 id="expire"><a class="markdownIt-Anchor" href="#expire"></a> expire</h2><p><code>default Boolean expire(K key, Duration timeout)</code></p><p>参数说明</p><ol><li><p>key： 键</p></li><li><p>Duration：多少时间后过期，可以传入不同的Duration对象来表示时间</p><p>如下所示，就不演示了</p><p><img src="/posts/7704/image-20221013143521616.png" alt="image-20221013143521616"></p></li></ol><p><code>Boolean expire(K var1, long var2, TimeUnit var4)</code></p><p>参数说明</p><ol><li>var1：key</li><li>var2： 多少个单位时间</li><li>var4： 单位时间，TimeUnit是一个枚举类，有以下几个枚举值<ol><li><code>NANOSECONDS</code>：纳秒</li><li><code>MICROSECONDS</code>微秒</li><li><code>MILLISECONDS</code>：毫秒</li><li><code>SECONDS</code>：秒</li><li><code>MINUTES</code>：分</li><li><code>HOURS</code>：时</li><li><code>DAYS</code>：天</li></ol></li></ol><p>举例说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.expire(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-number">1000</span>, TimeUnit.NANOSECONDS); <span class="hljs-comment">// 1000纳秒后过期</span><br>redisTemplate.expire(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-number">1000</span>, TimeUnit.MICROSECONDS);<span class="hljs-comment">// 1000微秒后过期</span><br>redisTemplate.expire(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS);<span class="hljs-comment">// 1000毫秒后过期</span><br>redisTemplate.expire(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-number">1000</span>, TimeUnit.SECONDS);     <span class="hljs-comment">// 1000秒后过期</span><br>redisTemplate.expire(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-number">1000</span>, TimeUnit.MINUTES);     <span class="hljs-comment">// 1000分钟后过期</span><br>redisTemplate.expire(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-number">1000</span>, TimeUnit.HOURS);       <span class="hljs-comment">// 1000小时后过期</span><br>redisTemplate.expire(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-number">1000</span>, TimeUnit.DAYS);        <span class="hljs-comment">// 1000天后过期</span><br></code></pre></td></tr></table></figure><h2 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> delete</h2><p><code>Boolean delete(K var1)</code></p><p>删除key为var1的键值对，删除成功返回true，删除失败返回false，如key本身就不存在</p><p><code>Long delete(Collection&lt;K&gt; var1)</code></p><p>传入key集合，删除key集合中对应的键值对，返回成功删除的个数</p><h2 id="unlink"><a class="markdownIt-Anchor" href="#unlink"></a> unlink</h2><p><code>Boolean unlink(K var1)</code></p><p>仅将var1s从keyspace元数据中删除，真正的删除会在后续异步操作</p><p><code>Long unlink(Collection&lt;K&gt; var1)</code></p><p>同时unlink多个key</p><h2 id="type"><a class="markdownIt-Anchor" href="#type"></a> Type</h2><p><code>public DataType type(K key)</code></p><p>返回key的类型，返回值为DataType</p><p>有以下几个枚举值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">NONE(<span class="hljs-string">&quot;none&quot;</span>),<br>STRING(<span class="hljs-string">&quot;string&quot;</span>),<br>LIST(<span class="hljs-string">&quot;list&quot;</span>),<br>SET(<span class="hljs-string">&quot;set&quot;</span>),<br>ZSET(<span class="hljs-string">&quot;zset&quot;</span>),<br>HASH(<span class="hljs-string">&quot;hash&quot;</span>),<br>STREAM(<span class="hljs-string">&quot;stream&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="rename"><a class="markdownIt-Anchor" href="#rename"></a> rename</h2><p><code>public void rename(K oldKey, K newKey)</code></p><p>将oldKey重命名为newKey</p><h2 id="setenabletransactionsupport"><a class="markdownIt-Anchor" href="#setenabletransactionsupport"></a> setEnableTransactionSupport</h2><p>开启redis事务支持，默认不开启事务，需要手动开启</p><p><code>public void setEnableTransactionSupport(boolean enableTransactionSupport)</code></p><h2 id="mutli"><a class="markdownIt-Anchor" href="#mutli"></a> mutli</h2><p><code>public void multi()</code></p><p>开启redis事务</p><h2 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec</h2><p><code>public List&lt;Object&gt; exec()</code></p><p>需要配合mutli使用</p><p>提交事务，返回事务期间执行过操作的返回值的List集合（无返回值的不输出），使用默认的RedisSerializer来反序列化</p><blockquote><p><strong>官方解释</strong></p><p>]Execute a transaction, using the default <code>RedisSerializer</code>s to deserialize any results that are byte[]s or Collections or Maps of byte[]s or Tuples. Other result types (Long, Boolean, etc) are left as-is in the converted results. If conversion of tx results has been disabled in the <code>RedisConnectionFactory</code> the results of exec will be returned without deserialization. This check is mostly for backwards compatibility with 1.0.</p></blockquote><p><code>public List&lt;Object&gt; exec(RedisSerializer&lt;?&gt; valueSerializer)</code></p><p>提交事务，指定RedisSerializer来反序列化</p><blockquote><p><strong>官方解释</strong></p><p>Execute a transaction, using the provided <code>RedisSerializer</code>to deserialize any results that are byte[]s or Collections of byte[]s. If a result is a Map, the provided <code>RedisSerializer</code> will be used for both the keys and values. Other result types (Long, Boolean, etc) are left as-is in the converted results. Tuple results are automatically converted to TypedTuples.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.setEnableTransactionSupport(<span class="hljs-literal">true</span>); <span class="hljs-comment">//开启事务支持</span><br>redisTemplate.multi(); <span class="hljs-comment">// 开启事务</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>); <span class="hljs-comment">// true</span><br>redisTemplate.randomKey(); <span class="hljs-comment">// k1</span><br>redisTemplate.expireAt(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">1000</span> * <span class="hljs-number">60</span>)); <span class="hljs-comment">// true</span><br>redisTemplate.type(<span class="hljs-string">&quot;k1&quot;</span>); <span class="hljs-comment">// STRING</span><br>redisTemplate.rename(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;k2&quot;</span>);<br>System.out.println(redisTemplate.exec()); <span class="hljs-comment">// 提交事务</span><br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-comment">// [true, k1, true, STRING]</span><br></code></pre></td></tr></table></figure><h2 id="discard"><a class="markdownIt-Anchor" href="#discard"></a> discard</h2><p><code>public void discard()</code></p><p>回滚事务，需要配合mutli使用</p><h2 id="watch"><a class="markdownIt-Anchor" href="#watch"></a> watch</h2><p><code>void watch(K key)</code></p><p>在事务期间，监听key的变化</p><p><code>void watch(Collection&lt;K&gt; keys)</code></p><p>在事务期间，监听keys的变化</p><h2 id="unwatch"><a class="markdownIt-Anchor" href="#unwatch"></a> unwatch</h2><p><code>public void unwatch()</code></p><p>取消对所有key的监听</p><h2 id="move"><a class="markdownIt-Anchor" href="#move"></a> move</h2><p><code>public Boolean move(K key, int dbIndex)</code></p><p>移动键为key的键值对到索引为dbIndex的库去</p><p>移动成功返回true，移动失败返回false（如键值对本来就不存在）</p><h2 id="dump"><a class="markdownIt-Anchor" href="#dump"></a> dump</h2><p><code>public byte[] dump(K key)</code></p><p>dump指定key</p><h2 id="slaveof"><a class="markdownIt-Anchor" href="#slaveof"></a> slaveOf</h2><p><code>public void slaveOf(String host, int port)</code></p><p>用于在 Redis 运行时动态地修改复制(replication)功能的行为</p><h2 id="slaveofnoone"><a class="markdownIt-Anchor" href="#slaveofnoone"></a> slaveOfNoOne</h2><p><code>public void slaveOfNoOne()</code></p><p>将服务器改为主服务器</p><h2 id="afterpropertiesset"><a class="markdownIt-Anchor" href="#afterpropertiesset"></a> afterPropertiesSet</h2><p><code>public void afterPropertiesSet()</code></p><p>初始化RedisTemplate的一些参数设置</p><p><strong>非spring注入使用RedisTemplate,需先调用afterPropertiesSet()方法</strong></p><h2 id="killclient"><a class="markdownIt-Anchor" href="#killclient"></a> killClient</h2><p><code>public void killClient(String host, int port)</code></p><p>关闭host:port的客户端连接</p><h2 id="opsforvalue"><a class="markdownIt-Anchor" href="#opsforvalue"></a> opsForValue</h2><p>针对字符串的操作集合</p><h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> set</h3><p><code>void set(K var1, V var2)</code></p><p>设置键值对[var1, var2]</p><p><code>void set(K var1, V var2, long var3, TimeUnit var5)</code></p><p>设置键值对[var1, var2]，并且通过TimeUnit设置过期时间</p><p><code>default void set(K key, V value, Duration timeout)</code></p><p>设置键值对[var1, var2]，并且通过Duration设置过期时间</p><p><code>void set(K var1, V var2, long var3)</code></p><p>设置键值对[var1, var2]，并且设置过期时间为var3毫秒</p><h3 id="setifabsent"><a class="markdownIt-Anchor" href="#setifabsent"></a> setIfAbsent</h3><p><code>Boolean setIfAbsent(K var1, V var2)</code></p><p>在键var1不存在时设置键值对[var1, var2]，</p><p><code>Boolean setIfAbsent(K var1, V var2, long var3, TimeUnit var5)</code></p><p>在键var1不存在时设置键值对[var1, var2]，并且通过TimeUnit设置过期时间</p><p><code>default Boolean setIfAbsent(K key, V value, Duration timeout)</code></p><p>在键var1不存在时设置键值对[var1, var2]，并且通过Duration设置过期时间</p><h3 id="setifabsent-2"><a class="markdownIt-Anchor" href="#setifabsent-2"></a> setIfAbsent</h3><p><code>Boolean setIfPresent(K var1, V var2)</code></p><p>在键key存在时设置值为value</p><p><code>Boolean setIfPresent(K var1, V var2, long var3, TimeUnit var5)</code></p><p>在键key存在时设置值为value，并且通过TimeUnit设置过期时间</p><p><code>default Boolean setIfPresent(K key, V value, Duration timeout)</code></p><p>在键key存在时设置值为value，并且通过Duration设置过期时间</p><h3 id="mutliset"><a class="markdownIt-Anchor" href="#mutliset"></a> mutliSet</h3><p><code>void multiSet(Map&lt;? extends K, ? extends V&gt; var1)</code></p><p>同时设置多个键值对</p><h3 id="mutliget"><a class="markdownIt-Anchor" href="#mutliget"></a> mutliGet</h3><p><code>List&lt;V&gt; multiGet(Collection&lt;K&gt; var1)</code></p><p>根据给定的Key集合同时取出多个值</p><h3 id="multisetifabsent"><a class="markdownIt-Anchor" href="#multisetifabsent"></a> multiSetIfAbsent</h3><p><code>Boolean multiSetIfAbsent(Map&lt;? extends K, ? extends V&gt; var1)</code></p><p>同时设置多个键值对当且仅当对应的键不存在时设置</p><h3 id="get"><a class="markdownIt-Anchor" href="#get"></a> get</h3><p><code>V get(Object var1)</code></p><p>取出键为var1的键值对对应的值</p><p><code>String get(K var1, long var2, long var4)</code></p><p>获得键为var1的键值对对应在区间[var2, var4)之间的子字符串</p><h3 id="increment"><a class="markdownIt-Anchor" href="#increment"></a> increment</h3><p><code>Long increment(K var1)</code></p><p>将键为var1键值对的值增加1</p><p><code>Long increment(K var1, long var2)</code></p><p>将键为var1键值对的值增加var2</p><p><code>Double increment(K var1, double var2)</code></p><p>将键为var1键值对的值增加var2（浮点数）</p><h3 id="decrement"><a class="markdownIt-Anchor" href="#decrement"></a> decrement</h3><p><code>Long decrement(K var1)</code></p><p>将键为var1键值对的值减少1</p><p><code>Long decrement(K var1, long var2)</code></p><p>将键为var1键值对的值减少var2</p><h3 id="size"><a class="markdownIt-Anchor" href="#size"></a> size</h3><p><code>Long size(K var1)</code></p><p>获得键为var1的键值对对应的值的长度</p><h3 id="append"><a class="markdownIt-Anchor" href="#append"></a> append</h3><p><code>Integer append(K var1, String var2)</code></p><p>将字符串var2追加都键为var1的键值对对应的值的后面</p><h3 id="getandset"><a class="markdownIt-Anchor" href="#getandset"></a> getAndSet</h3><p><code>V getAndSet(K var1, V var2)</code></p><p>设置新值，返回旧值</p><h2 id="opsforhash"><a class="markdownIt-Anchor" href="#opsforhash"></a> opsForHash</h2><p>针对哈希表的操作集合</p><h3 id="put"><a class="markdownIt-Anchor" href="#put"></a> put</h3><p><code>void put(H var1, HK var2, HV var3)</code></p><p>将记录[var2, var3]加入键为var1的哈希表中</p><h3 id="putall"><a class="markdownIt-Anchor" href="#putall"></a> putAll</h3><p><code>void putAll(H var1, Map&lt;? extends HK, ? extends HV&gt; var2)</code></p><p>将集合var2中的所有记录加入键为var1的哈希表中</p><h3 id="putifabsent"><a class="markdownIt-Anchor" href="#putifabsent"></a> putIfAbsent</h3><p><code>Boolean putIfAbsent(H var1, HK var2, HV var3)</code></p><p>将记录[var2, var3]加入键为var1的哈希表中如果[var2, var3]不存在</p><h3 id="size-2"><a class="markdownIt-Anchor" href="#size-2"></a> size</h3><p><code>Long size(H var1)</code></p><p>获得键为var1中的记录总数</p><h3 id="delete-2"><a class="markdownIt-Anchor" href="#delete-2"></a> delete</h3><p><code>Long delete(H var1, Object... var2)</code></p><p>删除键在可变数组中var2中的键值对记录</p><h3 id="haskey"><a class="markdownIt-Anchor" href="#haskey"></a> hasKey</h3><p><code>Boolean hasKey(H var1, Object var2)</code></p><p>判断哈希表var1中是否存在对应的哈希键var2</p><h3 id="keys"><a class="markdownIt-Anchor" href="#keys"></a> Keys</h3><p><code>Set&lt;HK&gt; keys(H var1)</code></p><p>返回哈希表var1的所有哈希key集合</p><h3 id="values"><a class="markdownIt-Anchor" href="#values"></a> values</h3><p><code>List&lt;HV&gt; values(H var1)</code></p><p>返回哈希表var1的所有哈希value集合</p><h3 id="entries"><a class="markdownIt-Anchor" href="#entries"></a> entries</h3><p><code>Map&lt;HK, HV&gt; entries(H var1)</code></p><p>返回哈希表var1中所有哈希键值对的entries集合</p><h3 id="lengthofvalue"><a class="markdownIt-Anchor" href="#lengthofvalue"></a> lengthOfValue</h3><p><code>Long lengthOfValue(H var1, HK var2)</code></p><p>返回哈希表var1中哈希键为var2的键值对对应的值的长度</p><h3 id="get-2"><a class="markdownIt-Anchor" href="#get-2"></a> get</h3><p><code>HV get(H var1, Object var2)</code></p><p>取得哈希表var1哈希键为var2的值</p><h3 id="increment-2"><a class="markdownIt-Anchor" href="#increment-2"></a> increment</h3><p><code>Long increment(H var1, HK var2, long var3)</code></p><p>将返回哈希表var1中哈希键为var2的键值对对应的值增加var3</p><p><code>double increment(H var1, HK var2, double var3)</code></p><p>将返回哈希表var1中哈希键为var2的键值对对应的值增加var3（double）</p><h3 id="mutliget-2"><a class="markdownIt-Anchor" href="#mutliget-2"></a> mutliGet</h3><p><code>List&lt;HV&gt; multiGet(H var1, Collection&lt;HK&gt; var2)</code></p><p>同时取得多个哈希值</p><h2 id="opsforlist"><a class="markdownIt-Anchor" href="#opsforlist"></a> opsForList</h2><p>针对列表的操作集合</p><h3 id="set-2"><a class="markdownIt-Anchor" href="#set-2"></a> set</h3><p><code>void set(K var1, long var2, V var4)</code></p><p>设置列表var1的索引下标var2位置的值为var4</p><h3 id="remove"><a class="markdownIt-Anchor" href="#remove"></a> remove</h3><p><code>Long remove(K var1, long var2, Object var4)</code></p><p>从列表var1的左边开始删除var2个值为var4的元素</p><h3 id="size-3"><a class="markdownIt-Anchor" href="#size-3"></a> size</h3><p><code>Long size(K var1)</code></p><p>返回列表var1中的元素个数</p><h3 id="range"><a class="markdownIt-Anchor" href="#range"></a> range</h3><p><code>List&lt;V&gt; range(K var1, long var2, long var4)</code></p><p>从列表var1中取出区间[var2, var4]的子列表</p><h3 id="trim"><a class="markdownIt-Anchor" href="#trim"></a> trim</h3><p><code>void trim(K var1, long var2, long var4)</code></p><p>移除列表var1中在区间[var2, var4]的元素</p><h3 id="leftpushrightpush"><a class="markdownIt-Anchor" href="#leftpushrightpush"></a> leftPush/rightPush</h3><p><code>Long leftPush(K var1, V var2)</code></p><p>在列表var1的左边/右边插入值为var2的元素</p><p><code>Long leftPush(K var1, V var2, V var3)</code></p><p>在列表var1的var2索引前/后插入var3</p><h3 id="leftpushallrightpushall"><a class="markdownIt-Anchor" href="#leftpushallrightpushall"></a> leftPushAll/rightPushAll</h3><p><code>Long leftPushAll(K var1, V... var2)</code></p><p>在列表var1的左边/右边依次插入var2变长数组中的元素</p><p><code>Long leftPushAll(K var1, Collection&lt;V&gt; var2)</code></p><p>在列表var1的左边/右边依次插入var2集合中的元素</p><h3 id="leftpushifpresentrightpushifpresent"><a class="markdownIt-Anchor" href="#leftpushifpresentrightpushifpresent"></a> leftPushIfPresent/rightPushIfPresent</h3><p><code>Long leftPushIfPresent(K var1, V var2)</code></p><p>在列表var1的左边/右边插入值为var2的元素当且仅当值var2不存在</p><h3 id="leftpoprightpop"><a class="markdownIt-Anchor" href="#leftpoprightpop"></a> leftPop/rightPop</h3><p><code>V leftPop(K var1)</code></p><p>移除并返回从列表var1左边/右边开始第一个值为var1的元素</p><p><code>V leftPop(K var1, long var2, TimeUnit var4)</code></p><p>移除并返回从列表var1左边/右边开始第var4个值为var1的元素</p><p><code>default V leftPop(K key, Duration timeout)</code></p><p>在timeout时间后移除并返回从列表var1左边/右边开始第一个值为var1的元素</p><h3 id="rightpopandleftpush"><a class="markdownIt-Anchor" href="#rightpopandleftpush"></a> rightPopAndLeftPush</h3><p><code>V rightPopAndLeftPush(K var1, K var2)</code></p><p>从var1的列表中移除最后一个元素，将其附加到var2的列表第一个元素前并返回其值</p><p><code>V rightPopAndLeftPush(K var1, K var2, long var3, TimeUnit var5)</code></p><p>在var3 TimeUnit时间后从var1的列表中移除最后一个元素，将其附加到var2的列表第一个元素前并返回其值</p><p><code>default V rightPopAndLeftPush(K sourceKey, K destinationKey, Duration timeout)</code></p><p>在timeout时间后从sourceKey的列表中移除最后一个元素，将其附加到destinationKey的列表第一个元素并返回其值</p><h2 id="opsforset"><a class="markdownIt-Anchor" href="#opsforset"></a> opsForSet</h2><p>针对集合的操作</p><h3 id="add"><a class="markdownIt-Anchor" href="#add"></a> add</h3><p><code>Long add(K var1, V... var2)</code></p><p>在集合var1中添加可变数组var2中的元素</p><h3 id="remove-2"><a class="markdownIt-Anchor" href="#remove-2"></a> remove</h3><p><code>Long remove(K var1, Object... var2)</code></p><p>在集合var1中移除可变数组var2中的元素</p><h3 id="ismemeber"><a class="markdownIt-Anchor" href="#ismemeber"></a> isMemeber</h3><p><code>Boolean isMember(K var1, Object var2)</code></p><p>判断var2是否是var1中</p><h3 id="members"><a class="markdownIt-Anchor" href="#members"></a> members</h3><p><code>Set&lt;V&gt; members(K var1)</code></p><p>返回集合var1中所有的元素集合</p><h3 id="randommember"><a class="markdownIt-Anchor" href="#randommember"></a> randomMember</h3><p><code>V randomMember(K var1)</code></p><p>随机从var1集合中返回一个元素</p><h3 id="randommembers"><a class="markdownIt-Anchor" href="#randommembers"></a> randomMembers</h3><p><code>List&lt;V&gt; randomMembers(K var1, long var2)</code></p><p>随机从var1集合中返回var1个元素组成的list集合</p><h3 id="distinctrandommembers"><a class="markdownIt-Anchor" href="#distinctrandommembers"></a> distinctRandomMembers</h3><p><code>Set&lt;V&gt; distinctRandomMembers(K var1, long var2)</code></p><p>随机从var1集合中返回var1个<strong>不同</strong>元素组成的list集合</p><h3 id="pop"><a class="markdownIt-Anchor" href="#pop"></a> pop</h3><p><code>V pop(K var1)</code></p><p>从set集合var1中随机弹出一个元素</p><p><code>List&lt;V&gt; pop(K var1, long var2)</code></p><p>从set集合var1中随机弹出var2个元素组成的list集合</p><h3 id="move-2"><a class="markdownIt-Anchor" href="#move-2"></a> move</h3><p><code>Boolean move(K var1, V var2, K var3)</code></p><p>将元素var2从var1集合移动到var2集合</p><h3 id="size-4"><a class="markdownIt-Anchor" href="#size-4"></a> size</h3><p><code>Long size(K var1)</code></p><p>返回set集合var1中的元素个数</p><h3 id="unionintersectdifference"><a class="markdownIt-Anchor" href="#unionintersectdifference"></a> union/intersect/difference</h3><p><code>Set&lt;V&gt; union(K var1, K var2)</code></p><p>返回set集合var1和set集合var2的并集/交集/补集</p><p><code>Set&lt;V&gt; union(K var1, Collection&lt;K&gt; var2)</code></p><p>返回set集合var1和Collection集合var2的并集/交集/补集</p><p><code>Set&lt;V&gt; union(Collection&lt;K&gt; var1)</code></p><p>返回集合key在var1中的元素集合的并集/交集/补集</p><h3 id="unionandstoreintersectandstoredifferenceandstore"><a class="markdownIt-Anchor" href="#unionandstoreintersectandstoredifferenceandstore"></a> unionAndStore/intersectAndStore/differenceAndStore</h3><p><code>Long unionAndStore(K var1, K var2, K var3)</code></p><p>将set集合var1和set集合var2的并集/交集/补集存到集合var3中</p><p><code>Long unionAndStore(K var1, Collection&lt;K&gt; var2, K var3)</code></p><p>将set集合var1和Collection集合var2的并集/交集/补集存到集合var3中</p><p><code>Long unionAndStore(Collection&lt;K&gt; var1, K var2)</code></p><p>将集合key在var1中的元素集合的并集/交集/补集存到集合var2中</p><h2 id="opsforzset"><a class="markdownIt-Anchor" href="#opsforzset"></a> opsForZSet</h2><p>针对有序集合ZSet的操作集合</p><h3 id="add-2"><a class="markdownIt-Anchor" href="#add-2"></a> add</h3><p><code>Boolean add(K key, V value, double score)</code></p><p>将元素及其权重score放到有序集合key中</p><p><code>Long add(K key, Set&lt;TypedTuple&lt;V&gt;&gt; tuples)</code></p><p>将tuples集合中的元素及其权重放到有序集合key中</p><h3 id="remove-3"><a class="markdownIt-Anchor" href="#remove-3"></a> remove</h3><p><code>Long remove(K key, Object... values)</code></p><p>将可变数组中的元素从有序结合key中移除</p><h3 id="removerange"><a class="markdownIt-Anchor" href="#removerange"></a> removeRange</h3><p><code>Long removeRange(K key, long start, long end)</code></p><p>将有序集合key中在区间[start, end]中的元素移除</p><h3 id="removerangebyscore"><a class="markdownIt-Anchor" href="#removerangebyscore"></a> removeRangeByScore</h3><p><code>Long removeRangeByScore(K key, double min, double max)</code></p><p>移除有序集合key权重在[min, max]之间的所有元素</p><h3 id="size-5"><a class="markdownIt-Anchor" href="#size-5"></a> size</h3><p><code>Long size(K key)</code></p><p>返回有序集合Key中元素的个数</p><h3 id="score"><a class="markdownIt-Anchor" href="#score"></a> score</h3><p><code>double score(K key, Object o)</code></p><p>给有序集合key中的元素o设置score</p><h3 id="range-2"><a class="markdownIt-Anchor" href="#range-2"></a> range</h3><p><code>Set&lt;V&gt; range(K key, long start, long end)</code></p><p>升序</p><p>返回有序结合Key中排名在[start, end]中的元素集合</p><h3 id="zcard"><a class="markdownIt-Anchor" href="#zcard"></a> zCard</h3><p><code>Long zCard(K key)</code></p><p>获得有序结合key中的元素个数</p><h3 id="rangewithscoresreverserange"><a class="markdownIt-Anchor" href="#rangewithscoresreverserange"></a> rangeWithScores|reverseRange</h3><p>返回有序结合Key中排名在[start, end]中的元素集合（带权重）</p><p>升序：<code>Set&lt;TypedTuple&lt;V&gt;&gt; rangeWithScores(K key, long start, long end)</code></p><p>降序： <code>Set&lt;V&gt; reverseRange(K key, long start, long end)</code></p><h3 id="rangebyscorereverserangebyscore"><a class="markdownIt-Anchor" href="#rangebyscorereverserangebyscore"></a> rangeByScore|reverseRangeByScore</h3><p>升序：<code>Set&lt;V&gt; rangeByScore(K key, double min, double max)</code></p><p>降序： <code>Set&lt;V&gt; reverseRangeByScore(K key, double min, double max)</code></p><p>返回有序集合Key中score在区间[min, max]中的有序集合</p><p>升序：<code>Set&lt;V&gt; rangeByScore(K key, double min, double max, long offset, long count)</code></p><p>降序：<code>Set&lt;V&gt; reverseRangeByScore(K key, double min, double max, long offset, long count)</code></p><p>返回有序集合Key中score在区间[min, max]中的有序集合在区间[offset, offset + count - 1] 返回的有序集合</p><h3 id="rangebyscorewithscoresrangebyscorewithscores"><a class="markdownIt-Anchor" href="#rangebyscorewithscoresrangebyscorewithscores"></a> rangeByScoreWithScores|rangeByScoreWithScores</h3><p>升序：<code>Set&lt;TypedTuple&lt;V&gt;&gt; rangeByScoreWithScores(K key, double min, double max)</code></p><p>降序：<code>Set&lt;TypedTuple&lt;V&gt;&gt; reverseRangeByScoreWithScores(K key, double min, double max)</code></p><p>返回有序集合Key中score在区间[min, max]中的有序集合（带权重）</p><p>升序：<code>Set&lt;TypedTuple&lt;V&gt;&gt; rangeByScoreWithScores(K key, double min, double max, long offset, long count)</code></p><p>降序：<code>Set&lt;TypedTuple&lt;V&gt;&gt; reverseRangeByScoreWithScores(K key, double min, double max, long offset, long count)</code></p><p>返回有序集合Key中score在区间[min, max]中的有序集合在区间[offset, offset + count - 1] 返回的有序集合（带权重）</p><h3 id="rangebylex"><a class="markdownIt-Anchor" href="#rangebylex"></a> rangeByLex</h3><p><code>Set&lt;V&gt; rangeByLex(K key, Range range)</code></p><p>返回有序集合key中在[range.getMin, range.getMax]中的有序集合</p><p><code>Set&lt;V&gt; rangeByLex(K key, Range range, Limit limit)</code></p><p>返回有序集合key中在[range.getMin, range.getMax]中的前limit个元素组成的有序集合</p><h3 id="rank"><a class="markdownIt-Anchor" href="#rank"></a> rank</h3><p><code>Long rank(K key, Object o)</code></p><p>返回集合升序排列时元素o的排名</p><h3 id="reverserank"><a class="markdownIt-Anchor" href="#reverserank"></a> reverseRank</h3><p><code>Long reverseRank(K key, Object o)</code></p><p>返回集合降序排列时元素o的排名</p><h3 id="count"><a class="markdownIt-Anchor" href="#count"></a> count</h3><p><code>Long count(K key, double min, double max)</code></p><p>返回有序集合key中score中[min, max]中的元素个数</p><h3 id="incrementscore"><a class="markdownIt-Anchor" href="#incrementscore"></a> incrementScore</h3><p><code>Double (K key, V value, double delta)</code></p><p>将有序集合key中value的score增加delta（浮点数）</p><h3 id="intersectandstore-unionandstore"><a class="markdownIt-Anchor" href="#intersectandstore-unionandstore"></a> intersectAndStore | unionAndStore</h3><p><code>Long intersectAndStore|unionAndStore(K key, K otherKey, K destKey)</code></p><p>将有序集合key和有序集合otherKey中的交集存到有序集合destKey中，并返回交集个数</p><p><code>Long intersectAndStore|unionAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey)</code></p><p>将有序集合key和有序集合（多个集合）otherKeys中的交集存到有序集合destKey中，并返回交集个数</p><p><code>default Long intersectAndStore|unionAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey, Aggregate aggregate)</code></p><p>将有序集合key和有序集合（多个集合）otherKeys中的交集存到有序集合destKey中，并返回交集个数，按照聚合规则Aggregate</p><blockquote><p>Aggregate枚举类</p><p>MAX:最大值</p><p>MIN:最小值</p><p>SUM:总和</p><p>Sort aggregation operations</p><p>排序聚合操作</p></blockquote><p><code>Long intersectAndStore|unionAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey, Aggregate aggregate, Weights weights)</code></p><p>将有序集合key和有序集合（多个集合）otherKeys中的交集存到有序集合destKey中，并返回交集个数，按照聚合规则Aggregate和乘法因子Weight</p><blockquote><p>Weight说明</p><p>Value object encapsulating a multiplication factor for each input sorted set. This means that the score of every element in every input sorted set is multiplied by this factor before being passed to the aggregation function</p><p>对象封装每个输入排序集的乘法因子。这意味着在传递给聚合函数之前，每个输入排序集中每个元素的得分都要乘以这个因子</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装redis</title>
      <link href="/posts/3e3f/"/>
      <url>/posts/3e3f/</url>
      
        <content type="html"><![CDATA[<p>参考官方文档：<a href="https://redis.io/docs/getting-started/installation/install-redis-from-source/">Install Redis from Source | Redis</a></p><h2 id="源码方式"><a class="markdownIt-Anchor" href="#源码方式"></a> 源码方式</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><h4 id="下载源码"><a class="markdownIt-Anchor" href="#下载源码"></a> 下载源码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://download.redis.io/redis-stable.tar.gz<br></code></pre></td></tr></table></figure><img src="/posts/3e3f/image-20220823110635518.png" alt="image-20220823110635518" style="zoom:150%;"><h4 id="解压源码"><a class="markdownIt-Anchor" href="#解压源码"></a> 解压源码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xzvf redis-stable.tar.gz<br></code></pre></td></tr></table></figure><p>得到的解压后的文件夹</p><p><img src="/posts/3e3f/image-20220823110845688.png" alt="image-20220823110845688"></p><h4 id="进入文件夹f"><a class="markdownIt-Anchor" href="#进入文件夹f"></a> 进入文件夹F</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd redis-stable<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823110954095.png" alt="image-20220823110954095"></p><h4 id="编译源码包"><a class="markdownIt-Anchor" href="#编译源码包"></a> 编译源码包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><p>编译完成后，目录结构如下</p><p><img src="/posts/3e3f/image-20220823111240965.png" alt="image-20220823111240965"></p><h4 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make isntall<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823111304913.png" alt="image-20220823111304913"></p><p>至此，源码方式安装就已经完成</p><h3 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h3><h4 id="删除安装好的redis相关文件"><a class="markdownIt-Anchor" href="#删除安装好的redis相关文件"></a> 删除安装好的redis相关文件</h4><p>安装好redis后，redis的相关操作文件默认放在/usr/local/bin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls /usr/local/bin<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823130121313.png" alt="image-20220823130121313"></p><p>我们将其删除即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /usr/local/bin/redis*<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823130226751.png" alt="image-20220823130226751"></p><h4 id="删除源码包"><a class="markdownIt-Anchor" href="#删除源码包"></a> 删除源码包</h4><p>我们安装时遗留下的源码包和源码安装包，可以将它们删除，达到彻底删除的效果</p><p><img src="/posts/3e3f/image-20220823130301853.png" alt="image-20220823130301853"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rfv ~/redis*<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823130438318.png" alt="image-20220823130438318"></p><p>好了，现在已经彻底卸载redis了</p><h2 id="snap方式"><a class="markdownIt-Anchor" href="#snap方式"></a> snap方式</h2><h3 id="安装-3"><a class="markdownIt-Anchor" href="#安装-3"></a> 安装</h3><h4 id="安装epel-release源"><a class="markdownIt-Anchor" href="#安装epel-release源"></a> 安装epel-release源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install epel-release<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823151758259.png" alt="image-20220823151758259"></p><h4 id="安装snapd"><a class="markdownIt-Anchor" href="#安装snapd"></a> 安装snapd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install snapd<br></code></pre></td></tr></table></figure><h4 id="添加snapdsocket到系统管理"><a class="markdownIt-Anchor" href="#添加snapdsocket到系统管理"></a> 添加snapd.socket到系统管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable --now snapd.socket<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823152207493.png" alt="image-20220823152207493"></p><h4 id="添加snap到链接库"><a class="markdownIt-Anchor" href="#添加snap到链接库"></a> 添加snap到链接库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s /var/lib/snapd/snap /snap<br></code></pre></td></tr></table></figure><h4 id="启动snapd"><a class="markdownIt-Anchor" href="#启动snapd"></a> 启动snapd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start snapd<br></code></pre></td></tr></table></figure><h4 id="查看snapd状态"><a class="markdownIt-Anchor" href="#查看snapd状态"></a> 查看snapd状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status snapd<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823152536647.png" alt="image-20220823152536647"></p><h4 id="安装redis"><a class="markdownIt-Anchor" href="#安装redis"></a> 安装redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo snap install redis<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823153246653.png" alt="image-20220823153246653"></p><h4 id="查看snap已安装的包"><a class="markdownIt-Anchor" href="#查看snap已安装的包"></a> 查看snap已安装的包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo snap list<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823155018281.png" alt="image-20220823155018281"></p><h4 id="进入snap的bin目录查看redis"><a class="markdownIt-Anchor" href="#进入snap的bin目录查看redis"></a> 进入snap的bin目录查看redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /var/lib/snapd/snap/bin/<br>ls<br></code></pre></td></tr></table></figure><p>这种方式安装的redis貌似没有redis-server？？？</p><p><img src="/posts/3e3f/image-20220823155208436.png" alt="image-20220823155208436"></p><h3 id="卸载-2"><a class="markdownIt-Anchor" href="#卸载-2"></a> 卸载</h3><h4 id="卸载redis"><a class="markdownIt-Anchor" href="#卸载redis"></a> 卸载redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo snap redis<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823155349794.png" alt="image-20220823155349794"></p><h4 id="卸载snapd"><a class="markdownIt-Anchor" href="#卸载snapd"></a> 卸载snapd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove snapd<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823155501822.png" alt="image-20220823155501822"></p><h4 id="卸载残留文件"><a class="markdownIt-Anchor" href="#卸载残留文件"></a> 卸载残留文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rm -rfv /var/lib/snapd<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rm -rfv ~/snap<br></code></pre></td></tr></table></figure><h2 id="yum方式"><a class="markdownIt-Anchor" href="#yum方式"></a> yum方式</h2><h3 id="安装-4"><a class="markdownIt-Anchor" href="#安装-4"></a> 安装</h3><h4 id="查找yum包管理器仓库是否有redis安装包"><a class="markdownIt-Anchor" href="#查找yum包管理器仓库是否有redis安装包"></a> 查找yum包管理器仓库是否有redis安装包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list | grep redis<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823151048651.png" alt="image-20220823151048651"></p><h4 id="安装-5"><a class="markdownIt-Anchor" href="#安装-5"></a> 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install redis<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823150723941.png" alt="image-20220823150723941"></p><h3 id="卸载-3"><a class="markdownIt-Anchor" href="#卸载-3"></a> 卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum remove redis<br></code></pre></td></tr></table></figure><p><img src="/posts/3e3f/image-20220823151459928.png" alt="image-20220823151459928"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习之创建MyBatis工程</title>
      <link href="/posts/d989/"/>
      <url>/posts/d989/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><h3 id="mybatis数据库和user表"><a class="markdownIt-Anchor" href="#mybatis数据库和user表"></a> mybatis数据库和user表</h3><h4 id="建库"><a class="markdownIt-Anchor" href="#建库"></a> 建库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database if exists mybatis;<br>create database mybatis;<br></code></pre></td></tr></table></figure><h4 id="建表"><a class="markdownIt-Anchor" href="#建表"></a> 建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table if exists user;<br>create table user<br>(<br>    id            bigint auto_increment comment &#x27;编号&#x27;<br>        primary key,<br>    user_name     varchar(256) null comment &#x27;姓名&#x27;,<br>    user_account  varchar(512) null unique comment &#x27;账号&#x27;,<br>    user_password varchar(512) null comment &#x27;密码&#x27;,<br>    user_sex      varchar(10)  null comment &#x27;性别&#x27;,<br>    user_age      int          null comment &#x27;年龄&#x27;,<br>    user_email    varchar(512) null comment &#x27;账号&#x27;<br>)<br>    comment &#x27;用户表&#x27;;<br></code></pre></td></tr></table></figure><h2 id="创建maven工程"><a class="markdownIt-Anchor" href="#创建maven工程"></a> 创建maven工程</h2><p>从idea中新建maven工程</p><p><img src="/posts/d989/image-20220907101418764.png" alt="image-20220907101418764"></p><h2 id="设置打包方式为jar包"><a class="markdownIt-Anchor" href="#设置打包方式为jar包"></a> 设置打包方式为jar包</h2><p>在pom.xml中添加下面的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="引入相关依赖"><a class="markdownIt-Anchor" href="#引入相关依赖"></a> 引入相关依赖</h2><p>相关依赖有mysql驱动、junit和Mybatis以及log4j日志框架，在pom.xml中加入以下代码块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建mybatis核心配置文件"><a class="markdownIt-Anchor" href="#创建mybatis核心配置文件"></a> 创建Mybatis核心配置文件</h2><p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p><p>Mybatis核心配置文件的名称随意，后缀为xml，这里叫做mybatis-config.xml</p><p>核心配置文件存放的位置在src/main/resources目录下</p><p><img src="/posts/d989/image-20220907102730345.png" alt="image-20220907102730345"></p><p>Mybatis核心配置文件内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置mysql驱动--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置要连接的数据库--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置mysql连接账号，这里换上自己的--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置mysql连接密码，这里换上自己的--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建user实体类"><a class="markdownIt-Anchor" href="#创建user实体类"></a> 创建User实体类</h2><p>创建数据库表user对应的实体类User</p><p>创建一个pojo包，里面放我们的实体类User</p><p>位置如下</p><p><img src="/posts/d989/image-20220907114136053.png" alt="image-20220907114136053"></p><p>User类内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String userAccount;<br>    <span class="hljs-keyword">private</span> String userPassword;<br>    <span class="hljs-keyword">private</span> String userSex;<br>    <span class="hljs-keyword">private</span> Integer userAge;<br>    <span class="hljs-keyword">private</span> String userEmail;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建mapper接口"><a class="markdownIt-Anchor" href="#创建mapper接口"></a> 创建mapper接口</h2><p>MyBatis中的mapper接口相当于jdbc的dao。但是mapper仅仅是接口，我们不需要实现</p><p>位置如下，先创建mapper包，在创建UserMapper接口</p><p><img src="/posts/d989/image-20220907112305336.png" alt="image-20220907112305336"></p><p>UserMapper接口内容如下</p><p><code>int insertUser()</code>方法等下做测试用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建mybatis的映射文件"><a class="markdownIt-Anchor" href="#创建mybatis的映射文件"></a> 创建MyBatis的映射文件</h2><p>我们在Mybatis的映射文件中写sql语句，映射到mapper接口对应的方法上去</p><p>配置文件位置</p><p><img src="/posts/d989/image-20220907143700237.png" alt="image-20220907143700237"></p><p>需要保证两个一致</p><ol><li>mapper接口的全类名和映射文件的namespace保持一致</li><li>mapper接口中的方法的方法名和映射文件中编写sql的标签的id属性保持一致</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--mapper接口的全类名和映射文件的namespace保持一致--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mapper接口中的方法的方法名和映射文件中编写sql的标签的id属性保持一致--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into user values(null, &#x27;jack&#x27;, &#x27;root&#x27;, &#x27;123456&#x27;, &#x27;男&#x27;, 18, &#x27;11111111@youxiang.com&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在核心配置文件中引入映射配置文件"><a class="markdownIt-Anchor" href="#在核心配置文件中引入映射配置文件"></a> 在核心配置文件中引入映射配置文件</h2><p>在核心配置文件中添加以下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;mappers&gt;<br>    &lt;mapper resource=<span class="hljs-string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;<br>&lt;/mappers&gt;<br></code></pre></td></tr></table></figure><p>插入位置如下</p><p><img src="/posts/d989/image-20220907152717487.png" alt="image-20220907152717487"></p><h2 id="加入log4j配置文件"><a class="markdownIt-Anchor" href="#加入log4j配置文件"></a> 加入log4j配置文件</h2><p>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</p><p><img src="/posts/d989/image-20220907144827127.png" alt="image-20220907144827127"></p><p>log4j配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">%m (%F:%L) \n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>在如下位置创建MyBatisTest测试类</p><p><img src="/posts/d989/image-20220907145543441.png" alt="image-20220907145543441"></p><p>jdbc中的事务是自动提交的，当我们手动对事务进行管理的时候，才会取消自动管理事务</p><p><strong>而mybatis默认是手动提交事务，这里我们为了方便测试，将其设置为自动提交事务（实际开发中应该根据业务需求设置自动提交事务）</strong></p><p>内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获得核心配置文件的输入流形式</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">// 获取SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-comment">// 以核心配置文件构建SqlSessionFactory对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 获取SqlSession对象，传参为true表示关闭事务，不传参表示开启事务</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 获取UserMapper对象</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">// 调用insertUser对象，插入数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.insertUser();<br>        <span class="hljs-comment">// 受影响的行数大于0，表示插入成功</span><br>        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;插入失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果</p><p><img src="/posts/d989/image-20220907153854701.png" alt="image-20220907153854701"></p><p>至此，MyBatis环境已经基本搭建起来！</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些特殊SQL使用Mybatis的#{}和${}注意点</title>
      <link href="/posts/c295/"/>
      <url>/posts/c295/</url>
      
        <content type="html"><![CDATA[<p>Mybatis对JDBC进行了进一步封装，使得我们可以更加便捷的使用Java操作数据库。Mybatis获取参数值有两种方式：<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code></p><p>在大部分情况下，<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>都能相互替代，使用两者之一即可，更加推荐使用<code>#&#123;&#125;</code>，因为可以防止SQL注入问题，但是由于<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>本质上的不同，部分SQL语句使用<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>需要格外注意</p><h2 id="和本质区别"><a class="markdownIt-Anchor" href="#和本质区别"></a> #{}和${}本质区别</h2><ol><li><code>#&#123;&#125;</code>本质上是占位符赋值，为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li><li><code>$&#123;&#125;</code>本质上是字符串拼接，为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</li></ol><h2 id="模糊查询"><a class="markdownIt-Anchor" href="#模糊查询"></a> 模糊查询</h2><p>这个场景下，使用<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>都能达到目的，但是用法稍有不同</p><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">selectLike</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;likeString&quot;)</span> String likeString)</span>;<br></code></pre></td></tr></table></figure><p><strong>直接使用#{}</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>select * from user where user_name like &#x27;%#&#123;likeString&#125;%&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果报错，<code>?</code>占位符被当做字符串处理了</p><p><img src="/posts/c295/image-20221005224430441.png" alt="image-20221005224430441"></p><p><strong>将#{}换成${}</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>    select * from user where user_name like &#x27;%$&#123;likeString&#125;%&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>成功执行</p><p><img src="/posts/c295/image-20221005224831546.png" alt="image-20221005224831546">如果非要使用#{}，也不是没有解决办法</p><p><strong>使用<code>&quot;&quot;</code>拼接</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>    select * from user where user_name like &quot;%&quot;#&#123;likeString&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><p><img src="/posts/c295/image-20221005225116146.png" alt="image-20221005225116146"></p><p><strong>使用concat函数</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>    select * from user where user_name like concat(&#x27;%&#x27;,#&#123;likeString&#125;,&#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><p><img src="/posts/c295/image-20221005225520256.png" alt="image-20221005225520256"></p><h2 id="动态表名"><a class="markdownIt-Anchor" href="#动态表名"></a> 动态表名</h2><p>在某些场景下，我们需要来回操作各种表，但SQL语句功能一致，这时我们可以使用动态表名，即传参为表名类型，这时就要从<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>中进行选择了</p><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">selectAllFromTable</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;<br></code></pre></td></tr></table></figure><p><strong>直接使用#{}</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllFromTable&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>    select * from #&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果报错，原因在于<code>#&#123;&#125;</code>为占位符赋值，传参为String的话就会自动补上单引号<code>''</code>，而表名不允许添加单引号，所以导致出错</p><p><img src="/posts/c295/image-20221006085148136.png" alt="image-20221006085148136"></p><p><strong>使用<code>$&#123;&#125;</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllFromTable&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>    select * from $&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果成功了，所以在动态表名的情况下，我们只能使用<code>$&#123;&#125;</code></p><p><img src="/posts/c295/image-20221006085828225.png" alt="image-20221006085828225"></p><h2 id="分页"><a class="markdownIt-Anchor" href="#分页"></a> 分页</h2><p>分页是一个实际开发中用的很广泛的一个功能，但是使用MyBatis传参进行手动分页时，坑可不小</p><p>首先我们来看一下分页公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from &lt;表名&gt; limit &lt;每页大小&gt; * (&lt;页码&gt; - 1), &lt;每页大小&gt;; <br></code></pre></td></tr></table></figure><p>写出公式，分页就变得很简单了，但是这时候使用#{}进行传参就有一些问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize 每页大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentPage 当前页码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 结果集List</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">selectAllByPage</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;pageSize&quot;)</span> Integer pageSize, <span class="hljs-meta">@Param(&quot;currentPage&quot;)</span> Integer currentPage)</span>;<br></code></pre></td></tr></table></figure><p><strong>使用#{}</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllByPage&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>    select * from #&#123;pageSize&#125; * (#&#123;currentPage&#125; - 1), #&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果报错，原因在于limit后面不能运算，而我们传入的正是运算表达式</p><p><img src="/posts/c295/image-20221006092530920.png" alt="image-20221006092530920"></p><p>既然不能运算，那我们将运算结果传进去不就好了?</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllByPage&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;</span><br>    select * from #&#123;pageSize * (currentPage - 1)&#125;, #&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果还是报错，原因在于#{}会将大括号内的表达式整体当成一个参数给占位符赋值，这显然是不可以的</p><p><img src="/posts/c295/image-20221006092428195.png" alt="image-20221006092428195"></p><p><strong>使用${}</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;selectAllByPage&quot;</span> resultType=<span class="hljs-string">&quot;pojo.User&quot;</span>&gt;<br>    select * from user limit $&#123;pageSize * (currentPage - <span class="hljs-number">1</span>)&#125;, #&#123;pageSize&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>结果成功了，<code>$&#123;&#125;</code>会先把大括号内的表达式计算出来，再来进行字符串拼接</p><p><img src="/posts/c295/image-20221006092133750.png" alt="image-20221006092133750"></p><blockquote><p>注：不光分页场景需要注意${}和#{}，其他需要传入<strong>计算表达式</strong>的场景也需要注意</p></blockquote><h2 id="批量删除"><a class="markdownIt-Anchor" href="#批量删除"></a> 批量删除</h2><p>有些场景，需要我们根据id数组批量删除记录，这个时候也有一些坑</p><p>由于id数组的长度是不确定的，所以我们不能确定参数的个数，但是我们可以使用in关键字，这个时候我们将id数组转为字符串进行传参就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] =&gt; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>Mapper接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Integer deleteByIds(String Ids);<br></code></pre></td></tr></table></figure><p><strong>使用<code>#&#123;&#125;</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>    delete from user where id in (#&#123;ids&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果报错，原因在于in后面的小括号里面的<code>'1,2,3'</code>为字符串类型且为一个整体，与整数类型不符，因此不能使用#{}</p><p><img src="/posts/c295/image-20221006093512825.png" alt="image-20221006093512825"></p><p><strong>使用<code>$&#123;&#125;</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>    delete from user where id in ($&#123;ids&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果成功了，看来有些场景不得不使用<code>$&#123;&#125;</code></p><p><img src="/posts/c295/image-20221006093835757.png" alt="image-20221006093835757"></p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC连接Mysql的几种方式</title>
      <link href="/posts/36d7/"/>
      <url>/posts/36d7/</url>
      
        <content type="html"><![CDATA[<h2 id="测试环境说明"><a class="markdownIt-Anchor" href="#测试环境说明"></a> 测试环境说明</h2><p>mysql数据库：jdbc:mysql://localhost:3306/test</p><p>IDE：IDEA 2022</p><p>JDK：JDK8</p><p>mysql：mysq 5.7</p><p>JDBC：5.1.37</p><h2 id="第一种方式"><a class="markdownIt-Anchor" href="#第一种方式"></a> 第一种方式</h2><p>使用静态加载驱动方式，连接mysql</p><p>这种方式灵活性差，依赖性强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 注册驱动</span><br>    <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<br>    <span class="hljs-comment">// 创建Properties对象，用于保存mysql账号和密码键值对</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>    properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>    <span class="hljs-comment">// 得到mysql的连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br>    <span class="hljs-comment">// 得到可以与mysql语句进行交互的对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    statement.close();<br>    <span class="hljs-comment">// 关闭与mysql的连接</span><br>    connection.close();<br></code></pre></td></tr></table></figure><h2 id="第二种方式"><a class="markdownIt-Anchor" href="#第二种方式"></a> 第二种方式</h2><p>在第一种方式的基础上使用反射动态加载驱动，依赖性减小、灵活性提高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;<br>    <span class="hljs-comment">// 使用反射动态加载mysql驱动件程序</span><br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>    <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) aClass.newInstance();<br>    <span class="hljs-comment">// 创建Properties对象，用于保存mysql账号和密码键值对</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>    properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>    <span class="hljs-comment">// 得到mysql的连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br>    <span class="hljs-comment">// 得到可以与mysql语句进行交互的对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    statement.close();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三种方式"><a class="markdownIt-Anchor" href="#第三种方式"></a> 第三种方式</h2><p>使用DriverManager统一进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;<br><span class="hljs-comment">// 使用反射动态加载mysql驱动件程序</span><br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>    <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) aClass.newInstance();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>    <span class="hljs-comment">// 使用DriverManager加载Driver</span><br>    DriverManager.registerDriver(driver);<br>    <span class="hljs-comment">// 得到mysql的连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>    <span class="hljs-comment">// 得到可以与mysql语句进行交互的对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    statement.close();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第四种方式"><a class="markdownIt-Anchor" href="#第四种方式"></a> 第四种方式</h2><p>其实Class.forName(“com.mysql.jdbc.Driver”)在底层已经自动加载好了Driver实例</p><p>所以Driver driver = (Driver) aClass.newInstance();这句话可以省略</p><p><strong>这种方式也是开发中使用最多的一种方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br>    <span class="hljs-comment">// 使用反射动态加载mysql驱动件程序</span><br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>    <span class="hljs-comment">// 得到mysql的连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>    <span class="hljs-comment">// 得到可以与mysql语句进行交互的对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    statement.close();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第五种方式"><a class="markdownIt-Anchor" href="#第五种方式"></a> 第五种方式</h2><p>mysql5.16后可以不用Class.forName(“com.mysql.jdbc.Driver”);来加载驱动了<br>从jdk1.5以后使用了jdbc4,不再需要显示调用class.forName()注册驱动而是自动调用驱动jar包下META-INF\services\java.sql.Driver文本中的类名称去注册<br><strong>建议还是写上 CLass . forName(“com.mysql.jdbc.Driver”),更加明确，兼容性更好</strong></p><p>这里同时使用properties配置文件实现动态信息动态读取，灵活性得到提升</p><p><strong>推荐使用这种方式</strong></p><p>src/com/mysql/mysql.properties配置文件内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>连接mysql程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection05</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException, IOException &#123;<br>    <span class="hljs-comment">// 使用Properties读取配置文件下的内容</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/com/mysql/mysql.properties&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-comment">// 得到mysql的连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>    <span class="hljs-comment">// 得到可以与mysql语句进行交互的对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    statement.close();<br>    <span class="hljs-comment">// 关闭与 mysql语句进行交互的对象</span><br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql命令补充</title>
      <link href="/posts/1602/"/>
      <url>/posts/1602/</url>
      
        <content type="html"><![CDATA[<h2 id="查看所有存储引擎"><a class="markdownIt-Anchor" href="#查看所有存储引擎"></a> 查看所有存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show engines;<br></code></pre></td></tr></table></figure><h2 id="查看mysql版本"><a class="markdownIt-Anchor" href="#查看mysql版本"></a> 查看mysql版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select version();<br></code></pre></td></tr></table></figure><h2 id="查看变量信息"><a class="markdownIt-Anchor" href="#查看变量信息"></a> 查看变量信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables;<br></code></pre></td></tr></table></figure><h2 id="查看数据库中表的状态"><a class="markdownIt-Anchor" href="#查看数据库中表的状态"></a> 查看数据库中表的状态</h2><p>会展示指定数据库中所有表的状态信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show table status;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器上创建git仓库</title>
      <link href="/posts/a0d2/"/>
      <url>/posts/a0d2/</url>
      
        <content type="html"><![CDATA[<h1 id="在服务器上创建git仓库"><a class="markdownIt-Anchor" href="#在服务器上创建git仓库"></a> 在服务器上创建git仓库</h1><h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><p>服务器：阿里云轻量应用服务器</p><p>系统版本：ubuntu20.04.1 LTS</p><h2 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装git</h2><p>检查git是否安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git<br></code></pre></td></tr></table></figure><p>如果出现以下信息，说明安装了git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">usage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]<br>           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]<br>           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]<br>           &lt;command&gt; [&lt;args&gt;]<br><br>These are common Git commands used in various situations:<br><br>start a working area (see also: git help tutorial)<br>   clone             Clone a repository into a new directory<br>   init              Create an empty Git repository or reinitialize an existing one<br><br>work on the current change (see also: git help everyday)<br>   add               Add file contents to the index<br>   mv                Move or rename a file, a directory, or a symlink<br>   restore           Restore working tree files<br>   rm                Remove files from the working tree and from the index<br>   sparse-checkout   Initialize and modify the sparse-checkout<br><br>examine the history and state (see also: git help revisions)<br>   bisect            Use binary search to find the commit that introduced a bug<br>   diff              Show changes between commits, commit and working tree, etc<br>   grep              Print lines matching a pattern<br>   log               Show commit logs<br>   show              Show various types of objects<br>   status            Show the working tree status<br><br>grow, mark and tweak your common history<br>   branch            List, create, or delete branches<br>   commit            Record changes to the repository<br>   merge             Join two or more development histories together<br>   rebase            Reapply commits on top of another base tip<br>   reset             Reset current HEAD to the specified state<br>   switch            Switch branches<br>   tag               Create, list, delete or verify a tag object signed with GPG<br><br>collaborate (see also: git help workflows)<br>   fetch             Download objects and refs from another repository<br>   pull              Fetch from and integrate with another repository or a local branch<br>   push              Update remote refs along with associated objects<br><br>&#x27;git help -a&#x27; and &#x27;git help -g&#x27; list available subcommands and some<br>concept guides. See &#x27;git help &lt;command&gt;&#x27; or &#x27;git help &lt;concept&gt;&#x27;<br>to read about a specific subcommand or concept.<br>See &#x27;git help git&#x27; for an overview of the system.<br><br></code></pre></td></tr></table></figure><p>如果是其他报错信息，也没关系，我们进行git的安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git<br></code></pre></td></tr></table></figure><h2 id="创建git用户"><a class="markdownIt-Anchor" href="#创建git用户"></a> 创建git用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adduser git<br></code></pre></td></tr></table></figure><p>切换到git用户， 带<code>-</code>表示切换并跳转目录到家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su - git<br></code></pre></td></tr></table></figure><h2 id="配置公钥"><a class="markdownIt-Anchor" href="#配置公钥"></a> 配置公钥</h2><p>创建目录<code>.ssh</code>和文件<code>authorization_keys</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir .ssh<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd .ssh<br>touch authorization_keys<br></code></pre></td></tr></table></figure><p>将windows中的公钥上传至服务器</p><p><img src="/posts/a0d2/image-20221130205807626.png" alt="image-20221130205807626"></p><p>然后写入<code>authorization_key</code>文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat id_rsa.pub &gt;&gt; authorized_keys<br></code></pre></td></tr></table></figure><p>给<code>ssh</code>和<code>authorized_keys</code>添加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 700 .ssh<br>chmod 700 .authorized_keys<br></code></pre></td></tr></table></figure><h2 id="创建repositories目录"><a class="markdownIt-Anchor" href="#创建repositories目录"></a> 创建repositories目录</h2><p>这个目录的主要作用是存放我们的git仓库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir repositories<br></code></pre></td></tr></table></figure><h2 id="测试ssh免密登录"><a class="markdownIt-Anchor" href="#测试ssh免密登录"></a> 测试ssh免密登录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh git@你的服务器ip<br></code></pre></td></tr></table></figure><p>如果可以免密登录，就说明免密配置成功了</p><h2 id="测试push"><a class="markdownIt-Anchor" href="#测试push"></a> 测试push</h2><p>在repositories目录创建<code>test.git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd repositories<br>mkdir test<br></code></pre></td></tr></table></figure><p>初始化仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd test.git<br>git init<br></code></pre></td></tr></table></figure><p>同时在windows中也创建一个代码仓库<code>test.git</code></p><p>并在仓库中添加一个<code>hello.txt</code>文件，内容如下</p><p><img src="/posts/a0d2/image-20221130212353817.png" alt="image-20221130212353817"></p><p>然后在windows的git中执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br>git commit -m &quot;第一次测试&quot;<br>git remote add origin git@你的服务器地址:/home/git/repositories/test.git(你的仓库所在位置)<br>git push -u origin master<br></code></pre></td></tr></table></figure><h2 id="出现错误"><a class="markdownIt-Anchor" href="#出现错误"></a> 出现错误</h2><h3 id="push失败"><a class="markdownIt-Anchor" href="#push失败"></a> push失败</h3><p><img src="/posts/a0d2/image-20221130222315736.png" alt="image-20221130222315736"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config receive.denyCurrentBranch ignore<br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/qq_32865337/article/details/101210421">git push时出现错误refusing to update checked out branch: refs/heads/master_偏头痛时喝可乐的博客-CSDN博客_error: branch refs/heads/master:</a></p><p>这时，config配置后面多了一条</p><p><img src="/posts/a0d2/image-20221130223212773.png" alt="image-20221130223212773"></p><h3 id="服务器上没有看到push后的文件"><a class="markdownIt-Anchor" href="#服务器上没有看到push后的文件"></a> 服务器上没有看到push后的文件</h3><p>这类问题就是push到服务器上之后，没有看到push后的内容，但是log里面却有提交记录</p><p><img src="/posts/a0d2/image-20221130222923538.png" alt="image-20221130222923538"></p><p>解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard<br></code></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://blog.csdn.net/beagreatprogrammer/article/details/77018120">Git push 出错以及server端没有显示push后的文件的解决方法_R先森的博客-CSDN博客</a></p><p>然后查看hello.txt文件内容</p><p><img src="/posts/a0d2/image-20221130223320538.png" alt="image-20221130223320538"></p><p>一切正常，nice！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04安装Docker</title>
      <link href="/posts/529c/"/>
      <url>/posts/529c/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu2004安装docker"><a class="markdownIt-Anchor" href="#ubuntu2004安装docker"></a> Ubuntu20.04安装Docker</h1><p>官方安装地址：<a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu | Docker Documentation</a></p><h2 id="卸载旧版本"><a class="markdownIt-Anchor" href="#卸载旧版本"></a> 卸载旧版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get remove docker docker-engine docker.io containerd runc<br></code></pre></td></tr></table></figure><p><img src="/posts/529c/image-20221117120656956.png" alt="image-20221117120656956"></p><h2 id="使用仓库安装docker"><a class="markdownIt-Anchor" href="#使用仓库安装docker"></a> 使用仓库安装Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><p><img src="/posts/529c/image-20221117120813729.png" alt="image-20221117120813729"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install \<br>    ca-certificates \<br>    curl \<br>    gnupg \<br>    lsb-release<br></code></pre></td></tr></table></figure><p><img src="/posts/529c/image-20221117120913255.png" alt="image-20221117120913255"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/apt/keyrings<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br></code></pre></td></tr></table></figure><p><img src="/posts/529c/image-20221117121058289.png" alt="image-20221117121058289"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo \<br>  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \<br><span class="hljs-meta prompt_">  $</span><span class="language-bash">(lsb_release -cs) stable<span class="hljs-string">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span><br></code></pre></td></tr></table></figure><p><img src="/posts/529c/image-20221117121136980.png" alt="image-20221117121136980"></p><h2 id="安装docker-engine"><a class="markdownIt-Anchor" href="#安装docker-engine"></a> 安装Docker Engine</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><p><img src="/posts/529c/image-20221117121231112.png" alt="image-20221117121231112"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod a+r /etc/apt/keyrings/docker.gpg<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><p><img src="/posts/529c/image-20221117121344096.png" alt="image-20221117121344096"></p><p>终极一步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><h2 id="输出hello-world"><a class="markdownIt-Anchor" href="#输出hello-world"></a> 输出Hello World</h2><p><img src="/posts/529c/image-20221117121536316.png" alt="image-20221117121536316"></p><p>安装完毕！</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解HashMap</title>
      <link href="/posts/1097/"/>
      <url>/posts/1097/</url>
      
        <content type="html"><![CDATA[<h2 id="modcount变量的作用"><a class="markdownIt-Anchor" href="#modcount变量的作用"></a> modCount变量的作用</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习资源汇总</title>
      <link href="/posts/5bf5/"/>
      <url>/posts/5bf5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>这篇博客主要汇总了本人平时收集的一些自认为比较优质的学习资源，方便本人以及看到这篇文章的朋友，会不定期更新😊。</p><h2 id="资源汇总"><a class="markdownIt-Anchor" href="#资源汇总"></a> 资源汇总</h2><h3 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h3><ol><li><p><a href="https://javaguide.cn/">Java 面试指南</a></p></li><li><p><a href="https://bugstack.cn/">bugstack 虫洞栈</a></p></li><li><p><a href="https://tech.meituan.com/">美团技术团队 </a></p></li><li><p><a href="https://www.pdai.tech/">Java全栈知识体系</a></p></li><li><p><a href="http://www.susan.net.cn/">Java突击队</a></p></li></ol><h3 id="golang"><a class="markdownIt-Anchor" href="#golang"></a> Golang</h3><ol><li><a href="https://www.topgoer.com/">前景 · Go语言中文文档</a></li><li><a href="https://www.kancloud.cn/wangking/gogogo/2067280">基础知识 · Go · 看云 </a></li></ol><h3 id="综合"><a class="markdownIt-Anchor" href="#综合"></a> 综合</h3><ol><li><p><a href="https://xiaolincoding.com/">小林Coding</a></p></li><li><p><a href="https://hit-alibaba.github.io/interview/">笔试面试知识整理</a></p></li><li><p><a href="https://www.cyc2018.xyz/">CS-Notes 面试笔记</a></p></li></ol><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><ol><li><a href="https://coverview.vercel.app/">博客封面图片生成</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 资源汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker空镜像原因排查</title>
      <link href="/posts/0/"/>
      <url>/posts/0/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>最近项目使用Docker构建镜像时总是会出现空镜像，如下图所示，其中REPOSITORY和TAG名称都为<code>&lt;none&gt;</code>，非常好奇。</p><p><img src="/posts/0/image-20230811134459683.png" alt="image-20230811134459683"></p><h2 id="查找空镜像"><a class="markdownIt-Anchor" href="#查找空镜像"></a> 查找空镜像</h2><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images -f dangling=true<br></code></pre></td></tr></table></figure><p><img src="/posts/0/image-20230811135343038.png" alt="image-20230811135343038"></p><h2 id="清理空镜像"><a class="markdownIt-Anchor" href="#清理空镜像"></a> 清理空镜像</h2><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rmi $(docker images -f &quot;dangling=true&quot; -q)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image prune<br></code></pre></td></tr></table></figure><p>注意<code>-a</code>参数不仅会删除<code>dangling</code>镜像，还会删除所有<code>unuse</code>镜像，这里仅仅是删除<code>dangling</code>镜像。</p><p><img src="/posts/0/image-20230811135556359.png" alt="image-20230811135556359"></p><p>再次查看Docker镜像，发现空镜像都被清除了</p><p><img src="/posts/0/image-20230811135643166.png" alt="image-20230811135643166"></p><h2 id="问题复现"><a class="markdownIt-Anchor" href="#问题复现"></a> 问题复现</h2><p>由于空镜像是项目镜像构建时出现的，所以这里重复之前构建时的执行的动作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t net-admin:latest .<br></code></pre></td></tr></table></figure><p>本次构建时没有发现空镜像</p><p><img src="/posts/0/image-20230811140753904.png" alt="image-20230811140753904"></p><p>重复构建之后，没有发现空镜像，很奇怪，待下次问题复现后记录原因。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法学习</title>
      <link href="/posts/58206/"/>
      <url>/posts/58206/</url>
      
        <content type="html"><![CDATA[<h2 id="变量与赋值"><a class="markdownIt-Anchor" href="#变量与赋值"></a> 变量与赋值</h2><p>python是弱数据类型语言，变量可以接收任何类型的数值，数据是什么类型，变量就是什么类型</p><p>赋值即定义变量，变量必须先赋值后使用</p><h3 id="基本赋值"><a class="markdownIt-Anchor" href="#基本赋值"></a> 基本赋值</h3><p>赋值演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 变量与赋值</span><br>x = <span class="hljs-number">3</span><br>y = <span class="hljs-number">5.2</span><br><span class="hljs-built_in">print</span>(x, y)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">3 5.2<br></code></pre></td></tr></table></figure><h3 id="链式赋值"><a class="markdownIt-Anchor" href="#链式赋值"></a> 链式赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 链式赋值</span><br>x = y = z = <span class="hljs-number">7</span><br><span class="hljs-built_in">print</span>(x, y, z)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">7 7 7<br></code></pre></td></tr></table></figure><h3 id="解包赋值"><a class="markdownIt-Anchor" href="#解包赋值"></a> 解包赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解包赋值</span><br>a, b = <span class="hljs-number">100</span>, <span class="hljs-number">200</span><br><span class="hljs-built_in">print</span>(a, b)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">100 200<br></code></pre></td></tr></table></figure><p>解包赋值可以实现两个变量值的交换</p><p>解包赋值交换演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解包赋值交换</span><br>a = <span class="hljs-number">3</span><br>b = <span class="hljs-number">4</span><br>a, b = b, a<br><span class="hljs-built_in">print</span>(a, b)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">4 3<br></code></pre></td></tr></table></figure><h2 id="输入输出"><a class="markdownIt-Anchor" href="#输入输出"></a> 输入输出</h2><p>输入函数input</p><p><code>def input(__prompt);</code></p><p><code>__prompt</code>为提示信息，可以省略、</p><h3 id="基本输入"><a class="markdownIt-Anchor" href="#基本输入"></a> 基本输入</h3><p>样例演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入输出</span><br>var = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;我将打印你所输入的内容: &quot;</span>)<br><span class="hljs-built_in">print</span>(var)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">我将重复你所输入的内容: hello, world<br>hello, world<br></code></pre></td></tr></table></figure><p>不论输入什么，input都接收并将其打包成一个字符串返回</p><p>若要接收一个数字，通常在接收的同时进行类型转换</p><p>样例演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input返回值验证</span><br>i = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入: &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(i))<br><span class="hljs-comment"># 转换为int</span><br>i = <span class="hljs-built_in">int</span>(i)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(i))<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">请输入: 2<br>&lt;class &#x27;str&#x27;&gt;<br>&lt;class &#x27;int&#x27;&gt;<br></code></pre></td></tr></table></figure><h3 id="表达式解析"><a class="markdownIt-Anchor" href="#表达式解析"></a> 表达式解析</h3><p>还有一种输入方式，称为表达式解析</p><p>通过一个内置的函数eval()，将用户输入的字符串解析为表达式（单个数据 也是表达式），若表达式可计算，则计算后返回其值</p><p>格式为<code>变量 = eval(input(&quot;提示字符串&quot;))</code></p><p>可认为eval是去掉接收到的字符串的引号</p><p>样例演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># eval表达式解析</span><br>c = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入: &quot;</span>))<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">请输入: 3**2<br>9<br></code></pre></td></tr></table></figure><p>输出函数print</p><p><code>def print(self, *args, sep=' ', end='\n', file=None)</code></p><p>参数说明</p><ul><li>sep: 输出表达式之间的间隔字符串，默认是空格</li><li>end：输出表达式的结尾字符串，默认是换行</li></ul><p>案例演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#print输入输出</span><br>a = b = c = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(a, b, c)<br><span class="hljs-built_in">print</span>(a, b, c, sep=<span class="hljs-string">&#x27;#&#x27;</span>)<br><span class="hljs-built_in">print</span>(a, b, c , <span class="hljs-string">&#x27;\n\n&#x27;</span>, end=<span class="hljs-string">&quot;换行&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 1 1<br><span class="hljs-meta prompt_">1#</span><span class="language-bash">1<span class="hljs-comment">#1</span></span><br>1 1 1 <br><br>换行<br></code></pre></td></tr></table></figure><h3 id="格式化输出"><a class="markdownIt-Anchor" href="#格式化输出"></a> 格式化输出</h3><p>这块使用方法和c语言格式化输出差不多</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230221212401216.png" alt="image-20230221212401216"></p><h4 id="整数格式化演示"><a class="markdownIt-Anchor" href="#整数格式化演示"></a> 整数格式化演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 格式化输出 整数</span><br>x = <span class="hljs-number">1024</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %6d&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %2d&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %-6d&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %+6d&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %06d&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %#o&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = %#x&quot;</span> % x)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">x =   1024<br>x = 1024<br>x = 1024  <br>x =  +1024<br>x = 001024<br>x = 0o2000<br>x = 0x400<br></code></pre></td></tr></table></figure><h4 id="浮点数格式化演示"><a class="markdownIt-Anchor" href="#浮点数格式化演示"></a> 浮点数格式化演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 浮点数输出格式 浮点数</span><br>x = <span class="hljs-number">128.22222</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%6.2f&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%3.1f&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%.2e&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%+6.2f&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%12.2f&quot;</span> % x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%-12.2f&quot;</span> % x)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">128.22<br>128.2<br>1.28e+02<br>+128.22<br>      128.22<br>128.22      <br></code></pre></td></tr></table></figure><h4 id="字符串输出格式化示例"><a class="markdownIt-Anchor" href="#字符串输出格式化示例"></a> 字符串输出格式化示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串输出格式化示例 字符串</span><br>name = <span class="hljs-string">&quot;湖南科技大学&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%10s&quot;</span> % name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%10.2s&quot;</span> % name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%-10.2s&quot;</span> % name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%1.2s&quot;</span> % name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%4s&quot;</span> % name)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">湖南科技大学<br>    湖南<br>湖南        <br>湖南<br>湖南科技大学<br></code></pre></td></tr></table></figure><h3 id="格式化函数输出"><a class="markdownIt-Anchor" href="#格式化函数输出"></a> 格式化函数输出</h3><p>格式字符串和format之间用 . 隔开</p><h4 id="基本用法"><a class="markdownIt-Anchor" href="#基本用法"></a> 基本用法</h4><p>（1）空括号，即“{}”</p><p>（2）带数字(参数位置序号，默认从0开始，可调换顺序)，如{1} 、 {2}</p><p>（3）带关键字(可读性好），如：{name}、{age}</p><p>案例演示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 格式化函数输出 基本用法</span><br>name = input()<br>age = int(input())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;姓名: &#123;&#125;, 年龄: &#123;&#125;&quot;</span>.format(name, age))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;姓名: &#123;1&#125;, 年龄: &#123;0&#125;&quot;</span>.format(age, name))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;姓名: &#123;n&#125;, 年龄: &#123;a&#125;&quot;</span>.format(n = name, a = age))<br></code></pre></td></tr></table></figure><h4 id="进阶用法"><a class="markdownIt-Anchor" href="#进阶用法"></a> 进阶用法</h4><p>（1）&lt; 左对齐、&gt; 右对齐（默认）、^ 中间对齐</p><p>（2）设置输出位数“{:4s}”、&quot;{:.2f}&quot;等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">r = <span class="hljs-number">3</span><br>pi = <span class="hljs-number">3.1415926</span><br>area = pi * r * r<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(pi))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;半径: &#123;0:&lt;3d&#125;, 面积: &#123;1:10.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(r, area))<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">3.14<br>半径: 3  , 面积:     28.274<br></code></pre></td></tr></table></figure><h4 id="f-string简化输出"><a class="markdownIt-Anchor" href="#f-string简化输出"></a> f-string简化输出</h4><p>格式：f带占位大括号的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># f-string输出</span><br>r = <span class="hljs-number">3</span><br>pi = <span class="hljs-number">3.1415926</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;pi&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;圆周率: <span class="hljs-subst">&#123;pi: &lt;<span class="hljs-number">.2</span>f&#125;</span>, 面积: <span class="hljs-subst">&#123;pi * r * r :<span class="hljs-number">10.3</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">3.1415926<br>圆周率: 3.14, 面积:     28.274<br></code></pre></td></tr></table></figure><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><h3 id="单行注释"><a class="markdownIt-Anchor" href="#单行注释"></a> 单行注释</h3><p>单行注释以<code>#</code>开头</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br></code></pre></td></tr></table></figure><h3 id="多行注释"><a class="markdownIt-Anchor" href="#多行注释"></a> 多行注释</h3><p>多行注释用三个单引号<code>'''</code>或者<code>&quot;&quot;&quot;</code>将注释括起来</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><p>python数据类型主要分为以下六大类</p><p>Numbers（数字）：int、float、complex、bool</p><p>String（字符串）</p><p>List（列表）</p><p>Tuple（元组）</p><p>Dictionary（字典）</p><p>set（集合）</p><p>其中：</p><p>值类型(不可变)：Number（数字）、String（字符串）、Tuple（元组）</p><p>引用类型(可变)：List（列表）、Dictionary（字典）、Set（集合）</p><h3 id="数字类型"><a class="markdownIt-Anchor" href="#数字类型"></a> 数字类型</h3><h4 id="整型"><a class="markdownIt-Anchor" href="#整型"></a> 整型</h4><p>取值为整数，有正有负，如 2，-666，666 等。</p><p>没有长度限制，可以定义或计算几百位的大整数。</p><p>支持4种数制：十（默认）、二（前缀为0b或0B）、八（前缀为0o或0O ）、 十六(前缀为0x或0X）</p><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据类型 整型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10000</span>) <span class="hljs-comment"># 十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0b0101</span>) <span class="hljs-comment"># 二进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0o100</span>) <span class="hljs-comment"># 八进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0x100</span>) <span class="hljs-comment"># 十六进制</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">10000<br>5<br>64<br>256<br></code></pre></td></tr></table></figure><h4 id="浮点型"><a class="markdownIt-Anchor" href="#浮点型"></a> 浮点型</h4><p>浮点数（实数）是指带小数的数字，如3.14、4.、.5</p><p>还有一种表示浮点数的方式——科学计数法：-27.3e2</p><p>Python中能使用的只有十进制浮点数。</p><p>Python浮点数有长度限制，超过上下限会导致溢出错误。</p><p>浮点数不一定能精确表示小数，精度有限。</p><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据类型 浮点型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3.9</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">100.0</span> * <span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(-<span class="hljs-number">27.3e2</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">3.9<br>10000.0<br>-2730.0<br></code></pre></td></tr></table></figure><h4 id="复数型"><a class="markdownIt-Anchor" href="#复数型"></a> 复数型</h4><p>使用 1j （或1J）表示-1的平方根</p><p>复数对象有两个属性：real（实部）和imag（虚部）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据类型 复数型</span><br>x = <span class="hljs-number">3</span> + <span class="hljs-number">4J</span><br><span class="hljs-built_in">print</span>(x.real)<br><span class="hljs-built_in">print</span>(x.imag)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> + x)<br><span class="hljs-built_in">print</span>(x * x)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">数据类型 复数型</span><br>x = 3 + 4J<br>print(x.real)<br>print(x.imag)<br>print(3 + x)<br>print(x * x)<br></code></pre></td></tr></table></figure><h4 id="布尔型"><a class="markdownIt-Anchor" href="#布尔型"></a> 布尔型</h4><p>布尔值只有两个取值：True和False(注意首字母大写）</p><p>可参与算数运算，运算时True的值为1，False的值为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据类型 布尔型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span> &gt; <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> + <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> == <span class="hljs-string">&#x27;1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">False<br>True<br>4<br>False<br></code></pre></td></tr></table></figure><h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3><p>我们可以用引号<code>'</code>或者<code>&quot;</code>来创建字符串</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串创建</span><br>str1 = <span class="hljs-string">&#x27;hello&#x27;</span><br>str2 = <span class="hljs-string">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure><p>访问字符串中的值</p><p>python不支持单字符类型，单字符在python中也是作为一个字符串使用</p><p>python访问子字符串，可以用方括号<code>[]</code>截取字符串</p><p>语法格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">变量[头下标:尾下标]<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 访问字符串中的值</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;湖南科技大学&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[:])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">湖<br>南<br>湖南科技大学<br>南科技<br>湖南科<br>南科技大学<br></code></pre></td></tr></table></figure><p>字符串运算符</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230222112859330.png" alt="image-20230222112859330"></p><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串运算符</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> + <span class="hljs-string">&quot;world&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> * <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">R&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">helloworld<br>hellohello<br>True<br>False<br>\n<br>\n<br></code></pre></td></tr></table></figure><p>python三引号</p><p>三引号允许一个字符串跨多行使用</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python三引号</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&quot;&quot;举杯邀明月,</span><br><span class="hljs-string">对饮成三人。&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">举杯邀明月,<br>对饮成三人。<br></code></pre></td></tr></table></figure><h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3><p>就是一个简单的线性表数据结构</p><p>创建一个列表,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>]<br></code></pre></td></tr></table></figure><p>然后直接输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&#x27;你好&#x27;, &#x27;再见&#x27;, 4, 3.5]<br></code></pre></td></tr></table></figure><p>访问列表中的值</p><p>正向访问，索引从0开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表正向访问</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">你好<br>再见<br>4<br></code></pre></td></tr></table></figure><p>也可以从列表尾部开始访问，最后一个元素索引为<code>-1</code>，往前一位元素索引为<code>-2</code>，以此类推</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表逆向访问</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[-<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[-<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">3.5<br>4<br>再见<br></code></pre></td></tr></table></figure><p>列表截取和字符串截取差不多，这里不多赘述</p><p>更新列表</p><p>可以对列表的数据项进行修改或者更新，可以通过append()方法添加列表项</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表更新</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>]<br><span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;好的&#x27;</span><br><span class="hljs-built_in">list</span>.append(<span class="hljs-number">555</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&#x27;你好&#x27;, &#x27;好的&#x27;, 4, 3.5, 555]<br></code></pre></td></tr></table></figure><p>删除列表元素</p><p>可以使用del语句删除列表中的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表删除</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>]<br><span class="hljs-keyword">del</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&#x27;你好&#x27;, &#x27;再见&#x27;, 3.5]<br></code></pre></td></tr></table></figure><h3 id="元组"><a class="markdownIt-Anchor" href="#元组"></a> 元组</h3><p>元组与列表相似，差别在于元组的元素不能修改</p><p>元组使用<code>()</code>，而列表使用<code>[]</code></p><p>创建元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元组创建</span><br><span class="hljs-built_in">tuple</span> = (<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">(&#x27;你好&#x27;, &#x27;再见&#x27;, 4, 3.5)<br></code></pre></td></tr></table></figure><p>访问元组</p><p>访问元组的方式和访问列表差不多，这里不多赘述</p><p>修改元组</p><p>元组的元素值虽然不可以修改，但是我们可以对元组进行连接组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元组修改</span><br>tuple1 = (<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>)<br>tuple2 = (<span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>)<br>tuple3 = tuple1 + tuple2<br><span class="hljs-built_in">print</span>(tuple3)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">(&#x27;你好&#x27;, &#x27;再见&#x27;, 4, 3.5)<br></code></pre></td></tr></table></figure><p>删除元组</p><p>元组的元素值虽然不可以删除，但是可以通过<code>del</code>语句来删除整个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元组删除</span><br>tup = (<span class="hljs-string">&#x27;你好&#x27;</span>, <span class="hljs-string">&#x27;再见&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.5</span>)<br><span class="hljs-built_in">print</span>(tup)<br><span class="hljs-keyword">del</span> tup<br><span class="hljs-built_in">print</span>(tup)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Traceback (most recent call last):<br>  File &quot;E:\PythonCode\test1.py&quot;, line 189, in &lt;module&gt;<br>    print(tup)<br>NameError: name &#x27;tup&#x27; is not defined<br>(&#x27;你好&#x27;, &#x27;再见&#x27;, 4, 3.5)<br></code></pre></td></tr></table></figure><h3 id="字典"><a class="markdownIt-Anchor" href="#字典"></a> 字典</h3><p>字典就是一个map，由多个K-V键值对组成</p><p>创建空字典</p><p>有两种方式</p><ol><li>使用大括号<code>&#123;&#125;</code>创建空字典</li><li>使用内建函数<code>dist()</code>创建字典</li></ol><p>案例演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建空字典</span><br>emptyMap1 = &#123;&#125;<br>emptyMap2 = dist()<br></code></pre></td></tr></table></figure><p>创建字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建字典</span><br><span class="hljs-built_in">map</span> = &#123;<span class="hljs-string">&#x27;名称&#x27;</span> : <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;&#x27;名称&#x27;: &#x27;湖南科技大学&#x27;, &#x27;地点&#x27;: &#x27;湖南湘潭&#x27;&#125;<br></code></pre></td></tr></table></figure><p>访问字典里面的值</p><p>将相应的键放入到方括号<code>[]</code>中即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建字典</span><br><span class="hljs-built_in">map</span> = &#123;<span class="hljs-string">&#x27;名称&#x27;</span> : <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>[<span class="hljs-string">&#x27;名称&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>[<span class="hljs-string">&#x27;地点&#x27;</span>])<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">湖南科技大学<br>湖南湘潭<br></code></pre></td></tr></table></figure><p>如果键对应的值不存在就会输出错误信息</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建字典</span><br><span class="hljs-built_in">map</span> = &#123;<span class="hljs-string">&#x27;名称&#x27;</span> : <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>[<span class="hljs-string">&#x27;简介&#x27;</span>])<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Traceback (most recent call last):<br>  File &quot;E:\PythonCode\test1.py&quot;, line 201, in &lt;module&gt;<br>    print(map[&#x27;简介&#x27;])<br>KeyError: &#x27;简介&#x27;<br></code></pre></td></tr></table></figure><p>修改字典</p><p>往字典添加新内容的方法是增加新的键值对，修改已有键值对示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;修改字典&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">map</span> = &#123;<span class="hljs-string">&#x27;名称&#x27;</span> : <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>)<br><span class="hljs-comment"># 新增键值对</span><br><span class="hljs-built_in">map</span>[<span class="hljs-string">&#x27;描述&#x27;</span>] = <span class="hljs-string">&#x27;暂无描述&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>)<br><span class="hljs-comment"># 修改键值对</span><br><span class="hljs-built_in">map</span>[<span class="hljs-string">&#x27;名称&#x27;</span>] = <span class="hljs-string">&#x27;湘潭大学&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>)<br></code></pre></td></tr></table></figure><p>结果输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&#x27;名称&#x27;</span>: <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;名称&#x27;</span>: <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>, <span class="hljs-string">&#x27;描述&#x27;</span>: <span class="hljs-string">&#x27;暂无描述&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;名称&#x27;</span>: <span class="hljs-string">&#x27;湘潭大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>, <span class="hljs-string">&#x27;描述&#x27;</span>: <span class="hljs-string">&#x27;暂无描述&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>删除字典</p><p>删除字典分为删除其中的键值对或者删除整个字典</p><p>案例演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;删除操作&quot;&quot;&quot;</span><br>d = &#123;<span class="hljs-string">&#x27;名称&#x27;</span> : <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-keyword">del</span> d[<span class="hljs-string">&#x27;地点&#x27;</span>]<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-keyword">del</span> d<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>结果输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;删除操作&quot;</span><span class="hljs-string">&quot;&quot;</span><br>d = &#123;<span class="hljs-string">&#x27;名称&#x27;</span> : <span class="hljs-string">&#x27;湖南科技大学&#x27;</span>, <span class="hljs-string">&#x27;地点&#x27;</span>: <span class="hljs-string">&#x27;湖南湘潭&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(d)<br>del d[<span class="hljs-string">&#x27;地点&#x27;</span>]<br><span class="hljs-built_in">print</span>(d)<br>del d<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>字典键值特性</p><p>字典值可以是任何的python对象，既可以是标准的对象，也可以是用户自定义的，但键不行</p><p>两个重要的点</p><ol><li>不允许同一个键出现两次，创建时如果同一个键被赋值两次，后一个值就会被记住，相当于修改键值对</li><li>键必须不可变，所以可以用数字，字符串或者元组充当，但是列表不行，因为可变</li></ol><h3 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h3><p>python集合是一个无序的不可重复的序列</p><p>可以用大括号<code>&#123;&#125;</code>或者<code>set()</code>函数创建集合，注意创建一个空集合必须使用<code>set()</code>而不是<code>&#123;&#125;</code>，因为<code>&#123;&#125;</code>用来创建空字典</p><p>案例演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建集合</span><br>set1 = <span class="hljs-built_in">set</span>()<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br>set3 = <span class="hljs-built_in">set</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;)<br><span class="hljs-built_in">print</span>(set1)<br><span class="hljs-built_in">print</span>(set2)<br><span class="hljs-built_in">print</span>(set3)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">set</span></span>()<br>&#123;1, 3, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br>&#123;1, 3, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>添加元素</p><p>使用<code>set</code>集合的<code>add()</code>函数</p><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加元素</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br><span class="hljs-built_in">set</span>.add(<span class="hljs-string">&#x27;2333&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;1, 3, &#x27;hello&#x27;&#125;<br>&#123;&#x27;2333&#x27;, 1, 3, &#x27;hello&#x27;&#125;<br></code></pre></td></tr></table></figure><p>还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s.update(x)<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加元素 update</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br><span class="hljs-built_in">set</span>.update([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">set</span>.update(&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;)<br><span class="hljs-built_in">set</span>.update(&#123;<span class="hljs-string">&#x27;姓名&#x27;</span>: <span class="hljs-string">&#x27;小明&#x27;</span>&#125;)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;1, 3, &#x27;hello&#x27;&#125;<br>&#123;1, 3, 4, 5, &#x27;hello&#x27;, 6, 7, &#x27;姓名&#x27;&#125;<br></code></pre></td></tr></table></figure><p>移除元素</p><p>使用<code>set</code>集合的<code>remove()</code>方法，元素不存在时会发生错误</p><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除元素</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>.remove(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;3, &#x27;hello&#x27;&#125;<br></code></pre></td></tr></table></figure><p>还可以使用<code>set</code>集合的<code>discard()</code>方法，元素不存在时不会发生错误</p><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除元素</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>.discard(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;3, &#x27;hello&#x27;&#125;<br></code></pre></td></tr></table></figure><p>也可以使用<code>set</code>集合的<code>pop()</code>方法随机删除一个元素</p><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除元素</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>.pop()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;&#x27;hello&#x27;, 3&#125;<br></code></pre></td></tr></table></figure><p>计算集合元素个数</p><p>使用<code>len()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算元素集合个数</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>))<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">3<br></code></pre></td></tr></table></figure><p>清空集合</p><p>使用<code>clear()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 清空集合元素</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">set</span>.clear()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">set()<br></code></pre></td></tr></table></figure><p>判断元素是否在集合中存在</p><p>使用<code>in</code>关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断元素是否在集合中</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">True<br>False<br></code></pre></td></tr></table></figure><h2 id="条件控制"><a class="markdownIt-Anchor" href="#条件控制"></a> 条件控制</h2><p>条件控制语句<code>if-elif-else</code> 格式一般如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 条件控制</span><br><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    代码块<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span><br>代码块<span class="hljs-number">2</span><br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">3</span>:<br>代码块<span class="hljs-number">3</span><br>    ……<br><span class="hljs-keyword">else</span> 条件<span class="hljs-number">4</span>:<br>    代码块<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>注意</p><ol><li><p>每个条件后面要使用<code>:</code>，表示接下来要满足条件后要执行的语句块</p></li><li><p>使用缩进来划分语句块，相同缩进数的语句组成一个语句块</p></li><li><p><code>if-elif-else</code>语句可以嵌套</p></li></ol><p>分支判断语句<code>match...case</code>格式一般如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">match</span> 变量:<br>    <span class="hljs-keyword">case</span> 值一:<br>        动作<br>    <span class="hljs-keyword">case</span> 值二:<br>        动作<br>    <span class="hljs-keyword">case</span> 值三:<br>        动作<br>    ……<br>    <span class="hljs-keyword">case</span> _:<br>        上面没有匹配时执行的动作<br></code></pre></td></tr></table></figure><h2 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h2><p><code>while</code>循环</p><p>基本格式为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 循环条件:<br>    执行语句<br></code></pre></td></tr></table></figure><p>python中没有<code>do-while</code>循环</p><p><code>while-else</code>语句格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 循环条件:<br>    表达式<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    表达式<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>当循环条件为True时则进行循环，循环条件为False时则执行else语句块</p><p><code>for</code>循环语句语句格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 容器:<br>    表达式<br></code></pre></td></tr></table></figure><p><code>for-else</code>循环语句语句格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 容器:<br>    表达式<span class="hljs-number">1</span><br> <span class="hljs-keyword">else</span> <br>表达式<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>python中也有break、continue，用法同Java，只是python中的<code>match-case</code>没有穿透问题，不需要break</p><p>pass表示空语句，不做任何事情，一般做占位使用，等待键盘中断(CTRL + C)</p><p>range函数</p><p>range函数用于快速生成一个数字序列，然后可以配合<code>for</code>循环打印出这个序列中的数字</p><p>用法如下</p><p>range(x) 表示 0~x-1的数字序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range(x) 表示 0~x-1的数字序列</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">0<br>1<br>2<br></code></pre></td></tr></table></figure><p>range(m, n)表示m~n-1的数字序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range(m, n)表示m~n-1的数字序列</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">2<br>3<br>4<br></code></pre></td></tr></table></figure><p>range(begin, end, step)</p><p>begin表示起始数字值</p><p>end-1表示结束数字值</p><p>step表示步长</p><p>这么说有一点抽象，演示一下就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range(begin, end, step)</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">20</span>, <span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">3<br>7<br>11<br>15<br>19<br></code></pre></td></tr></table></figure><h2 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h2><p>迭代是python最强大的功能之一，是访问集合元素的一种方式</p><p>迭代器对象从集合的第一个元素开始访问，知道所有的元素被访问完结束，迭代器只能往前不能后退</p><p>创建迭代器<code>iter()</code>与使用迭代器遍历<code>next()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建迭代器与使用迭代器遍历</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">set</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<br></code></pre></td></tr></table></figure><p>也可以使用<code>for</code>语句进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用for进行遍历</span><br><span class="hljs-built_in">set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">set</span>)<br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> it:<br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">1<br>2<br>3<br></code></pre></td></tr></table></figure><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode题解</title>
      <link href="/posts/40352/"/>
      <url>/posts/40352/</url>
      
        <content type="html"><![CDATA[<h2 id="455-分发饼干"><a class="markdownIt-Anchor" href="#455-分发饼干"></a> 455. 分发饼干</h2><p><a href="https://leetcode.cn/problems/assign-cookies/description/">leetcode链接</a></p><p>完成日期：2022/12/19</p><p>分类：贪心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findContentChildren</span><span class="hljs-params">(<span class="hljs-type">int</span>[] g, <span class="hljs-type">int</span>[] s)</span> &#123;<br>        Arrays.sort(g);<br>        Arrays.sort(s);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> g.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; s.length - cnt - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (g[i] &lt;= s[s.length - cnt - <span class="hljs-number">1</span>]) &#123;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="112-路径总和"><a class="markdownIt-Anchor" href="#112-路径总和"></a> 112. 路径总和</h2><p><a href="https://leetcode.cn/problems/path-sum/description/">leetcode链接</a></p><p>完成日期：2022/12/19</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        pre(root, root.val, targetSum);<br>        <span class="hljs-keyword">return</span> isExist;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (sum == targetSum) &#123;<br>                isExist = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.left, sum + root.left.val, targetSum);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.right, sum + root.right.val, targetSum);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="513-找树左下角的值"><a class="markdownIt-Anchor" href="#513-找树左下角的值"></a> 513. 找树左下角的值</h2><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/description/">leetcode链接</a></p><p>完成日期：2022/12/19</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">depth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        value = root.val;<br>        pre(root, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> currentDepth)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (currentDepth &gt; depth) &#123;<br>                depth = currentDepth;<br>                value = root.val;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.left, currentDepth + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.right, currentDepth + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="111-二叉树的最小深度"><a class="markdownIt-Anchor" href="#111-二叉树的最小深度"></a> 111. 二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/">leetcode链接</a></p><p>完成日期：2022/12/19</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">minDepth</span> <span class="hljs-operator">=</span> <span class="hljs-number">999999</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        pre(root, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> minDepth;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> depth)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (depth &lt; minDepth) &#123;<br>                minDepth = depth;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.left, depth + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.right, depth + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="104-二叉树的最大深度"><a class="markdownIt-Anchor" href="#104-二叉树的最大深度"></a> 104. 二叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">leetcode链接</a></p><p>完成日期：2022/12/19</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxDepth</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        pre(root, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> maxDepth;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> depth)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (depth &gt; maxDepth) &#123;<br>                maxDepth = depth;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.left, depth + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.right, depth + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="226-翻转二叉树"><a class="markdownIt-Anchor" href="#226-翻转二叉树"></a> 226. 翻转二叉树</h2><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">leetcode链接</a></p><p>完成日期：2022/12/20</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TreeNode</span> <span class="hljs-variable">reverseRoot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>();<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        reverse(root, reverseRoot);<br>        <span class="hljs-keyword">return</span> reverseRoot;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(TreeNode root, TreeNode newNode)</span> &#123;<br>        newNode.val = root.val;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            newNode.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>();<br>            reverse(root.left, newNode.right);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            newNode.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>();<br>            reverse(root.right, newNode.left);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="101-对称二叉树"><a class="markdownIt-Anchor" href="#101-对称二叉树"></a> 101. 对称二叉树</h2><p><a href="https://leetcode.cn/problems/symmetric-tree/description/">leetcode链接</a></p><p>完成日期：2022/12/20</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ArrayList&lt;Integer&gt; arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    ArrayList&lt;Integer&gt; arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        pre(root);<br>        reverserPre(root);<br>        <span class="hljs-keyword">return</span> arr1.equals(arr2);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            arr1.add(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        arr1.add(root.val);<br>        pre(root.left);<br>        pre(root.right);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverserPre</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            arr2.add(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        arr2.add(root.val);<br>        reverserPre(root.right);<br>        reverserPre(root.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="222-完全二叉树的节点个数"><a class="markdownIt-Anchor" href="#222-完全二叉树的节点个数"></a> 222. 完全二叉树的节点个数</h2><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/">leetcode链接</a></p><p>完成日期：2022/12/20</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        pre(root);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        count++;<br>        pre(root.left);<br>        pre(root.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="110-平衡二叉树"><a class="markdownIt-Anchor" href="#110-平衡二叉树"></a> 110. 平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/description/">leetcode链接</a></p><p>完成日期：2022/12/20</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">balanced</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        pre(root);<br>        <span class="hljs-keyword">return</span> balanced;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> getHeight(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> getHeight(root.right);<br>        <span class="hljs-keyword">return</span> left &gt; right ? left + <span class="hljs-number">1</span>: right + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">subHeight</span> <span class="hljs-operator">=</span> Math.abs(getHeight(root.left) - getHeight(root.right));<br>        <span class="hljs-keyword">if</span> (subHeight &gt; <span class="hljs-number">1</span>) &#123;<br>            balanced = <span class="hljs-literal">false</span>;<br>        &#125;<br>        pre(root.left);<br>        pre(root.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="404-左叶子之和"><a class="markdownIt-Anchor" href="#404-左叶子之和"></a> 404. 左叶子之和</h2><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/description/">leetcode链接</a></p><p>完成日期：2022/12/20</p><p>分类：二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>        pre(root, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> flag)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (flag == -<span class="hljs-number">1</span>) &#123;<br>                sum += root.val;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.left, -<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            pre(root.right, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="509-斐波那契数"><a class="markdownIt-Anchor" href="#509-斐波那契数"></a> 509. 斐波那契数</h2><p><a href="https://leetcode.cn/problems/fibonacci-number/description/">509. 斐波那契数 - 力扣（Leetcode）</a></p><p>完成日期：2022/12/22</p><p>分类：动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = dp[i - <span class="hljs-number">2</span>] + dp[i - <span class="hljs-number">1</span>];<br>        &#125;<br>       <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="70-爬楼梯"><a class="markdownIt-Anchor" href="#70-爬楼梯"></a> 70. 爬楼梯</h2><p><a href="https://leetcode.cn/problems/climbing-stairs/description/">70. 爬楼梯 - 力扣（Leetcode）</a></p><p>完成日期：2022/12/22</p><p>分类：动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> dp[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = dp[i - <span class="hljs-number">2</span>] + dp[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="746-使用最小花费爬楼梯"><a class="markdownIt-Anchor" href="#746-使用最小花费爬楼梯"></a> 746. 使用最小花费爬楼梯</h2><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746. 使用最小花费爬楼梯 - 力扣（Leetcode）</a></p><p>完成日期：2022/12/23</p><p>分类：动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minCostClimbingStairs</span><span class="hljs-params">(<span class="hljs-type">int</span>[] cost)</span> &#123;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[cost.length + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= cost.length; i++) &#123;<br>            dp[i] = Math.min(dp[i - <span class="hljs-number">1</span>] + cost[i - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">2</span>] + cost[i - <span class="hljs-number">2</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[cost.length];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="349-两个数组的交集"><a class="markdownIt-Anchor" href="#349-两个数组的交集"></a> 349 两个数组的交集</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">349. 两个数组的交集 - 力扣（Leetcode）</a></p><p>完成日期：2022/12/23</p><p>分类：哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        HashSet&lt;Integer&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        HashSet&lt;Integer&gt; set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums1) &#123;<br>            set1.add(num);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums2) &#123;<br>            set2.add(num);<br>        &#125;<br>        HashSet&lt;Integer&gt; intersectSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : set1) &#123;<br>            <span class="hljs-keyword">if</span> (set2.contains(num)) &#123;<br>                intersectSet.add(num);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> intersectSet.stream().mapToInt(i -&gt; i).toArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="202-快乐数"><a class="markdownIt-Anchor" href="#202-快乐数"></a> 202 快乐数</h2><p><a href="https://leetcode.cn/problems/happy-number/description/">202. 快乐数 - 力扣（Leetcode）</a></p><p>完成日期：2022/12/23</p><p>分类：哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    HashSet&lt;Integer&gt; hashSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">1</span>) &#123;<br>            n = compute(n);<br>            <span class="hljs-keyword">if</span> (hashSet.contains(n)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                hashSet.add(n);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            sum += Math.pow(num % <span class="hljs-number">10</span>, <span class="hljs-number">2</span>); <br>            num /= <span class="hljs-number">10</span>;<br>        &#125; <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-05-替换空格"><a class="markdownIt-Anchor" href="#剑指-offer-05-替换空格"></a> 剑指 Offer 05. 替换空格</h2><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格 - 力扣（Leetcode）</a></p><p>完成日期：2022/12/23</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">replaceSpace</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> s.replaceAll(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;%20&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="77-组合"><a class="markdownIt-Anchor" href="#77-组合"></a> 77. 组合</h2><p><a href="https://leetcode.cn/problems/combinations/">77. 组合 - 力扣（Leetcode）</a></p><p>完成日期：2022/12/23</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    LinkedList&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combine</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>        backtracking(n, k, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> beginIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (path.size() == k) &#123;<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> beginIndex; i &lt;= n; i++) &#123;<br>            path.add(i);<br>            backtracking(n, k, i + <span class="hljs-number">1</span>);<br>            path.removeLast();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-09-用两个栈实现队列"><a class="markdownIt-Anchor" href="#剑指-offer-09-用两个栈实现队列"></a> 剑指 Offer 09. 用两个栈实现队列</h2><p>题目链接：<a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/description/">剑指 Offer 09. 用两个栈实现队列 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CQueue</span> &#123;<br>    Stack&lt;Integer&gt; inStack;<br>    Stack&lt;Integer&gt; outStack;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CQueue</span><span class="hljs-params">()</span> &#123;<br>        inStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        outStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendTail</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        inStack.push(value);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (outStack.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (!inStack.isEmpty()) &#123;<br>                outStack.push(inStack.pop());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (outStack.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-30-包含min函数的栈"><a class="markdownIt-Anchor" href="#剑指-offer-30-包含min函数的栈"></a> 剑指 Offer 30. 包含min函数的栈</h2><p>题目链接：<a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/description">https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/description</a></p><p>完成日期：2023/1/4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    Stack&lt;Integer&gt; stack;<br>    Stack&lt;Integer&gt; minStack; <br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        minStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        minStack.push(Integer.MAX_VALUE);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        stack.push(x);<br>        minStack.push(Math.min(x, minStack.peek()));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        stack.pop();<br>        minStack.pop();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stack.peek();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> minStack.peek();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MinStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MinStack obj = new MinStack();</span><br><span class="hljs-comment"> * obj.push(x);</span><br><span class="hljs-comment"> * obj.pop();</span><br><span class="hljs-comment"> * int param_3 = obj.top();</span><br><span class="hljs-comment"> * int param_4 = obj.min();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="2-两数相加"><a class="markdownIt-Anchor" href="#2-两数相加"></a> 2. 两数相加</h2><p>题目链接：<a href="https://leetcode.cn/problems/add-two-numbers/description">https://leetcode.cn/problems/add-two-numbers/description</a></p><p>完成时间：2023/1/4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> l1.val + l2.val + flag;<br>            flag = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">9</span>) &#123;<br>                result -= <span class="hljs-number">10</span>;<br>                flag = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(result);<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>                head = node;<br>                tail = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail.next = node;<br>                tail = tail.next;<br>            &#125;<br>            l1 = l1.next;<br>            l2 = l2.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span> &amp;&amp; l2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(flag);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (l2 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> l2.val + flag;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">9</span>) &#123;<br>                    result -= <span class="hljs-number">10</span>;<br>                    flag = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(result);    <br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(result);<br>                tail = tail.next;            <br>                l2 = l2.next;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> l1.val + flag;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">9</span>) &#123;<br>                    result -= <span class="hljs-number">10</span>;<br>                    flag = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(result);    <br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(result);<br>                tail = tail.next;            <br>                l1 = l1.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123;<br>            tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="118-杨辉三角"><a class="markdownIt-Anchor" href="#118-杨辉三角"></a> 118. 杨辉三角</h2><p>题目链接：<a href="https://leetcode.cn/problems/pascals-triangle/description">https://leetcode.cn/problems/pascals-triangle/description</a></p><p>完成时间：2022/1/4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">generate</span><span class="hljs-params">(<span class="hljs-type">int</span> numRows)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= numRows; i++) &#123;<br>            List&lt;Integer&gt; row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || j == i - <span class="hljs-number">1</span>) &#123;<br>                    row.add(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    row.add(ans.get(i - <span class="hljs-number">2</span>).get(j - <span class="hljs-number">1</span>) + ans.get(i - <span class="hljs-number">2</span>).get(j));<br>                &#125;<br>            &#125;<br>            ans.add(row);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="69-x-的平方根"><a class="markdownIt-Anchor" href="#69-x-的平方根"></a> 69. x 的平方根</h2><p>题目链接：<a href="https://leetcode.cn/problems/sqrtx/description">https://leetcode.cn/problems/sqrtx/description</a></p><p>完成时间：2023/1/4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">long</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i * i &lt;= (<span class="hljs-type">long</span>)x; i++) &#123;&#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(i - <span class="hljs-number">1</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-06-从尾到头打印链表"><a class="markdownIt-Anchor" href="#剑指-offer-06-从尾到头打印链表"></a> 剑指 Offer 06. 从尾到头打印链表</h2><p>题目链接：<a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/description">https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/description</a></p><p>完成时间：2023/1/5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] reversePrint(ListNode head) &#123;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(head.val);<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[stack.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            result[pos++] = stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-24-反转链表"><a class="markdownIt-Anchor" href="#剑指-offer-24-反转链表"></a> 剑指 Offer 24. 反转链表</h2><p>题目链接：<a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/description">https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/description</a></p><p>完成日期：2023/1/5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(head.val);<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>                newHead = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node.next = newHead;<br>                newHead = node; <br>            &#125;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-35-复杂链表的复制"><a class="markdownIt-Anchor" href="#剑指-offer-35-复杂链表的复制"></a> 剑指 Offer 35. 复杂链表的复制</h2><p>题目链接：<a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/</a></p><p>完成日期：2023/1/5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment">class Node &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    Node next;</span><br><span class="hljs-comment">    Node random;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Node(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment">        this.next = null;</span><br><span class="hljs-comment">        this.random = null;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        HashMap&lt;Node, Node&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        HashMap&lt;Node, Node&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(p.val);<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">randomNode</span> <span class="hljs-operator">=</span> p.random;<br>            map1.put(node, randomNode);<br>            <span class="hljs-keyword">if</span> (newHead == <span class="hljs-literal">null</span>) &#123;<br>                newHead = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail.next = node;<br>            &#125;<br>            map2.put(p, node);<br>            tail = node;<br>            p = p.next;<br>        &#125;<br>        p = head;<br>        tail = newHead;<br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span> &amp;&amp; tail != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">randomNode</span> <span class="hljs-operator">=</span> p.random;<br>            tail.random = map2.get(map1.get(tail));<br>            tail = tail.next;<br>            p = p.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="141-环形链表"><a class="markdownIt-Anchor" href="#141-环形链表"></a> 141. 环形链表</h2><p>题目链接：<a href="https://leetcode.cn/problems/linked-list-cycle/description">https://leetcode.cn/problems/linked-list-cycle/description</a></p><p>完成日期：2023/1/5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        HashSet&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (set.contains(head)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            set.add(head);<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-05-替换空格-2"><a class="markdownIt-Anchor" href="#剑指-offer-05-替换空格-2"></a> 剑指 Offer 05. 替换空格</h2><p>题目链接：<a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description">https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description</a></p><p>完成时间：2023/1/6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">replaceSpace</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(s);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                str.replace(i, i + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;%20&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-58-ii-左旋转字符串"><a class="markdownIt-Anchor" href="#剑指-offer-58-ii-左旋转字符串"></a> 剑指 Offer 58 - II. 左旋转字符串</h2><p>题目链接：<a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description">https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description</a></p><p>完成时间：2023/1/6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseLeftWords</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(s);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">subStr</span> <span class="hljs-operator">=</span> s.substring(<span class="hljs-number">0</span>, n);<br>        str.delete(<span class="hljs-number">0</span>, n);<br>        str.append(subStr);<br>        <span class="hljs-keyword">return</span> str.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="62-不同路径"><a class="markdownIt-Anchor" href="#62-不同路径"></a> 62. 不同路径</h2><p>题目链接：<a href="https://leetcode.cn/problems/unique-paths">https://leetcode.cn/problems/unique-paths</a></p><p>完成日期：2023/1/6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="63-不同路径ii"><a class="markdownIt-Anchor" href="#63-不同路径ii"></a> 63. 不同路径II</h2><p>题目链接：<a href="https://leetcode.cn/problems/unique-paths-ii">https://leetcode.cn/problems/unique-paths-ii</a></p><p>完成日期：2023/1/6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePathsWithObstacles</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] obstacleGrid)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> obstacleGrid.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> obstacleGrid[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>; i++) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class="hljs-number">0</span>][j] == <span class="hljs-number">0</span>; j++) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;            <br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (obstacleGrid[i][j] != <span class="hljs-number">1</span>) &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="96-不同的二叉搜索树"><a class="markdownIt-Anchor" href="#96-不同的二叉搜索树"></a> 96. 不同的二叉搜索树</h2><p>题目链接：<a href="https://leetcode.cn/problems/unique-binary-search-trees">https://leetcode.cn/problems/unique-binary-search-trees</a></p><p>完成日期：2023/1/6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numTrees</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                dp[i] += dp[j - <span class="hljs-number">1</span>] * dp[i - j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-03-数组中重复的数字"><a class="markdownIt-Anchor" href="#剑指-offer-03-数组中重复的数字"></a> 剑指 Offer 03. 数组中重复的数字</h2><p>题目链接：<a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/description">https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/description</a></p><p>完成日期：2023/1/7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (set.contains(num)) &#123;<br>                <span class="hljs-keyword">return</span> num;<br>            &#125;<br>            set.add(num);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-53-i-在排序数组中查找数字-i"><a class="markdownIt-Anchor" href="#剑指-offer-53-i-在排序数组中查找数字-i"></a> 剑指 Offer 53 - I. 在排序数组中查找数字 I</h2><p>题目链接：<a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description">https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description</a></p><p>完成日期：2023/1/7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (num == target) &#123;<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-53-ii-0~n-1中缺失的数字"><a class="markdownIt-Anchor" href="#剑指-offer-53-ii-0~n-1中缺失的数字"></a> 剑指 Offer 53 - II. 0～n-1中缺失的数字</h2><p>题目链接：<a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/description">https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/description</a></p><p>完成日期：2023/1/7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">missingNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (num != count++) &#123;<br>                <span class="hljs-keyword">return</span> count - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="98-验证二叉搜索树"><a class="markdownIt-Anchor" href="#98-验证二叉搜索树"></a> 98. 验证二叉搜索树</h2><p>题目链接：<a href="https://leetcode.cn/problems/validate-binary-search-tree/description/">98. 验证二叉搜索树 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;Integer&gt; order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            in(root);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> order.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; order.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (pre &gt;= order.get(i)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                pre = order.get(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        in(root.left);<br>        order.add(root.val);<br>        in(root.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="103-二叉树的锯齿形层序遍历"><a class="markdownIt-Anchor" href="#103-二叉树的锯齿形层序遍历"></a> 103. 二叉树的锯齿形层序遍历</h2><p>题目链接：<a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/description/">103. 二叉树的锯齿形层序遍历 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">zigzagLevelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            queue.offer(root);<br>            current = <span class="hljs-number">1</span>;<br>        &#125;<br>        ArrayList&lt;Integer&gt; order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> queue.remove();<br>            order.add(head.val);<br>            current--;<br>            <span class="hljs-keyword">if</span> (head.left != <span class="hljs-literal">null</span>) &#123;<br>                queue.add(head.left);<br>                next++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (head.right != <span class="hljs-literal">null</span>) &#123;<br>                queue.add(head.right);<br>                next++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (current == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    Collections.reverse(order);<br>                &#125;<br>                flag = !flag;<br>                result.add(order);<br>                order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                current = next;<br>                next = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="107-二叉树的层序遍历-ii"><a class="markdownIt-Anchor" href="#107-二叉树的层序遍历-ii"></a> 107. 二叉树的层序遍历 II</h2><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/description/">107. 二叉树的层序遍历 II - 力扣（Leetcode）</a></p><p>完成日期：2023/1/7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrderBottom</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            queue.offer(root);<br>            current = <span class="hljs-number">1</span>;<br>        &#125;<br>        List&lt;Integer&gt; order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> queue.poll();<br>            order.add(head.val);<br>            current--;<br>            <span class="hljs-keyword">if</span> (head.left != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.left);<br>                next++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (head.right != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.right);<br>                next++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (current == <span class="hljs-number">0</span>) &#123;<br>                result.add(order);<br>                order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                current = next;<br>                next = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        Collections.reverse(result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-04-二维数组中的查找"><a class="markdownIt-Anchor" href="#剑指-offer-04-二维数组中的查找"></a> 剑指 Offer 04. 二维数组中的查找</h2><p><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/description">题目链接</a></p><p>完成日期：2023/1/8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-keyword">if</span> (matrix.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br>        <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> matrix.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] == target) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] &lt; target) &#123;<br>                begin = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> begin; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; matrix[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (target == matrix[i][j]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-11-旋转数组的最小数字"><a class="markdownIt-Anchor" href="#剑指-offer-11-旋转数组的最小数字"></a> 剑指 Offer 11. 旋转数组的最小数字</h2><p><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/description">题目链接</a></p><p>完成日期：2023/1/8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] numbers)</span> &#123;<br>        Arrays.sort(numbers);<br>        <span class="hljs-keyword">return</span> numbers[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-50-第一个只出现一次的字符"><a class="markdownIt-Anchor" href="#剑指-offer-50-第一个只出现一次的字符"></a> 剑指 Offer 50. 第一个只出现一次的字符</h2><p><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/">题目链接</a></p><p>完成日期：2023/1/8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">firstUniqChar</span><span class="hljs-params">(String s)</span> &#123;<br>        Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>            <span class="hljs-keyword">if</span> (!map.containsKey(c)) &#123;<br>                map.put(c, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.put(c, map.get(c) + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        Set&lt;Character&gt; set = map.keySet();<br>        <span class="hljs-keyword">for</span> (Character c : set) &#123;<br>            <span class="hljs-keyword">if</span> (map.get(c) == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> c;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="55-跳跃游戏"><a class="markdownIt-Anchor" href="#55-跳跃游戏"></a> 55. 跳跃游戏</h2><p><a href="https://leetcode.cn/problems/jump-game/description">题目链接</a></p><p>完成日期：2023/1/8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bound</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (bound == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cover</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= cover; i++) &#123;<br>            cover = Math.max(cover, nums[i] + i);<br>            <span class="hljs-keyword">if</span> (cover &gt;= bound) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="215-数组中的第k个最大元素"><a class="markdownIt-Anchor" href="#215-数组中的第k个最大元素"></a> 215. 数组中的第K个最大元素</h2><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/description">题目链接</a></p><p>完成日期：2023/1/8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>        Integer[] newNums = Arrays.stream(nums).boxed().toArray(Integer[]::<span class="hljs-keyword">new</span>);<br>        List&lt;Integer&gt; list= Arrays.asList(newNums);<br>        list.sort((o1, o2) -&gt; o2 - o1);<br>        <span class="hljs-keyword">return</span> list.get(k - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-32-i-从上到下打印二叉树"><a class="markdownIt-Anchor" href="#剑指-offer-32-i-从上到下打印二叉树"></a> 剑指 Offer 32 - I. 从上到下打印二叉树</h2><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/9</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(); <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] levelOrder(TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            queue.offer(root);<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> queue.poll();<br>            list.add(head.val);<br>            <span class="hljs-keyword">if</span> (head.left != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.left);   <br>            &#125; <br>            <span class="hljs-keyword">if</span> (head.right != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.right);<br>            &#125;<br>        &#125;<br>        Integer[] array = list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[list.size()]);<br>        <span class="hljs-keyword">return</span> Arrays.stream(array).mapToInt(Integer::valueOf).toArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-32-ii-从上到下打印二叉树-ii"><a class="markdownIt-Anchor" href="#剑指-offer-32-ii-从上到下打印二叉树-ii"></a> 剑指 Offer 32 - II. 从上到下打印二叉树 II</h2><p>题目链接：<a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/description">https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/description</a></p><p>完成日期：2023/1/9</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(); <br>    <span class="hljs-keyword">private</span> List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            queue.offer(root);<br>            current = <span class="hljs-number">1</span>;<br>        &#125;<br>        List&lt;Integer&gt; level = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> queue.poll();<br>            level.add(head.val);<br>            current--;<br>            <span class="hljs-keyword">if</span> (head.left != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.left);<br>                next++;   <br>            &#125; <br>            <span class="hljs-keyword">if</span> (head.right != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.right);<br>                next++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (current == <span class="hljs-number">0</span>) &#123;<br>                ans.add(level);<br>                level = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                current = next;<br>                next = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-32-iii-从上到下打印二叉树-iii"><a class="markdownIt-Anchor" href="#剑指-offer-32-iii-从上到下打印二叉树-iii"></a> 剑指 Offer 32 - III. 从上到下打印二叉树 III</h2><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/submissions">题目链接</a></p><p>完成日期：2023/1/8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(); <br>    <span class="hljs-keyword">private</span> List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            queue.offer(root);<br>            current = <span class="hljs-number">1</span>;<br>        &#125;<br>        List&lt;Integer&gt; level = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> queue.poll();<br>            level.add(head.val);<br>            current--;<br>            <span class="hljs-keyword">if</span> (head.left != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.left);<br>                next++;   <br>            &#125; <br>            <span class="hljs-keyword">if</span> (head.right != <span class="hljs-literal">null</span>) &#123;<br>                queue.offer(head.right);<br>                next++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (current == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    Collections.reverse(level);<br>                &#125;<br>                ans.add(level);<br>                level = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                current = next;<br>                next = <span class="hljs-number">0</span>;<br>                flag = !flag;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="216-组合总和-iii"><a class="markdownIt-Anchor" href="#216-组合总和-iii"></a> 216. 组合总和 III</h2><p>[题目链接](<a href="https://leetcode.cn/problems/combination-sum-iii/description/">216. 组合总和 III - 力扣（Leetcode）</a>)</p><p>完成日期：2023/1/9</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    LinkedList&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combinationSum3</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> n)</span> &#123;<br>        backtracking(<span class="hljs-number">1</span>, k, n);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (path.size() &gt; k || num &gt; n) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (path.size() == k &amp;&amp; num == n) &#123;<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(path));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            path.add(i);<br>            num += i;<br>            backtracking(i + <span class="hljs-number">1</span>, k, n);<br>            path.removeLast();<br>            num -= i;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-26-树的子结构"><a class="markdownIt-Anchor" href="#剑指-offer-26-树的子结构"></a> 剑指 Offer 26. 树的子结构</h2><p><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/description">题目链接</a></p><p>完成日期：2023/1/10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubStructure</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> &#123;<br>        <span class="hljs-keyword">if</span> (A == <span class="hljs-literal">null</span> || B == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (isSame(A, B)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (isSubStructure(A.left, B)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (isSubStructure(A.right, B)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;   <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSame</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> &#123;<br>        <span class="hljs-keyword">if</span> (B == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (A == <span class="hljs-literal">null</span> || A.val != B.val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> isSame(A.left, B.left) &amp;&amp; isSame(A.right, B.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-27-二叉树的镜像"><a class="markdownIt-Anchor" href="#剑指-offer-27-二叉树的镜像"></a> 剑指 Offer 27. 二叉树的镜像</h2><p><a href="https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/description">题目链接</a></p><p>完成日期：2023/1/10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">mRoot</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">mirrorTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        mRoot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>();<br>        pre(root, mRoot);<br>        <span class="hljs-keyword">return</span> mRoot;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root, TreeNode mRoot)</span> &#123;<br>        mRoot.val = root.val;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            mRoot.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(root.left.val);<br>            pre(root.left, mRoot.right);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            mRoot.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(root.right.val);<br>            pre(root.right, mRoot.left);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-28-对称的二叉树"><a class="markdownIt-Anchor" href="#剑指-offer-28-对称的二叉树"></a> 剑指 Offer 28. 对称的二叉树</h2><p><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        pre(root);<br>        symmetricPre(root);<br>        <span class="hljs-keyword">return</span> list1.equals(list2);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            list1.add(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        list1.add(root.val);<br>        pre(root.left);<br>        pre(root.right);<br>    &#125;   <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">symmetricPre</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            list2.add(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        list2.add(root.val);<br>        symmetricPre(root.right);<br>        symmetricPre(root.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-10-i-斐波那契数列"><a class="markdownIt-Anchor" href="#剑指-offer-10-i-斐波那契数列"></a> 剑指 Offer 10- I. 斐波那契数列</h2><p><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/description">题目链接</a></p><p>完成日期：2023/1/11</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = (dp[i - <span class="hljs-number">1</span>] % <span class="hljs-number">1000000007</span> + dp[i - <span class="hljs-number">2</span>] % <span class="hljs-number">1000000007</span>) % <span class="hljs-number">1000000007</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-10-ii-青蛙跳台阶问题"><a class="markdownIt-Anchor" href="#剑指-offer-10-ii-青蛙跳台阶问题"></a> 剑指 Offer 10- II. 青蛙跳台阶问题</h2><p><a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/description/">剑指 Offer 10- II. 青蛙跳台阶问题</a></p><p>完成日期：2023/1/11</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numWays</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = (dp[i - <span class="hljs-number">1</span>] % <span class="hljs-number">1000000007</span> + dp[i - <span class="hljs-number">2</span>] % <span class="hljs-number">1000000007</span>) % <span class="hljs-number">1000000007</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-63-股票的最大利润"><a class="markdownIt-Anchor" href="#剑指-offer-63-股票的最大利润"></a> 剑指 Offer 63. 股票的最大利润</h2><p><a href="https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/description">题目链接</a></p><p>完成日期：2023/1/11</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] prices)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> prices.length;<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (min &gt; prices[i]) &#123;<br>                min = prices[i];<br>            &#125;<br>            dp[i] = Math.max(dp[i - <span class="hljs-number">1</span>], prices[i] - min);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[len - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-42-连续子数组的最大和"><a class="markdownIt-Anchor" href="#剑指-offer-42-连续子数组的最大和"></a> 剑指 Offer 42. 连续子数组的最大和</h2><p><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/description">题目链接</a></p><p>完成日期：2023/1/13</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>       dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>       <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; dp.length; i++) &#123;<br>           dp[i] = Math.max(dp[i - <span class="hljs-number">1</span>] + nums[i], nums[i]);<br>            <span class="hljs-keyword">if</span> (result &lt; dp[i]) &#123;<br>               result = dp[i];<br>           &#125;<br>       &#125; <br>       <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-47-礼物的最大价值"><a class="markdownIt-Anchor" href="#剑指-offer-47-礼物的最大价值"></a> 剑指 Offer 47. 礼物的最大价值</h2><p><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/description">题目链接</a></p><p>完成日期：2023/1/12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxValue</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> grid.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> grid[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>                    dp[i][j] = grid[i][j];<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                    dp[i][j] = dp[i][j - <span class="hljs-number">1</span>] + grid[i][j];<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + grid[i][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]) + grid[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="78-子集"><a class="markdownIt-Anchor" href="#78-子集"></a> 78. 子集</h2><p><a href="https://leetcode.cn/problems/subsets/description/">78. 子集 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    LinkedList&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">subsets</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;());<br>        backtracking(<span class="hljs-number">0</span>, nums);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (startIndex == nums.length) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt; nums.length; i++) &#123;<br>            path.add(nums[i]);<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>(path));<br>            backtracking(i + <span class="hljs-number">1</span>, nums);<br>            path.removeLast();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="150-逆波兰表达式求值"><a class="markdownIt-Anchor" href="#150-逆波兰表达式求值"></a> 150. 逆波兰表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">150. 逆波兰表达式求值 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Stack&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evalRPN</span><span class="hljs-params">(String[] tokens)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String token : tokens) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;+&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> nums.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> nums.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 + num2;<br>                nums.push(result);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;-&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> nums.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> nums.pop();                <br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num2 - num1;<br>                nums.push(result);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;*&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> nums.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> nums.pop();                <br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 * num2;<br>                nums.push(result);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> nums.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> nums.pop();                <br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num2 / num1;<br>                nums.push(result);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                nums.push(Integer.valueOf(token));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="225-用队列实现栈"><a class="markdownIt-Anchor" href="#225-用队列实现栈"></a> 225. 用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">225. 用队列实现栈 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br>    LinkedList&lt;Integer&gt; queue1;<br>    LinkedList&lt;Integer&gt; queue2;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyStack</span><span class="hljs-params">()</span> &#123;<br>        queue1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(); <br>        queue2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(); <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        queue1.offer(x);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (queue1.size() &gt; <span class="hljs-number">1</span>) &#123;<br>            queue2.offer(queue1.poll());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> queue1.poll();<br>        <span class="hljs-keyword">while</span> (!queue2.isEmpty()) &#123;<br>            queue1.offer(queue2.poll());<br>        &#125;<br>        <span class="hljs-keyword">return</span> top;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> pop();<br>        queue1.offer(top);<br>        <span class="hljs-keyword">return</span> top;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.isEmpty();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MyStack obj = new MyStack();</span><br><span class="hljs-comment"> * obj.push(x);</span><br><span class="hljs-comment"> * int param_2 = obj.pop();</span><br><span class="hljs-comment"> * int param_3 = obj.top();</span><br><span class="hljs-comment"> * boolean param_4 = obj.empty();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="剑指-offer-46-把数字翻译成字符串"><a class="markdownIt-Anchor" href="#剑指-offer-46-把数字翻译成字符串"></a> 剑指 Offer 46. 把数字翻译成字符串</h2><h2 id="剑指-offer-48-最长不含重复字符的子字符串"><a class="markdownIt-Anchor" href="#剑指-offer-48-最长不含重复字符的子字符串"></a> 剑指 Offer 48. 最长不含重复字符的子字符串</h2><h2 id="剑指-offer-18-删除链表的节点"><a class="markdownIt-Anchor" href="#剑指-offer-18-删除链表的节点"></a> 剑指 Offer 18. 删除链表的节点</h2><p><a href="https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/description">题目链接</a></p><p>完成日期：2023/1/14</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span> &amp;&amp; head.val == val) &#123;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;        <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span> (p2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (p2.val == val) &#123;<br>                p1.next = p2.next;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            p1 = p1.next;<br>            p2 = p2.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-22-链表中倒数第k个节点"><a class="markdownIt-Anchor" href="#剑指-offer-22-链表中倒数第k个节点"></a> 剑指 Offer 22. 链表中倒数第k个节点</h2><p><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/description">题目链接</a></p><p>完成日期：2023/1/14</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getKthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>        Map&lt;Integer, ListNode&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            map.put(++count, head);<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.get(count - k + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-25-合并两个排序的链表"><a class="markdownIt-Anchor" href="#剑指-offer-25-合并两个排序的链表"></a> 剑指 Offer 25. 合并两个排序的链表</h2><p><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/description">题目链接</a></p><p>完成日期：2023/1/15</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span> &amp;&amp; l2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;  <br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span>  <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>) &#123;<br>            ListNode p;<br>            <span class="hljs-keyword">if</span> (l1.val &lt; l2.val) &#123;<br>                p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(l1.val);<br>                l1 = l1.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(l2.val);<br>                l2 = l2.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>                head = p;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail.next = p;<br>            &#125;<br>            tail = p;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (l2 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(l2.val);<br>                l2 = l2.next;  <br>                tail.next = p;<br>                tail = tail.next;              <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(l1.val);<br>                l1 = l1.next;<br>                tail.next = p;<br>                tail = tail.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-52-两个链表的第一个公共节点"><a class="markdownIt-Anchor" href="#剑指-offer-52-两个链表的第一个公共节点"></a> 剑指 Offer 52. 两个链表的第一个公共节点</h2><p><a href="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/description">题目链接</a></p><p>完成日期：2023/1/16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        HashSet&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (headA != <span class="hljs-literal">null</span>) &#123;<br>            set.add(headA);<br>            headA = headA.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (headB != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (set.contains(headB)) &#123;<br>                <span class="hljs-keyword">return</span> headB;<br>            &#125;<br>            headB = headB.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-21-调整数组顺序使奇数位于偶数前面"><a class="markdownIt-Anchor" href="#剑指-offer-21-调整数组顺序使奇数位于偶数前面"></a> 剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</h2><p><a href="https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/description">题目链接</a></p><p>完成日期：2023/1/16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] exchange(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span>[] newNums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                newNums[count++] = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                newNums[count++] = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newNums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-57-和为s的两个数字"><a class="markdownIt-Anchor" href="#剑指-offer-57-和为s的两个数字"></a> 剑指 Offer 57. 和为s的两个数字</h2><p><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/description">题目链接</a></p><p>完成日期：2023/1/16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (nums[i] + nums[j] != target) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] &lt; target) &#123;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[j] &gt; target) &#123;<br>                j--;<br>            &#125;<br>        &#125;   <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;nums[i], nums[j]&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-58-i-翻转单词顺序"><a class="markdownIt-Anchor" href="#剑指-offer-58-i-翻转单词顺序"></a> 剑指 Offer 58 - I. 翻转单词顺序</h2><p>[题目链接](剑指 Offer 58 - I. 翻转单词顺序)</p><p>完成日期：2023/1/16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>        String[] strs = s.trim().split(<span class="hljs-string">&quot; &quot;</span>);<br>        Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String str : strs) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(str.trim())) &#123;<br>                stack.push(str.trim());<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">if</span> (cnt != <span class="hljs-number">0</span>) &#123;<br>                result.append(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            result.append(stack.pop());<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-12-矩阵中的路径"><a class="markdownIt-Anchor" href="#剑指-offer-12-矩阵中的路径"></a> 剑指 Offer 12. 矩阵中的路径</h2><h2 id="面试题13-机器人的运动范围"><a class="markdownIt-Anchor" href="#面试题13-机器人的运动范围"></a> 面试题13. 机器人的运动范围</h2><p><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/description">题目链接</a></p><p>完成日期：2023/1/17</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;       <br>    <span class="hljs-type">int</span>[][] direction =&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">boolean</span>[][] isVisited = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">movingCount</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>        isVisited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[m][n];<br>        backtracking(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, m, n, k);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isVisited[x][y]) &#123;<br>            count++;<br>        &#125;<br>        isVisited[x][y] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (isVaild(x + direction[i][<span class="hljs-number">0</span>], y + direction[i][<span class="hljs-number">1</span>], m, n, k)<br>             &amp;&amp; !isVisited[x + direction[i][<span class="hljs-number">0</span>]][y + direction[i][<span class="hljs-number">1</span>]]) &#123;<br>                backtracking(x + direction[i][<span class="hljs-number">0</span>], y + direction[i][<span class="hljs-number">1</span>], m, n, k);<br>            &#125;<br>        &#125;<br>    &#125;        <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isVaild</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!(x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; m)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!(y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; n)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (compute(x, y) &gt; k) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            sum += x % <span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125; <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">do</span> &#123;<br>            sum += y % <span class="hljs-number">10</span>;<br>            y /= <span class="hljs-number">10</span>;<br>        &#125; <span class="hljs-keyword">while</span>(y &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="15-三数之和"><a class="markdownIt-Anchor" href="#15-三数之和"></a> 15. 三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/description/">15. 三数之和 - 力扣（Leetcode）</a></p><p>完成日期: 2023/1/17</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; nums.length; x++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span> &amp;&amp; nums[x] == nums[x - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[x] + nums[i] + nums[j] == <span class="hljs-number">0</span>) &#123;<br>                    ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                    list.add(nums[x]);<br>                    list.add(nums[i]);<br>                    list.add(nums[j]);<br>                    result.add(list);<br>                    <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[j - <span class="hljs-number">1</span>] == nums[j]) &#123;<br>                        j--;<br>                    &#125;<br>                    <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[i + <span class="hljs-number">1</span>] == nums[i]) &#123;<br>                        i++;<br>                    &#125;<br>                    j--;<br>                    i++;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[x] + nums[i] + nums[j] &gt; <span class="hljs-number">0</span>) &#123;<br>                    j--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[x] + nums[i] + nums[j] &lt; <span class="hljs-number">0</span>) &#123;<br>                    i++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="28-找出字符串中第一个匹配项的下标"><a class="markdownIt-Anchor" href="#28-找出字符串中第一个匹配项的下标"></a> 28. 找出字符串中第一个匹配项的下标</h2><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28. 找出字符串中第一个匹配项的下标 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/17</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>        <span class="hljs-keyword">return</span> haystack.indexOf(needle);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-54-二叉搜索树的第k大节点"><a class="markdownIt-Anchor" href="#剑指-offer-54-二叉搜索树的第k大节点"></a> 剑指 Offer 54. 二叉搜索树的第k大节点</h2><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/description">题目链接</a></p><p>完成日期：2023/1/18</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kthLargest</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>        in(root);<br>        <span class="hljs-keyword">return</span> list.get(k - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        in(root.right);<br>        list.add(root.val);<br>        in(root.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-36-二叉搜索树与双向链表"><a class="markdownIt-Anchor" href="#剑指-offer-36-二叉搜索树与双向链表"></a> 剑指 Offer 36. 二叉搜索树与双向链表</h2><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/description">题目链接</a></p><p>完成日期：2023/1/18</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment">class Node &#123;</span><br><span class="hljs-comment">    public int val;</span><br><span class="hljs-comment">    public Node left;</span><br><span class="hljs-comment">    public Node right;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Node() &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Node(int _val) &#123;</span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Node(int _val,Node _left,Node _right) &#123;</span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment">        left = _left;</span><br><span class="hljs-comment">        right = _right;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Node head;<br>    Node tail;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">treeToDoublyList</span><span class="hljs-params">(Node root)</span> &#123;<br>        in(root);<br>        <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            tail.right = head;<br>            head.left = tail;<br>        &#125; <br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">(Node root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        in(root.left);<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            head = root;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root.left = tail;<br>            tail.right = root;<br>        &#125;<br>        tail = root;<br>        in(root.right);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-34-二叉树中和为某一值的路径"><a class="markdownIt-Anchor" href="#剑指-offer-34-二叉树中和为某一值的路径"></a> 剑指 Offer 34. 二叉树中和为某一值的路径</h2><p><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/description">题目链接</a></p><p>完成日期：2023/1/18</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    LinkedList&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root !=  <span class="hljs-literal">null</span>) &#123;<br>            backtracking(root, target);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> target)</span> &#123;<br>        path.add(root.val);<br>        sum += root.val;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(path));<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            backtracking(root.left, target);<br>            path.removeLast();<br>            sum -= root.left.val;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            backtracking(root.right, target);<br>            path.removeLast();<br>            sum -= root.right.val;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="376-摆动序列"><a class="markdownIt-Anchor" href="#376-摆动序列"></a> 376. 摆动序列</h2><h2 id="面试题45-把数组排成最小的数"><a class="markdownIt-Anchor" href="#面试题45-把数组排成最小的数"></a> 面试题45. 把数组排成最小的数</h2><p><a href="https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">minNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Long[] longs = Arrays.stream(nums)<br>                .mapToLong(integer -&gt; Long.parseLong(String.valueOf(integer)))<br>                .boxed()<br>                .toArray(Long[]::<span class="hljs-keyword">new</span>);<br>        Arrays.sort(longs, (o1, o2) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> o1.toString() + o2.toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> o2.toString() + o1.toString();<br>            <span class="hljs-keyword">return</span> Math.toIntExact(Long.parseLong(s1) - Long.parseLong(s2));<br>        &#125;);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        Arrays.stream(longs).forEach(stringBuilder::append);<br>        <span class="hljs-keyword">return</span> stringBuilder.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面试题61-扑克牌中的顺子"><a class="markdownIt-Anchor" href="#面试题61-扑克牌中的顺子"></a> 面试题61. 扑克牌中的顺子</h2><p><a href="https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof/description">面试题61. 扑克牌中的顺子</a></p><p>完成日期：2023/1/19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isStraight</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">0</span>) &#123;<br>                cnt++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] == nums[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">4</span>] - nums[cnt] &lt; <span class="hljs-number">5</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="701-二叉搜索树中的插入操作"><a class="markdownIt-Anchor" href="#701-二叉搜索树中的插入操作"></a> 701. 二叉搜索树中的插入操作</h2><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/description/">701. 二叉搜索树中的插入操作 - 力扣（Leetcode）</a></p><p>完成日期：2023/1/19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">insertIntoBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(val);<br>        &#125;<br>        insert(root, val);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (val &lt; root.val) &#123;<br>            <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span>) &#123;<br>                root.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(val);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            insert(root.left, val);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (val &gt; root.val) &#123;<br>            <span class="hljs-keyword">if</span> (root.right == <span class="hljs-literal">null</span>) &#123;<br>                root.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(val);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            insert(root.right, val);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-40-最小的k个数"><a class="markdownIt-Anchor" href="#剑指-offer-40-最小的k个数"></a> 剑指 Offer 40. 最小的k个数</h2><p><a href="https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/20</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getLeastNumbers(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-keyword">return</span> Arrays.stream(arr).sorted().limit(k).toArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-55-i-二叉树的深度"><a class="markdownIt-Anchor" href="#剑指-offer-55-i-二叉树的深度"></a> 剑指 Offer 55 - I. 二叉树的深度</h2><p><a href="https://leetcode.cn/problems/er-cha-shu-de-shen-du-lcof/description">题目链接</a></p><p>完成日期：2023/1/21</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <br>        <span class="hljs-keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-55-ii-平衡二叉树"><a class="markdownIt-Anchor" href="#剑指-offer-55-ii-平衡二叉树"></a> 剑指 Offer 55 - II. 平衡二叉树</h2><p><a href="https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/21</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Math.abs(getHeight(root.left) - getHeight(root.right)) &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;  <br>        <span class="hljs-keyword">return</span> Math.max(getHeight(root.left), getHeight(root.right)) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-64-求12n"><a class="markdownIt-Anchor" href="#剑指-offer-64-求12n"></a> 剑指 Offer 64. 求1+2+…+n</h2><p><a href="https://leetcode.cn/problems/qiu-12n-lcof/">题目链接</a></p><p>完成日期：2023/1/22</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumNums</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">return</span> IntStream.range(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>).sum();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-68-i-二叉搜索树的最近公共祖先"><a class="markdownIt-Anchor" href="#剑指-offer-68-i-二叉搜索树的最近公共祖先"></a> 剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/description">题目链接</a></p><p>完成日期：2023/1/22</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;TreeNode&gt; listP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;TreeNode&gt; listQ = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>        search(root, p, listP);<br>        search(root, q, listQ);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">ancestor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> Math.min(listP.size(), listQ.size());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (listP.get(i) == listQ.get(i)) &#123;<br>                ancestor = listP.get(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ancestor;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(TreeNode root, TreeNode target, List&lt;TreeNode&gt; list)</span> &#123;<br>        list.add(root);<br>        <span class="hljs-keyword">if</span> (root == target) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (target.val &lt; root.val) &#123;<br>            search(root.left, target, list);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (target.val &gt; root.val) &#123;<br>            search(root.right, target, list);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="剑指-offer-16-数值的整数次方"><a class="markdownIt-Anchor" href="#剑指-offer-16-数值的整数次方"></a> 剑指 Offer 16. 数值的整数次方</h2><p><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/description">题目链接</a></p><p>完成日期：2023/1/23</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">long</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>            x = <span class="hljs-number">1</span> / x;<br>            n = -n;<br>        &#125;<br>        <span class="hljs-keyword">return</span> quickPow(x, n);<br>    &#125;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">quickPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">long</span> n)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                result *= x;<br>            &#125;<br>            n /= <span class="hljs-number">2</span>;<br>            x *= x;    <br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure><h2 id="剑指-offer-15-二进制中1的个数"><a class="markdownIt-Anchor" href="#剑指-offer-15-二进制中1的个数"></a> 剑指 Offer 15. 二进制中1的个数</h2><p><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/24</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// you need to treat n as an unsigned value</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hammingWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>            n &amp;= n - <span class="hljs-number">1</span>;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-65-不用加减乘除做加法"><a class="markdownIt-Anchor" href="#剑指-offer-65-不用加减乘除做加法"></a> 剑指 Offer 65. 不用加减乘除做加法</h2><p><a href="https://leetcode.cn/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/description">题目链接</a></p><p>完成日期：2023/1/24</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">while</span> (b != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> (a &amp; b) &lt;&lt; <span class="hljs-number">1</span>;<br>            a ^= b;<br>            b = carry;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-56-i-数组中数字出现的次数"><a class="markdownIt-Anchor" href="#剑指-offer-56-i-数组中数字出现的次数"></a> 剑指 Offer 56 - I. 数组中数字出现的次数</h2><p><a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/25</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumbers(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            sum ^= num;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((m &amp; sum) == <span class="hljs-number">0</span>) &#123;<br>            m &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> ((m &amp; num) == <span class="hljs-number">0</span>) &#123;<br>                x ^= num;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                y ^= num;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;x, y&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-56-ii-数组中数字出现的次数-ii"><a class="markdownIt-Anchor" href="#剑指-offer-56-ii-数组中数字出现的次数-ii"></a> 剑指 Offer 56 - II. 数组中数字出现的次数 II</h2><p><a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/description">剑指 Offer 56 - II. 数组中数字出现的次数 II</a></p><p>完成日期：2023/1/25</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Integer num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (map.containsKey(num)) &#123;<br>                map.put(num, map.get(num) + <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.put(num, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Integer num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (map.get(num) == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> num;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-07-重建二叉树"><a class="markdownIt-Anchor" href="#剑指-offer-07-重建二叉树"></a> 剑指 Offer 07. 重建二叉树</h2><p><a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/description">题目链接</a></p><p>完成日期：2023/1/25</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span>[] inorder)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inorder.length; i++) &#123;<br>            map.put(inorder[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> build(preorder, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, preorder.length - <span class="hljs-number">1</span>);<br>    &#125;<br>    TreeNode <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span>[] preorder, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <br>        &#125;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorder[index]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> map.get(preorder[index]);<br>        root.left = build(preorder, index + <span class="hljs-number">1</span>, left, i - <span class="hljs-number">1</span>);<br>        root.right = build(preorder, index - left + i + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-39-数组中出现次数超过一半的数字"><a class="markdownIt-Anchor" href="#剑指-offer-39-数组中出现次数超过一半的数字"></a> 剑指 Offer 39. 数组中出现次数超过一半的数字</h2><p><a href="https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/description">题目链接</a></p><p>完成日期：2023/1/26</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i - <span class="hljs-number">1</span>] == nums[i]) &#123;<br>                cnt++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cnt = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &gt; nums.length / <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">return</span> nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剑指-offer-66-构建乘积数组"><a class="markdownIt-Anchor" href="#剑指-offer-66-构建乘积数组"></a> 剑指 Offer 66. 构建乘积数组</h2><p><a href="https://leetcode.cn/problems/gou-jian-cheng-ji-shu-zu-lcof/description">题目链接</a></p><p>完成日期：2022/1/26</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] constructArr(<span class="hljs-type">int</span>[] a) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (a[i] != <span class="hljs-number">0</span>) &#123;<br>                result *= a[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[a.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>            current = a[i];<br>            <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) &#123;<br>                b[i] = result / current;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">0</span>) &#123;<br>                    b[i] = result;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    b[i] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch常用操作</title>
      <link href="/posts/48305/"/>
      <url>/posts/48305/</url>
      
        <content type="html"><![CDATA[<p>使用者通过请求restful url 与ElasticSearch进行交互</p><p>这里使用curl命令行工具进行请求的收发，除此之外，使用任意http请求库也可</p><p>推荐一款curl生成工具：<a href="https://www.xgjzx.cn/curl">curl请求在线生成-小工具在线(xgjzx.cn)</a></p><h2 id="查看elasticsearch的基本信息"><a class="markdownIt-Anchor" href="#查看elasticsearch的基本信息"></a> 查看ElasticSearch的基本信息</h2><p>请求方式：get</p><p>请求url： <code>协议://主机:端口</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X GET http://localhost:9200<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XIAOXINPRO16&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cluster_name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elasticsearch&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cluster_uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SceOScDoQVeTevhkQVZgmQ&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;number&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8.4.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_flavor&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zip&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_hash&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;42f05b9372a9a4a470db3b52817899b99a76ee73&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_date&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-10-04T07:17:24.662462378Z&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build_snapshot&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lucene_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.17.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.0.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tagline&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;You Know, for Search&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="创建索引"><a class="markdownIt-Anchor" href="#创建索引"></a> 创建索引</h2><p>请求方式：put</p><p>请求url：<code>协议://主机:端口/索引名称</code></p><p>例如创建一个名为blog的索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X PUT http://localhost:9200/blog<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;shards_acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blog&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果在发送请求之前，已经存在了对应的索引，就会返回类似以下的json数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;root_cause&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resource_already_exists_exception&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index [blog/kNkittLPQNa6gjfiIwMZ_Q] already exists&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kNkittLPQNa6gjfiIwMZ_Q&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blog&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resource_already_exists_exception&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index [blog/kNkittLPQNa6gjfiIwMZ_Q] already exists&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kNkittLPQNa6gjfiIwMZ_Q&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blog&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="查看索引"><a class="markdownIt-Anchor" href="#查看索引"></a> 查看索引</h2><p>请求方式：get</p><p>请求url：<code>协议://主机:端口/索引名称</code></p><p>例如查看一个名为blog的索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X GET http://localhost:9200/blog<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;blog&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;allocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;_tier_preference&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;data_content&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;number_of_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;provided_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blog&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;creation_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1667011001364&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;number_of_replicas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kNkittLPQNa6gjfiIwMZ_Q&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8040399&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="查看所有索引"><a class="markdownIt-Anchor" href="#查看所有索引"></a> 查看所有索引</h2><p>请求方式：get</p><p>请求url： <code>协议://主机:端口/_cat/indices?v</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X GET http://localhost:9200/_cat/indices?v<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size<br>yellow open   blog     kNkittLPQNa6gjfiIwMZ_Q   <span class="hljs-number">1</span>   <span class="hljs-number">1</span>          <span class="hljs-number">0</span>            <span class="hljs-number">0</span>       <span class="hljs-number">225</span>b           <span class="hljs-number">225</span>b<br>yellow open   shopping HP4ryUR-SXmqfZk4h-HEiw   <span class="hljs-number">1</span>   <span class="hljs-number">1</span>          <span class="hljs-number">0</span>            <span class="hljs-number">0</span>       <span class="hljs-number">225</span>b           <span class="hljs-number">225</span>b<br></code></pre></td></tr></table></figure><h2 id="删除索引"><a class="markdownIt-Anchor" href="#删除索引"></a> 删除索引</h2><p>请求方式：delete</p><p>请求url：<code>协议://主机:端口/索引名称</code></p><p>例如删除索引名称为blog的索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X DELETE http://localhost:9200/blog<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>&quot;acknowledged&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="向索引中添加数据"><a class="markdownIt-Anchor" href="#向索引中添加数据"></a> 向索引中添加数据</h2><p>请求方式：post</p><p>要添加的数据在请求体中说明</p><p>请求url：<code>协议://主机:端口/索引名称/_doc</code></p><p>例如向shopping索引中添加以下数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;band&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oppo&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;999&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>请求：这里使用apifox发送请求，具体细节待补充</p><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hmq9IYQBphg_n9gvanO6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>自定义数据id(满足幂等性，post和put请求都可）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://localhost:9200/shopping/_doc/1001<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://localhost:9200/shopping/_create/1001<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="查询数据"><a class="markdownIt-Anchor" href="#查询数据"></a> 查询数据</h2><p>请求方式：get</p><p>请求url：<code>协议://主机:端口/索引名称/_doc/数据id</code></p><p>例如查询shopping索引中id为1001的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X GET http://localhost:9200/shopping/1001<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;band&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oppo&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;999&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="查询索引下的全部数据"><a class="markdownIt-Anchor" href="#查询索引下的全部数据"></a> 查询索引下的全部数据</h2><p>请求方式：get</p><p>请求url：<code>协议://主机:端口/索引名称/_search</code></p><p>例如查询shopping索引下的全部数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X http://localhost:9200/shopping/_search<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;relation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hmq9IYQBphg_n9gvanO6&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;band&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oppo&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;999&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;band&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oppo&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;999&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="全量数据更新"><a class="markdownIt-Anchor" href="#全量数据更新"></a> 全量数据更新</h2><p>请求方式：put</p><p>请求url：<code>协议://主机:端口/索引名称/_doc/数据id</code></p><p>将修改的内容放在请求体中，格式为json</p><p>例如将id为1001的数据修改为以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;band&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oppo&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8888&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>请求：这里使用apifox发送请求，具体细节待补充</p><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="局部数据更新"><a class="markdownIt-Anchor" href="#局部数据更新"></a> 局部数据更新</h2><p>请求方式：post（不满足幂等性，不能用put）</p><p>请求url：<code>协议://主机:端口/索引名称/_update/数据id</code></p><p>请求体：json格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        你要修改的数据<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>例如修改1001的band中的&quot;oppo&quot;为&quot;vivo&quot;</p><p>请求体如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;band&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vivo&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>请求：这里使用apifox发送请求，具体细节待补充</p><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="删除索引下的某条数据"><a class="markdownIt-Anchor" href="#删除索引下的某条数据"></a> 删除索引下的某条数据</h2><p>请求方式：delete</p><p>请求url：<code>协议://主机:端口/索引名称/_doc/数据id</code></p><p>例如删除索引shopping下id为1001的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X DELETE http://localhost:9200/shopping/_doc/1001<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shopping&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleted&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="条件查询"><a class="markdownIt-Anchor" href="#条件查询"></a> 条件查询</h2><p>请求方式：get</p><p>请求url</p><ol><li><p>请求参数放请求头：<code>协议://主机:端口/索引名称/_search?q=键:值</code></p><p>缺点：请求头中值为中文时容易出现乱码</p></li><li><p>请求参数放请求体：<code>协议://主机:端口/索引名称/_search</code></p><p>请求体如下，格式为json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            你的请求参数<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><p>例如查询shopping索引下category=小米的记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X GET http://localhost:9200/shopping/_search/q=category:小米<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X GET http://localhost:9200/shopping/_search<br></code></pre></td></tr></table></figure><p>请求体如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="全量查询"><a class="markdownIt-Anchor" href="#全量查询"></a> 全量查询</h2><p>请求方式：get</p><p>请求url：<code>协议://主机:端口/索引名称/_search</code></p><p>请求体如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="分页"><a class="markdownIt-Anchor" href="#分页"></a> 分页</h2><p>在请求体中带上以下参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> 从哪条记录开始（索引从<span class="hljs-number">0</span>开始）<span class="hljs-comment">// （页码 - 1） * 每页数据条数</span><br><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> 每页的大小<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 从第1条数据开始</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span> <span class="hljs-comment">// 每页大小为5页</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="只显示部分字段结果"><a class="markdownIt-Anchor" href="#只显示部分字段结果"></a> 只显示部分字段结果</h2><p>在请求体中带上以下参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span>你想要显示的字段<span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>例如我想显示title和category两个字段的结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 从第1条数据开始</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 每页大小为5页</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;category&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-comment">// 显示title和category两个字段的结果</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2><p>在请求体中带上以下参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    排序依据的字段：<span class="hljs-punctuation">&#123;</span><br><span class="hljs-string">&quot;order: &quot;</span>desc<span class="hljs-string">&quot; or &quot;</span>asc<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>例如依据price进行降序排序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 从第1条数据开始</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 每页大小为5页</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;category&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 显示title和category两个字段的结果</span><br>    <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-comment">// 依据price进行降序排序</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="多条件查询"><a class="markdownIt-Anchor" href="#多条件查询"></a> 多条件查询</h2><p>在请求体中添加以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 查询</span><br>        <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 条件查询</span><br>            <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 必须匹配的规则，相当于AND</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   你的规则<br>                   <span class="hljs-punctuation">&#125;</span> <br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span>  <br>                   <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   你的规则<br>                   <span class="hljs-punctuation">&#125;</span>  <br>                <span class="hljs-punctuation">&#125;</span><br>                ……<br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 可以匹配的规则·相当于OR</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   你的规则<br>                   <span class="hljs-punctuation">&#125;</span> <br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                     <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   你的规则<br>                   <span class="hljs-punctuation">&#125;</span>  <br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>例如查询category=小米&amp;&amp;price=999的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 查询</span><br>        <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 条件查询</span><br>            <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 必须匹配的规则</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   category<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米&quot;</span><br>                   <span class="hljs-punctuation">&#125;</span> <br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span>  <br>                   <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">999</span><br>                   <span class="hljs-punctuation">&#125;</span>  <br>                <span class="hljs-punctuation">&#125;</span><br>            <br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>例如查询category=小米||price=999的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 查询</span><br>        <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 条件查询</span><br>            <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 可以匹配的规则</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   category<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米&quot;</span><br>                   <span class="hljs-punctuation">&#125;</span> <br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span>  <br>                   <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 规则</span><br>                   <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">999</span><br>                   <span class="hljs-punctuation">&#125;</span>  <br>                <span class="hljs-punctuation">&#125;</span><br>            <br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="范围查询"><a class="markdownIt-Anchor" href="#范围查询"></a> 范围查询</h2><p>举个例子，查询price大于5000的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;gt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5000</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="全文检索匹配"><a class="markdownIt-Anchor" href="#全文检索匹配"></a> 全文检索匹配</h2><p>以下语句可以匹配&quot;小米&quot;和&quot;华为&quot;，原因在于elastic为倒排索引，“小华”被拆解成&quot;小”、“华”、”小华“三个关键字，这叫全文检索匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// match为全文检索匹配</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小华&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="完全匹配"><a class="markdownIt-Anchor" href="#完全匹配"></a> 完全匹配</h2><p>以下语句仅匹配含有“小华”的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match_phase&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 完全匹配</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小华&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="高亮显示"><a class="markdownIt-Anchor" href="#高亮显示"></a> 高亮显示</h2><p>加入以下代码</p><p>对category字段进行高亮显示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="聚合操作"><a class="markdownIt-Anchor" href="#聚合操作"></a> 聚合操作</h2><p>加入以下代码</p><p>表示对field进行分组</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合操作</span><br>        <span class="hljs-attr">&quot;price_group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 名称，随意起名</span><br>            <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 分组</span><br>               <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span> <span class="hljs-comment">// 分组字段</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>不显示原来数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合操作</span><br>        <span class="hljs-attr">&quot;price_group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合操作后的返回数据名称，名称自定义</span><br>            <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 分组</span><br>               <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span> <span class="hljs-comment">// 分组字段</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span> <span class="hljs-comment">// 表示不显示原来数据</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>不分组，求平均值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合操作</span><br>        <span class="hljs-attr">&quot;price_avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合操作后的返回数据名称，名称自定义</span><br>            <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 求平均值</span><br>               <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span> <span class="hljs-comment">// 求平均值的字段</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span> <span class="hljs-comment">// 表示不显示原来数据</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="映射关系"><a class="markdownIt-Anchor" href="#映射关系"></a> 映射关系</h2><p>在mysql中，一个表的字段、类型、长度都属于它的结构信息，在es中也有类似的概念，我们称之为映射关系</p><p>创建映射</p><p>请求方式：put</p><p>请求url：<code>协议://主机:端口/索引名称/_mapping</code></p><p>请求体示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// text表示可以被分词</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// keyword表示不能被分词</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-comment">// true表示可以被索引</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-comment">// false表示不能被索引</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS源码分析</title>
      <link href="/posts/48845/"/>
      <url>/posts/48845/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>AQS是整个JUC的基石，全称为AbstractQueuedSynchronizer，中文翻译为抽象队列同步器</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223201825392.png" alt="image-20230223201825392"></p><p>AQS是一个抽象类，运用的设计模式是抽象模版模式，有许多的锁和同步器实现了AQS</p><p>其中ReentrantLock就实现了AQS，这里以ReentrantLock为例来剖析AQS</p><h2 id="reentrantlock内部结构"><a class="markdownIt-Anchor" href="#reentrantlock内部结构"></a> ReentrantLock内部结构</h2><p>ReentrantLock类实现了Lock接口</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223203815464.png" alt="image-20230223203815464"></p><p>ReentrantLock中有一个抽象的静态内部类Sync，这个sync继承了AbstractQueuedSynchronizer</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223202934536.png" alt="image-20230223202934536"></p><p>sync下面有两个实现类</p><p>分别为NonfairSync和fairSync</p><p>NonfairSync用于实现ReentrantLock非公平锁功能</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223203027880.png" alt="image-20230223203027880"></p><p>FairSync用于实现ReentrantLock公平锁功能</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223203150299.png" alt="image-20230223203150299"></p><p>ReentrantLock的主要功能是由这个静态内部类Sync实现的</p><p>ReentrantLock中有一个成员变量sync，ReentrantLock的方法最终是通过调用这个sync成员变量实现的</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223203422709.png" alt="image-20230223203422709"></p><p>而ReentrantLock是非公平锁还是公平锁最终看sync接收的是NonfairSync对象还是FairSync对象</p><p>用一张图来概括以上关系</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223205155330.png" alt="image-20230223205155330"></p><h2 id="reentrantlock构造方法"><a class="markdownIt-Anchor" href="#reentrantlock构造方法"></a> ReentrantLock构造方法</h2><p>ReentrantLock有两个构造方法</p><p>分别如下所示</p><p>无参构造</p><p>默认为非公平锁</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223202219519.png" alt="image-20230223202219519"></p><p>有参构造</p><p>根据传入的fair值选择公平锁还是非公平锁</p><p>true则为公平锁，false则为非公平锁</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223202244536.png" alt="image-20230223202244536"></p><h2 id="lock方法源码分析"><a class="markdownIt-Anchor" href="#lock方法源码分析"></a> lock方法源码分析</h2><p>FairSync和NonfairSync的lock方法有差别</p><p>FairSync的lock方法</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223210145883.png" alt="image-20230223210145883"></p><p>NonfairSync的lock方法</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223210206803.png" alt="image-20230223210206803"></p><p>其中acquire方法为AQS的final方法</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223210323437.png" alt="image-20230223210323437"></p><p>acquire方法首先调用的是tryAcquire方法</p><p>tryAcquire方法如下</p><p>此方法为AQS的一个钩子函数，交由子类实现</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230223210552849.png" alt="image-20230223210552849"></p><p>由于子类FairSync和NonfairSync的实现都不一样，所以这里以非公平锁来举例</p><p>这里以如下一段程序举例</p><p>A，B，C三个线程同时争抢ReentrantLock锁，由于抢夺有先后顺序，所以我们可以通过调试看到AQS的内部执行流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLockDebug</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>                System.out.println(<span class="hljs-string">&quot;A线程已完成&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>                System.out.println(<span class="hljs-string">&quot;B线程已完成&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>                System.out.println(<span class="hljs-string">&quot;C线程已完成&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ReentrantLock内部维护了一个改进的双向CLH队列，同时维护了一个状态量state，这个state用于表示当前队列的状态，这个队列被称为等待队列</p><p>队列的每一个元素都是Node类型，基本结构如下</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225104941717.png" alt="image-20230225104941717"></p><p>现在开始Debug</p><p>首先state=0，表示等待队列处于空闲状态</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225105629602.png" alt="image-20230225105629602"></p><p>然后ReentrantLock会调用sync.lock()方法进行上锁</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225105727732.png" alt="image-20230225105727732"></p><p>由于默认是非公平锁，所以进入到NonfairSync的lock方法中</p><p>首先会尝试进行一次CAS抢占锁操作</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225105757476.png" alt="image-20230225105757476"></p><p>可以看到compareAndSetState方法就是通过CAS尝试设置state=1达到上锁效果</p><p>底层是通过unsafe类实现的，这里不做深究</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225110016412.png" alt="image-20230225110016412"></p><p>由于此时state=0，s所以此时compareAndSetState设置state=1成功，成功进入if语句块里面</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225110209892.png" alt="image-20230225110209892"></p><p>接下来会调用setExclusiveOwnerThread将当前线程设置为独占线程</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225110354011.png" alt="image-20230225110354011"></p><p>exclusiveOwnerThread是AQS的一个成员变量，用于记录当前等待队列中的独占线程</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225110634586.png" alt="image-20230225110634586"></p><p>至此，第一个线程就成功抢占锁资源</p><p>接下来我们观察第二个线程的运行情况</p><p>CAS失败，进入acquire方法</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225114943665.png" alt="image-20230225114943665"></p><p>acquire方法如下</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225115028419.png" alt="image-20230225115028419"></p><p>执行tryAcquire方法</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225115315850.png" alt="image-20230225115315850"></p><p>进入nonfairTryAcquire方法</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225115424442.png" alt="image-20230225115424442"></p><p>此时state又变为0，表示当前队列中的线程已经将锁释放，多线程环境，调试过程中其他线程也在执行，所以这个方法也要进行CAS获取锁操作</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225120045029.png" alt="image-20230225120045029"></p><p>可以看到此时控制台已经输出</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225115933227.png" alt="image-20230225115933227"></p><p>可以看到获取锁成功，返回true</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225120451216.png" alt="image-20230225120451216"></p><p>回到acquire方法</p><p><img src="https://markdown-1311031037.cos.ap-guangzhou.myqcloud.com/img/image-20230225120913738.png" alt="image-20230225120913738"></p><p>由于获得锁的线程执行很快，因此第三个线程执行的操作和第二个线程执行的操作一样。。。</p><p>还有两个重要方法acquireQueued和addWaiter程序没有执行到</p><p>因此下面分析下这两个方法的作用</p><p>addWaiter方法</p><p>addWaiter方法主要用于添加等待线程到等待队列中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br><br></code></pre></td></tr></table></figure><p>acquireQueued方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AQS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TickNet实习生考核笔试题解</title>
      <link href="/posts/19893/"/>
      <url>/posts/19893/</url>
      
        <content type="html"><![CDATA[<h2 id="题目ab2050-三角形判断"><a class="markdownIt-Anchor" href="#题目ab2050-三角形判断"></a> 题目A：B2050 三角形判断</h2><h3 id="1-思路"><a class="markdownIt-Anchor" href="#1-思路"></a> 1、思路</h3><p>设三条线段的长度分别为a、b、c，判断这三条线段能否构成三角形的充分必要条件为<strong>a+b&gt;c&amp;&amp;b+c&gt;a&amp;&amp;a+c&gt;b</strong>，满足以上关系表达式即可认定这三条线段能构成三角形，反之则不能构成三角形</p><h3 id="2-ac代码"><a class="markdownIt-Anchor" href="#2-ac代码"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a, b, c; <span class="hljs-comment">// 定义三条线段 </span><br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; <span class="hljs-comment">// 输入 </span><br><span class="hljs-keyword">if</span> (a + b &gt; c &amp;&amp; b + c &gt; a &amp;&amp; a + c &gt; b) &#123; <span class="hljs-comment">// 判断是否满足条件 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;1&quot;</span>; <span class="hljs-comment">//  满足输出1 </span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>; <span class="hljs-comment">// 不满足输出0 </span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目bb2047-分段函数"><a class="markdownIt-Anchor" href="#题目bb2047-分段函数"></a> 题目B：B2047 分段函数</h2><h3 id="1-思路-2"><a class="markdownIt-Anchor" href="#1-思路-2"></a> 1、思路</h3><p>由于分段函数的定义域没有交集，所以可以利用if-else分支结构判断定义域x的范围从而选择对应的分段函数输出</p><p>容易忽略的地方：题目要求输出结果保留三位小数</p><h3 id="2-ac代码-2"><a class="markdownIt-Anchor" href="#2-ac代码-2"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">double</span> x, y; <span class="hljs-comment">// 定义自变量x和因变量y </span><br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= x &amp;&amp; x &lt; <span class="hljs-number">5</span>) &#123; <span class="hljs-comment">// 0 &lt;= x &lt; 5 时 </span><br>y = -x + <span class="hljs-number">2.5</span>; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">5</span> &amp;&amp; x &lt; <span class="hljs-number">10</span>) &#123; <span class="hljs-comment">// 5 &lt;= x &lt; 10时 </span><br>y = <span class="hljs-number">2</span> - <span class="hljs-number">1.5</span> * (x - <span class="hljs-number">3</span>) * (x - <span class="hljs-number">3</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 其他情况，即 10 &lt;= x &lt; 20时 </span><br>y = x / <span class="hljs-number">2</span> - <span class="hljs-number">1.5</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf&quot;</span>, y); <span class="hljs-comment">// 题目要求y的结果保留三位小数 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题cb2112-石头剪子布"><a class="markdownIt-Anchor" href="#问题cb2112-石头剪子布"></a> 问题C：B2112 石头剪子布</h2><h3 id="1-思路-3"><a class="markdownIt-Anchor" href="#1-思路-3"></a> 1、思路</h3><p>本题要求实现一个程序来判断石头剪刀布游戏的结果，因为有N次游戏，不妨将判断程序封装成一个函数，利用函数返回值判断游戏结果，达到简化代码，增加复用性和可读性的效果</p><p>判断程序judge设计如下</p><p>1、返回值：类型为int ，有三个状态，0表示TIe，1表示Player1胜利，2表示Player2胜利</p><p>2、形参列表：string x, string y， 分别表示 Player1，Player2 的选择</p><p>3、主体判断逻辑如下：</p><p>三种情况</p><p>①如果Player1，Player2的选择一样，即x == y，就说明Tie，返回0</p><p>②如果 x == “Rock” &amp;&amp; y == “Scissors”<br>|| x == “Paper” &amp;&amp; y == “Rock”<br>|| x == “Scissors” &amp;&amp; y == “Paper”</p><p>即x为石头、y为剪刀或x为布、y为石头或x为剪刀、y为布时Player1胜利，返回1</p><p>③剩下的一种情况只能是Player2胜利，返回2</p><p>主函数接收对应的返回值并输出对应的提示文字即可</p><h3 id="2-ac代码-3"><a class="markdownIt-Anchor" href="#2-ac代码-3"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(string x, string y)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x == y) &#123; <span class="hljs-comment">// Tie的情况 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 返回0 </span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-string">&quot;Rock&quot;</span> &amp;&amp; y == <span class="hljs-string">&quot;Scissors&quot;</span> <br>|| x == <span class="hljs-string">&quot;Paper&quot;</span> &amp;&amp; y == <span class="hljs-string">&quot;Rock&quot;</span><br>|| x == <span class="hljs-string">&quot;Scissors&quot;</span> &amp;&amp; y == <span class="hljs-string">&quot;Paper&quot;</span>) &#123; <span class="hljs-comment">// Player1胜利 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回1 </span><br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// Player2胜利 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 返回2 </span><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n; <span class="hljs-comment">// 定义游戏场次n </span><br>cin &gt;&gt; n; <br><span class="hljs-keyword">while</span> (n--) &#123; <span class="hljs-comment">// n次游戏，循环n次 </span><br>string player1, player2; <span class="hljs-comment">// 用于接收Player1和Player2的选择 </span><br>cin &gt;&gt; player1 &gt;&gt; player2;<br><span class="hljs-type">int</span> flag = <span class="hljs-built_in">judge</span>(player1, player2); <span class="hljs-comment">// flag用于接收judge函数返回值 </span><br><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 平手 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;Tie&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// Player1胜利 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;Player1&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// Player2胜利 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;Player2&quot;</span> &lt;&lt; endl;<br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题dp1789-mc生存插火把"><a class="markdownIt-Anchor" href="#问题dp1789-mc生存插火把"></a> 问题D：P1789 【Mc生存】插火把</h2><h3 id="1-思路-4"><a class="markdownIt-Anchor" href="#1-思路-4"></a> 1、思路</h3><p>本题要求判断方阵中有几个点会生成怪物</p><p>①我们可以用二维数组来实现方阵，二维数组的值有0和1，0代表会生成怪物的地方，1代表不会生成怪物的地方</p><p>二维数组定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 定义一个n * n的二维数组v, 初值均为0</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">v</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>②可以用函数来模拟火把或萤石照亮填充方阵的过程，同时用一个全局变量cnt来统计当前方阵已填充点的个数</p><p>全局变量cnt定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">// 因为作用是统计当前方阵已填充点的个数，所以初始化为0</span><br></code></pre></td></tr></table></figure><p>定义两个函数分别模拟火把和萤石</p><p>模拟火把：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 形参说明</span><br><span class="hljs-comment">// vector&lt;vector&lt;int&gt; &gt; &amp;v 表示以引用的方式传入二维数组v</span><br><span class="hljs-comment">// int x和int y分别表示火把的坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getFire</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; &amp;v, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-comment">// 枚举火把的过程代码量太大，这里选择用方向数组的形式来简化代码</span><br>    <span class="hljs-comment">// 定义两个方向数组X和Y，分别表示相对火把坐标（x，y）的偏移量</span><br><span class="hljs-type">int</span> X[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> Y[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">13</span>; i++) &#123; <span class="hljs-comment">// 开始填充</span><br><span class="hljs-keyword">if</span> (x + X[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; x + X[i] &lt; v.<span class="hljs-built_in">size</span>() <span class="hljs-comment">// 填充范围为（0~列大小v.size()-1）</span><br>        &amp;&amp; y + Y[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; y + Y[i] &lt; v.<span class="hljs-built_in">size</span>()) &#123; <span class="hljs-comment">// 满足填充范围的点才能填充</span><br><span class="hljs-keyword">if</span> (v[x + X[i]][y + Y[i]] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果当前填充点还没有被填充</span><br>v[x + X[i]][y + Y[i]] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 就置为1，表示已填充</span><br>cnt++; <span class="hljs-comment">// 同时已填充点+1</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>模拟萤石:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 形参说明</span><br><span class="hljs-comment">// vector&lt;vector&lt;int&gt; &gt; &amp;v 表示以引用的方式传入二维数组v</span><br><span class="hljs-comment">// int x和int y分别表示萤石的坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getStone</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; &amp;v, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>     <span class="hljs-comment">// 枚举萤石的过程代码量太大，这里选择用方向数组的形式来简化代码</span><br>    <span class="hljs-comment">// 定义两个方向数组X和Y，分别表示相对萤石坐标（x，y）的偏移量</span><br><span class="hljs-type">int</span> X[<span class="hljs-number">25</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> Y[<span class="hljs-number">25</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;  <span class="hljs-comment">// 开始填充</span><br><span class="hljs-keyword">if</span> (x + X[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; x + X[i] &lt; v.<span class="hljs-built_in">size</span>() <span class="hljs-comment">// 填充范围为（0~列大小v.size()-1）</span><br>        &amp;&amp; y + Y[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; y + Y[i] &lt; v.<span class="hljs-built_in">size</span>()) &#123; <span class="hljs-comment">// 满足填充范围的点才能填充</span><br><span class="hljs-keyword">if</span> (v[x + X[i]][y + Y[i]] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果当前填充点还没有被填充</span><br>v[x + X[i]][y + Y[i]] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 就置为1，表示已填充</span><br>cnt++; <span class="hljs-comment">// 同时已填充点+1</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③可能生成怪物点的个数即方阵所有点个数n * n减去已填充点的个数cnt，输出该结果即可</p><h3 id="2-ac代码-4"><a class="markdownIt-Anchor" href="#2-ac代码-4"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> <span class="hljs-comment">// 包含STL的vector库，二维数组会用到</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std<br>    <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">// 因为作用是统计当前方阵已填充点的个数，所以初始化为0</span><br><br><span class="hljs-comment">// 形参说明</span><br><span class="hljs-comment">// vector&lt;vector&lt;int&gt; &gt; &amp;v 表示以引用的方式传入二维数组v</span><br><span class="hljs-comment">// int x和int y分别表示火把的坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getFire</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; &amp;v, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-comment">// 枚举火把的过程代码量太大，这里选择用方向数组的形式来简化代码</span><br>    <span class="hljs-comment">// 定义两个方向数组X和Y，分别表示相对火把坐标（x，y）的偏移量</span><br><span class="hljs-type">int</span> X[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> Y[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">13</span>; i++) &#123; <span class="hljs-comment">// 开始填充</span><br><span class="hljs-keyword">if</span> (x + X[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; x + X[i] &lt; v.<span class="hljs-built_in">size</span>() <span class="hljs-comment">// 填充范围为（0~列大小v.size()-1）</span><br>        &amp;&amp; y + Y[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; y + Y[i] &lt; v.<span class="hljs-built_in">size</span>()) &#123; <span class="hljs-comment">// 满足填充范围的点才能填充</span><br><span class="hljs-keyword">if</span> (v[x + X[i]][y + Y[i]] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果当前填充点还没有被填充</span><br>v[x + X[i]][y + Y[i]] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 就置为1，表示已填充</span><br>cnt++; <span class="hljs-comment">// 同时已填充点+1</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 形参说明</span><br><span class="hljs-comment">// vector&lt;vector&lt;int&gt; &gt; &amp;v 表示以引用的方式传入二维数组v</span><br><span class="hljs-comment">// int x和int y分别表示萤石的坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getStone</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; &amp;v, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>     <span class="hljs-comment">// 枚举萤石的过程代码量太大，这里选择用方向数组的形式来简化代码</span><br>    <span class="hljs-comment">// 定义两个方向数组X和Y，分别表示相对萤石坐标（x，y）的偏移量</span><br><span class="hljs-type">int</span> X[<span class="hljs-number">25</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> Y[<span class="hljs-number">25</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;  <span class="hljs-comment">// 开始填充</span><br><span class="hljs-keyword">if</span> (x + X[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; x + X[i] &lt; v.<span class="hljs-built_in">size</span>() <span class="hljs-comment">// 填充范围为（0~列大小v.size()-1）</span><br>        &amp;&amp; y + Y[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; y + Y[i] &lt; v.<span class="hljs-built_in">size</span>()) &#123; <span class="hljs-comment">// 满足填充范围的点才能填充</span><br><span class="hljs-keyword">if</span> (v[x + X[i]][y + Y[i]] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果当前填充点还没有被填充</span><br>v[x + X[i]][y + Y[i]] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 就置为1，表示已填充</span><br>cnt++; <span class="hljs-comment">// 同时已填充点+1</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, m, k; <span class="hljs-comment">// n,m,k分别用来接收方阵的行数、火把的个数、萤石的个数</span><br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-comment">// 定义一个n * n的二维数组v, 初值均为0</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">v</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>)); <br><span class="hljs-keyword">while</span> (m--) &#123; <span class="hljs-comment">// m个火把，填充m次</span><br><span class="hljs-type">int</span> x, y; <span class="hljs-comment">// x和y用来接收火把在方阵中的位置</span><br>cin &gt;&gt; x &gt;&gt; y; <br>        <span class="hljs-comment">// 开始填充</span><br>        <span class="hljs-comment">// 不传x传x-1、不传y传y-1是因为题目方阵坐标从1开始</span><br>        <span class="hljs-comment">// 而我们的方阵坐标从0开始</span><br><span class="hljs-built_in">getFire</span>(v, x - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (k--) &#123; <span class="hljs-comment">// k个萤石，填充k次</span><br><span class="hljs-type">int</span> x, y; <span class="hljs-comment">// x和y用来接收萤石在方阵中的位置</span><br>cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-comment">// 开始填充</span><br>        <span class="hljs-comment">// 不传x传x-1、不传y传y-1是因为题目方阵坐标从1开始</span><br>        <span class="hljs-comment">// 而我们的方阵坐标从0开始</span><br><span class="hljs-built_in">getStone</span>(v, x - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>);<br>&#125;<br>    <span class="hljs-comment">// 可能生成怪物点的个数即方阵所有点个数n * n减去已填充点的个数cnt</span><br>cout &lt;&lt; n * n - cnt; <span class="hljs-comment">// 输出结果</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目eb2104-矩阵加法"><a class="markdownIt-Anchor" href="#题目eb2104-矩阵加法"></a> 题目E：B2104 矩阵加法</h2><h3 id="1-思路-5"><a class="markdownIt-Anchor" href="#1-思路-5"></a> 1、思路</h3><p>本题要求实现两个n行m列的矩阵A和B的加法，并且输出它们的和A+B</p><p>我们可以分别定义两个n行m列的矩阵A和B，并且将矩阵A加到矩阵B上去，矩阵B累加的结果就是矩阵A+B的结果</p><p>矩阵A，B定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">定义两个n行m列的矩阵A和B<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">A</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m));<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">B</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m));<br></code></pre></td></tr></table></figure><p>接下来填充A和B的值并且执行矩阵加法，最后输出矩阵B即可</p><p>注意：注意输出结果每一行的末尾不能有空格，这个坑我已经踩过了</p><h3 id="2-ac代码-5"><a class="markdownIt-Anchor" href="#2-ac代码-5"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, m; <span class="hljs-comment">// n和m分别接收行和列的大小</span><br>cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-comment">// 定义两个n行m列的矩阵A和B</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">A</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m));<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">B</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m));<br>    <span class="hljs-comment">// 填充矩阵A</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>cin &gt;&gt; A[i][j];<br>&#125;<br>&#125;<br>    <span class="hljs-comment">// 填充矩阵B并且执行A+B</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>cin &gt;&gt; B[i][j]; <br>            <span class="hljs-comment">// 将B对应位置的A元素加到B上去</span><br>B[i][j] += A[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>cout &lt;&lt; B[i][j]; <span class="hljs-comment">// 输出相加结果</span><br><span class="hljs-keyword">if</span> (j != m - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 没有到达列的末尾输出空格</span><br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; endl; <span class="hljs-comment">// 到达列的末尾输出换行符&#x27;\n&#x27;</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题fb3617-古籍翻译"><a class="markdownIt-Anchor" href="#问题fb3617-古籍翻译"></a> 问题F：B3617 古籍翻译</h2><h3 id="1-思路-6"><a class="markdownIt-Anchor" href="#1-思路-6"></a> 1、思路</h3><p>题目要求将八进制字符串转化为十六进制字符串</p><p>字符串的长度最高可达1000，这显然无法用任何整形变量存储，只能通过字符串存储</p><p>① 八进制转化成十六进制的方法的讨论</p><p>先将八进制转化成十进制或二进制，再将十进制或二进制转化成十六进制</p><ol><li><p>如果直接将整个八进制字符串s转化成对应的十进制或二进制字符串，再将这个十进制或二进制字符串转化成十六进制的话，就非常复杂了，将涉及到快速幂算法（八进制转化成对应的十进制或二进制时），大数高精度加法、大数高精度乘法等知识，所以此方法行不通</p></li><li><p>我们可以采用分治法，将一个大的问题拆分成一个个的小问题，小问题解决了自然大的问题也就解决了，在本题中分治法十分出色</p></li></ol><p>本题我们的中间态选择十进制</p><ul><li><p>由于每4个八进制码包含12个bit信息，对应3个十六进制码，受此启发，我们可以将整个八进制字符串看成由许多包含4个字符的子字符串组成（Divide）</p></li><li><p>将每一个字符串从八进制转化成十进制，再从十进制转化成十六进制，最后将子字符串的结果拼接成一个字符串，这个字符串的结果就是我们转化后的结果（Conquer）</p></li></ul><p>由此我们就很好的解决了这个问题</p><p>②程序函数结构的设计</p><ul><li><p>int十进制数转string十六进制数表示的函数transform</p><p>作用：将十进制数转十六进制数表示，例如10转化成a、11转化成b等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 返回值为转化结果，返回类型为string</span><br><span class="hljs-function">string <span class="hljs-title">transform</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>string result; <span class="hljs-comment">// 待返回值变量 </span><br><span class="hljs-keyword">if</span> (s &gt;= <span class="hljs-number">0</span> &amp;&amp; s &lt;= <span class="hljs-number">9</span>) &#123; <span class="hljs-comment">// 如果s为0~9</span><br>result += s + <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">// 结果为对应的数字</span><br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果s为 10~15</span><br>result += s + <span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>; <span class="hljs-comment">// 结果为对应的字母</span><br>&#125;<br><span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 返回</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将八进制数转化成十进制数的函数oct_to_dec</p><p>作用：将八进制int转化成十进制int</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 返回值为int，为转化结果</span><br><span class="hljs-comment">// 形参int s表示待转化的数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">oct_to_dec</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>; <span class="hljs-comment">// 待返回结果变量</span><br><span class="hljs-type">int</span> g = <span class="hljs-number">0</span>; <span class="hljs-comment">// 指数递增器</span><br><span class="hljs-keyword">do</span> &#123;  <span class="hljs-comment">// 开始转化（数位分离+基数幂算法）</span><br><span class="hljs-type">int</span> temp = s % <span class="hljs-number">10</span>; <br>ans += temp * <span class="hljs-built_in">pow</span>(<span class="hljs-number">8</span>, g++);<br>s /= <span class="hljs-number">10</span>;<br>&#125; <span class="hljs-keyword">while</span> (s &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// s &lt;= 0就停止转化 </span><br><span class="hljs-keyword">return</span> ans; <span class="hljs-comment">// 返回</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将int十进制数转化成string十六进制数的函数dec_to_hex</p><p>作用：将int十进制数转化成string十六进制数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//这里用递归实现转化</span><br><span class="hljs-comment">// 返回类型值为void是因为递归转换，设置了temp为string&amp;类型，相当于返回值</span><br><span class="hljs-comment">// 形参int s为待转化的数值, string&amp; temp为引用类型，可以看做返回值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dec_to_hex</span><span class="hljs-params">(<span class="hljs-type">int</span> s, string &amp;temp)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (s &lt; <span class="hljs-number">16</span>) &#123; <span class="hljs-comment">// 递归出口</span><br>temp += <span class="hljs-built_in">transform</span>(s % <span class="hljs-number">16</span>); <span class="hljs-comment">// 将结果保存</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">dec_to_hex</span>(s / <span class="hljs-number">16</span>, temp); <span class="hljs-comment">// 继续递归，递归式子</span><br>temp += <span class="hljs-built_in">transform</span>(s % <span class="hljs-number">16</span>); <span class="hljs-comment">// 将结果保存</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主转化函数–实现将八进制转化成十六进制convert</p><p>作用：实现将八进制转化成十六进制convert</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 返回值类型为string，表示转化的结果十六进制数</span><br><span class="hljs-comment">// 形参string s为待转化的八进制数</span><br><span class="hljs-function">string <span class="hljs-title">convert</span><span class="hljs-params">(string s)</span> </span>&#123;<br><span class="hljs-type">int</span> num = <span class="hljs-built_in">stoi</span>(s); <span class="hljs-comment">// 将string类型转化为int类型，需包含string头文件</span><br>string result; <span class="hljs-comment">// 待返回结果</span><br><span class="hljs-type">int</span> dec = <span class="hljs-built_in">oct_to_dec</span>(num); <span class="hljs-comment">//将八进制数转化成十进制数，dec用于接收结果  </span><br><span class="hljs-built_in">dec_to_hex</span>(dec, result); <span class="hljs-comment">// 将十进制数转化成十六进制数</span><br>    <span class="hljs-comment">// 以下为转化结果不满足3位需要补前导0</span><br><span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 2位时 </span><br>result = <span class="hljs-string">&#x27;0&#x27;</span> + result; <span class="hljs-comment">// 补一个0</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 1位时</span><br>result = <span class="hljs-string">&quot;00&quot;</span> + result; <span class="hljs-comment">// 补两个0</span><br>&#125;<br><span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 返回</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主函数</p><p>作用：控制输入和输出，操控各个子函数</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s; <span class="hljs-comment">// 待转化的八进制字符串</span><br>stack&lt;string&gt; stk; <span class="hljs-comment">// 定义一个string栈，用于输出正确的转化结果（原结果是相反的）</span><br>cin &gt;&gt; s;<br><span class="hljs-type">int</span> i; <span class="hljs-comment">// 控制变量i</span><br>    <span class="hljs-comment">// 开始分割字符串，每四个字符分割一次</span><br><span class="hljs-keyword">for</span> (i = s.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>; i - <span class="hljs-number">3</span> &gt;= <span class="hljs-number">0</span> ; i = i - <span class="hljs-number">4</span>) &#123;<br>stk.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">convert</span>(s.<span class="hljs-built_in">substr</span>(i - <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))); <span class="hljs-comment">// 将分割后的子字符串转化结果压入栈中</span><br>&#125;<br><span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt;= <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 有可能有不满足四位的，单独处理</span><br>stk.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">convert</span>(s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, i + <span class="hljs-number">1</span>))); <span class="hljs-comment">// 将分割后的子字符串转化结果压入栈中</span><br>&#125;<br>string ans; <span class="hljs-comment">// 用于存放最后输出结果</span><br>    <span class="hljs-comment">// 将栈中结果持续出栈，ans来进行拼接，实现结果翻转</span><br><span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>()) &#123; <span class="hljs-comment">// 如果栈不为空</span><br>ans += stk.<span class="hljs-built_in">top</span>(); <span class="hljs-comment">// 拼接结果</span><br>stk.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 出栈</span><br>&#125;<br>    <span class="hljs-comment">// 以下程序段为处理前导0，并输出转化结果</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 开关，出现第一个不为‘0’的字符时打开</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; ans.<span class="hljs-built_in">size</span>(); k++) &#123;<br><span class="hljs-keyword">if</span> (ans[k] != <span class="hljs-string">&#x27;0&#x27;</span>) &#123; <span class="hljs-comment">// 打开开关</span><br>flag = <span class="hljs-literal">true</span>;<br>&#125; <br><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">true</span>) &#123; <span class="hljs-comment">// 开关打开就进行输出，输出结果不包含前导‘0’</span><br>cout &lt;&lt; ans[k]; <span class="hljs-comment">// 输出</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>③代码实现的细节</p><ul><li><p>字符串分割是从后往前每四个字符分割一次，也就是说先分割出的字符串是后处理的，符合栈先进后出的特性，我们可以通过栈来实现输出结果的一致性，先分割的先处理</p></li><li><p>在某些4位八进制数转化成3位十六进制数的过程中，转化结果位数可能不足3位，需要根据实际位数补前导0</p></li><li><p>最后输出结果时，注意前导0不要输出</p></li></ul><h3 id="2-ac代码-6"><a class="markdownIt-Anchor" href="#2-ac代码-6"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><span class="hljs-comment">// 返回值为转化结果，返回类型为string</span><br><span class="hljs-function">string <span class="hljs-title">transform</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>string result; <span class="hljs-comment">// 待返回值变量 </span><br><span class="hljs-keyword">if</span> (s &gt;= <span class="hljs-number">0</span> &amp;&amp; s &lt;= <span class="hljs-number">9</span>) &#123; <span class="hljs-comment">// 如果s为0~9</span><br>result += s + <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">// 结果为对应的数字</span><br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果s为 10~15</span><br>result += s + <span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">10</span>; <span class="hljs-comment">// 结果为对应的字母</span><br>&#125;<br><span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 返回</span><br>&#125;<br><br><span class="hljs-comment">// 返回值为int，为转化结果</span><br><span class="hljs-comment">// 形参int s表示待转化的数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">oct_to_dec</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>; <span class="hljs-comment">// 待返回结果变量</span><br><span class="hljs-type">int</span> g = <span class="hljs-number">0</span>; <span class="hljs-comment">// 指数递增器</span><br><span class="hljs-keyword">do</span> &#123;  <span class="hljs-comment">// 开始转化（数位分离+基数幂算法）</span><br><span class="hljs-type">int</span> temp = s % <span class="hljs-number">10</span>; <br>ans += temp * <span class="hljs-built_in">pow</span>(<span class="hljs-number">8</span>, g++);<br>s /= <span class="hljs-number">10</span>;<br>&#125; <span class="hljs-keyword">while</span> (s &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// s &lt;= 0就停止转化 </span><br><span class="hljs-keyword">return</span> ans; <span class="hljs-comment">// 返回</span><br>&#125;<br><br><span class="hljs-comment">//这里用递归实现转化</span><br><span class="hljs-comment">// 返回类型值为void是因为递归转换，设置了temp为string&amp;类型，相当于返回值</span><br><span class="hljs-comment">// 形参int s为待转化的数值, string&amp; temp为引用类型，可以看做返回值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dec_to_hex</span><span class="hljs-params">(<span class="hljs-type">int</span> s, string &amp;temp)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (s &lt; <span class="hljs-number">16</span>) &#123; <span class="hljs-comment">// 递归出口</span><br>temp += <span class="hljs-built_in">transform</span>(s % <span class="hljs-number">16</span>); <span class="hljs-comment">// 将结果保存</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">dec_to_hex</span>(s / <span class="hljs-number">16</span>, temp); <span class="hljs-comment">// 继续递归，递归式子</span><br>temp += <span class="hljs-built_in">transform</span>(s % <span class="hljs-number">16</span>); <span class="hljs-comment">// 将结果保存</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 返回值类型为string，表示转化的结果十六进制数</span><br><span class="hljs-comment">// 形参string s为待转化的八进制数</span><br><span class="hljs-function">string <span class="hljs-title">convert</span><span class="hljs-params">(string s)</span> </span>&#123;<br><span class="hljs-type">int</span> num = <span class="hljs-built_in">stoi</span>(s); <span class="hljs-comment">// 将string类型转化为int类型</span><br>string result; <span class="hljs-comment">// 待返回结果</span><br><span class="hljs-type">int</span> dec = <span class="hljs-built_in">oct_to_dec</span>(num); <span class="hljs-comment">//将八进制数转化成十进制数，dec用于接收结果  </span><br><span class="hljs-built_in">dec_to_hex</span>(dec, result); <span class="hljs-comment">// 将十进制数转化成十六进制数</span><br>    <span class="hljs-comment">// 以下为转化结果不满足3位需要补前导0</span><br><span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 2位时 </span><br>result = <span class="hljs-string">&#x27;0&#x27;</span> + result; <span class="hljs-comment">// 补一个0</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 1位时</span><br>result = <span class="hljs-string">&quot;00&quot;</span> + result; <span class="hljs-comment">// 补两个0</span><br>&#125;<br><span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 返回</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s; <span class="hljs-comment">// 待转化的八进制字符串</span><br>stack&lt;string&gt; stk; <span class="hljs-comment">// 定义一个string栈，用于输出正确的转化结果（原结果是相反的）</span><br>cin &gt;&gt; s;<br><span class="hljs-type">int</span> i; <span class="hljs-comment">// 控制变量i</span><br>    <span class="hljs-comment">// 开始分割字符串，每四个字符分割一次</span><br><span class="hljs-keyword">for</span> (i = s.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>; i - <span class="hljs-number">3</span> &gt;= <span class="hljs-number">0</span> ; i = i - <span class="hljs-number">4</span>) &#123;<br>stk.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">convert</span>(s.<span class="hljs-built_in">substr</span>(i - <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))); <span class="hljs-comment">// 将分割后的子字符串转化结果压入栈中</span><br>&#125;<br><span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt;= <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 有可能有不满足四位的，单独处理</span><br>stk.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">convert</span>(s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, i + <span class="hljs-number">1</span>))); <span class="hljs-comment">// 将分割后的子字符串转化结果压入栈中</span><br>&#125;<br>string ans; <span class="hljs-comment">// 用于存放最后输出结果</span><br>    <span class="hljs-comment">// 将栈中结果持续出栈，ans来进行拼接，实现结果翻转</span><br><span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>()) &#123; <span class="hljs-comment">// 如果栈不为空</span><br>ans += stk.<span class="hljs-built_in">top</span>(); <span class="hljs-comment">// 拼接结果</span><br>stk.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 出栈</span><br>&#125;<br>    <span class="hljs-comment">// 以下程序段为处理前导0，并输出转化结果</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 开关，出现第一个不为0时打开</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; ans.<span class="hljs-built_in">size</span>(); k++) &#123;<br><span class="hljs-keyword">if</span> (ans[k] != <span class="hljs-string">&#x27;0&#x27;</span>) &#123; <span class="hljs-comment">// 打开开关</span><br>flag = <span class="hljs-literal">true</span>;<br>&#125; <br><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">true</span>) &#123; <span class="hljs-comment">// 开关打开就进行输出，输出结果不包含前导0</span><br>cout &lt;&lt; ans[k];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题gp5639-csground2守序者的尊严"><a class="markdownIt-Anchor" href="#问题gp5639-csground2守序者的尊严"></a> 问题G：P5639 【CSGRound2】守序者的尊严</h2><h3 id="1-思路-7"><a class="markdownIt-Anchor" href="#1-思路-7"></a> 1、思路</h3><p>题目要求计算出小Z安全到达外卖驻点所需要的时间</p><p>注意到<strong>小 Z 通过任意个数关闭的监控的时间均为 1</strong>，<strong>监控不能持续工作，工作一秒之后要暂停休息一秒</strong>，可知监控只有两种状态：0代表关闭，1代表工作，连续相同状态的监控可以看做一个整体，这样就可以将这条道路上的监控简化为相邻监控状态不同的集体</p><p>例如  0 0 1 1 0 1可以看做 0 1 0 1， 0 0 0 0 0 0 可以看做 0</p><p>注意到小Z安全到达外卖驻点所需要的时间为简化后的监控数组的个数</p><p>原理：通过相同状态的监控需要1秒，监控切换状态时间也需要1秒，时间具有同时性，通过一个状态的监控后（此监控一定是关闭状态），另一个状态的监控切换状态（由开启转为关闭），由于监控只有开启和关闭两个状态，此时另一个状态的监控关闭，小Z可以立即再次通过另一个状态的监控，以此类推，可以推出小Z安全到达外卖驻点所需要的时间为简化后的监控数组的元素个数</p><h3 id="2-ac代码-7"><a class="markdownIt-Anchor" href="#2-ac代码-7"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n; <span class="hljs-comment">// 用来接收监控的个数</span><br>cin &gt;&gt; n;<br>vector&lt;<span class="hljs-type">int</span>&gt; ans; <span class="hljs-comment">// ans数组用来存放简化后的监控数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-type">int</span> temp; <span class="hljs-comment">// 暂时存放当前输入监控的状态</span><br>cin &gt;&gt; temp;<br>        <span class="hljs-comment">// i==0时为第一个监控，必须压入ans数组中，以便和后面监控的状态进行比较</span><br>        <span class="hljs-comment">// 当i!=0时当前状态的监控需要和前一个状态的监控进行比较，如果不同，就压入ans数组中</span><br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || ans.<span class="hljs-built_in">back</span>() != temp) &#123;<br>ans.<span class="hljs-built_in">push_back</span>(temp); <span class="hljs-comment">// 压入监控状态</span><br>&#125; <br>&#125;<br>cout &lt;&lt; ans.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 输出ans数组中元素的个数，即小Z通过监控道路的时间</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题hp6195-eer1迫害"><a class="markdownIt-Anchor" href="#问题hp6195-eer1迫害"></a> 问题H：P6195 [EER1]迫害</h2><h3 id="1-思路-8"><a class="markdownIt-Anchor" href="#1-思路-8"></a> 1、思路</h3><p>X拥有n个1，有m个大小可选定的数，有K个人，每个人有一个数字，分别为1~k，X能用手中若干个数的加和等于被迫害人的数字，一次迫害就成功，而且不消耗数字，求X最多能够<strong>连续</strong>迫害多少个人</p><ul><li><p>我们可以运用推理的方法</p><ol><li><p>由于题目要求是连续，先用掉X手中的n个1，由于迫害成功不会消耗数字，此时最多可以迫害n个人</p><ul><li>为什么要先用掉X手里的n个1：如果不先用掉n个1的话，后面这个1就无法使用，迫害最多的人数肯定没有用完n个1的多</li></ul></li><li><p>如果此时X手里还拥有m个大小可选定的数</p><p>考虑连续迫害</p><p>第n+1张牌我们可以选择数值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，此时最多可以连续迫害的人数为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo>=</mo><msup><mn>2</mn><mn>1</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + (n + 1) = 2n + 1= 2^{1}(n+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>第n+2张牌我们可以选择数值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2n+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，此时最多可以连续迫害的人数为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mi>n</mi><mo>+</mo><mn>3</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + (n + 1)  + (2n + 2) = 4n + 3=  2^{2}(n+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>第n+3张牌我们可以选择数值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>n</mi><mo>+</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4n+4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，此时最多可以连续迫害的人数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>4</mn><mi>n</mi><mo>+</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mn>8</mn><mi>n</mi><mo>+</mo><mn>7</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + (n + 1)  + (2n + 2)  + (4n + 4)= 8n + 7= 2^{3}(n+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>以此类推</p><p>第m张牌时我们最多可以连续迫害的人数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{m}(n+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></li></ol></li></ul><p>​由此我们推出当X拥有n个1，有m个大小可选定的数时，最多可以连续迫害的人数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{m}(n+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><ul><li><p>由于结果涉及到高次方幂<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span>,所以我们可以用套用快速幂算法模板，大大提升运算效率，体会二分的魅力</p><p>由于需要对答案进行 1000000007取模，由取模公式</p><ol><li>(a + b) % p = (a % p + b % p) % p</li><li>(a * b) % p = (a % p * b % p) % p</li></ol></li></ul><p>​结合快速幂算法模板代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 返回值类型为long long,防止返回值溢出</span><br><span class="hljs-comment">// 形参long long power表示传入的指数，题目限定为底数为2，所以只传指数即可</span><br><span class="hljs-comment">// 部分条件表达式用位运算表示，可以达到压榨性能的效果</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">quickPower</span><span class="hljs-params">(<span class="hljs-type">int</span> power)</span> </span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>; <span class="hljs-comment">// 用于存放运算结果</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> base = <span class="hljs-number">2</span>; <span class="hljs-comment">// 底数固定为2</span><br><span class="hljs-keyword">while</span> (power &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// power &gt; 0时继续循环</span><br><span class="hljs-keyword">if</span>(power &amp; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 此处等价与 power % 2==0,当指数为奇数时</span><br>result = (result * base) % <span class="hljs-number">1000000007</span>; <span class="hljs-comment">// 分离底数与result累乘,并对结果取模</span><br>&#125;<br>power &gt;&gt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// 此处等价于 power /= 2</span><br>base = (base * base) % <span class="hljs-number">1000000007</span>; <span class="hljs-comment">// 底数继续累乘base，并对结果取模</span><br>&#125;<br><span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 返回结果</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最后结合快速幂算法和推出的表达式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{m}(n+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，按照题目取模要求即可得到答案</li></ul><h3 id="2-ac代码-8"><a class="markdownIt-Anchor" href="#2-ac代码-8"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 返回值类型为long long,防止返回值溢出</span><br><span class="hljs-comment">// 形参long long power表示传入的指数，题目限定为底数为2，所以只传指数即可</span><br><span class="hljs-comment">// 部分条件表达式用位运算表示，可以达到压榨性能的效果</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">quickPower</span><span class="hljs-params">(<span class="hljs-type">int</span> power)</span> </span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>; <span class="hljs-comment">// 用于存放运算结果</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> base = <span class="hljs-number">2</span>; <span class="hljs-comment">// 底数固定为2</span><br><span class="hljs-keyword">while</span> (power &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// power &gt; 0时继续循环</span><br><span class="hljs-keyword">if</span>(power &amp; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 此处等价与 power % 2==0,当指数为奇数时</span><br>result = (result * base) % <span class="hljs-number">1000000007</span>; <span class="hljs-comment">// 分离底数与result累乘,并对结果取模</span><br>&#125;<br>power &gt;&gt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// 此处等价于 power /= 2</span><br>base = (base * base) % <span class="hljs-number">1000000007</span>; <span class="hljs-comment">// 底数继续累乘base，并对结果取模</span><br>&#125;<br><span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 返回结果</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, m; <span class="hljs-comment">// n和m记录X有n个1，m个自由数字</span><br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = (<span class="hljs-built_in">quickPower</span>(m) % <span class="hljs-number">1000000007</span>) * ((n + <span class="hljs-number">1</span>) % <span class="hljs-number">1000000007</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">// 套用推出来的公式,并多次取模</span><br>cout &lt;&lt; ans % <span class="hljs-number">1000000007</span>; <span class="hljs-comment">// 结果对1000000007取模</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题ip3654-first-step-ファーストステップ"><a class="markdownIt-Anchor" href="#问题ip3654-first-step-ファーストステップ"></a> 问题I：P3654 First Step (ファーストステップ)</h2><h3 id="1-思路-9"><a class="markdownIt-Anchor" href="#1-思路-9"></a> 1、思路</h3><p>本题要求求出Aqours队员在矩阵中总共的站位方式，首先需要对矩阵进行存储，由于矩阵元素为字符char类型，所以用一个二维字符数组进行存储，数组有两种值：‘#’ 表示不可站位，’.'表示可站位</p><p>二维数组定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 定义了一个R行C列的二维字符数组s</span><br>vector&lt;vector&lt;<span class="hljs-type">char</span>&gt; &gt; <span class="hljs-built_in">s</span>(R, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;(C));<br></code></pre></td></tr></table></figure><p>接着题目需要从矩阵中求出可以排成一条1*K的直线的位置，即至少有一条包含K个连续可站位的直线，才可以满足</p><p>直线就包括行直线和列直线，因此需要分别对每一行和每一列进行统计</p><p>我们可以在填充矩阵时先对行可行的站位方式进行统计</p><p>接着再遍历矩阵的每一列，对列可行的站位方式进行统计</p><ul><li>定义一个int型变量count用来统计每一行或每一列中当前连续可站位的个数，初始化为0，表示当前还没有连续可站位</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ul><li>定义一个变量ans进行统计整个矩阵中可站位方式数量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ul><li><p>统计每一行和每一列的过程中，有以下几种情况</p><ol><li>如果s[i] [j]== ‘.’,说明有可站位，count++</li><li>如果s[i] [j]==’#’&amp;&amp;count&gt;0,说明连续可站位中断，分为两种处理方式<ol><li>此时如果count &gt;= K，即连续可站位count大于队员人数K，说明此行或此列存在可站位方式，数量为count-K+1，让ans += count - K + 1，将情况累加进ans中，清空count，令count=0</li><li>如果此时count &lt; K，清空count，令count=0即可</li></ol></li><li>还要考虑遍历当前行或当前列后没有遇到s[i] [j]==’#'的情况，判断是否count &gt;= K，如果满足，让ans += count - K + 1，将情况累加进ans中，后面进入到新的行或者列，自动清空count</li></ol></li><li><p>注意：K=1时，会重复统计一遍，此时最后的ans需要除以2</p><p>重复统计的原因：K=1时，在矩阵中相当于一个点，行和列都会包含一次，所以就造成了重复统计</p></li><li><p>统计完总共的站位方式数量ans后，输出即可</p></li></ul><h3 id="2-ac代码-9"><a class="markdownIt-Anchor" href="#2-ac代码-9"></a> 2、AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> R, C, K; <span class="hljs-comment">// R,C,K分别用来表示矩阵行数、列数以及队员人数</span><br>cin &gt;&gt; R &gt;&gt; C &gt;&gt; K;<br>    <span class="hljs-comment">// 定义了一个R行C列的二维字符数组s</span><br>vector&lt;vector&lt;<span class="hljs-type">char</span>&gt; &gt; <span class="hljs-built_in">s</span>(R, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;(C));<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>; <span class="hljs-comment">// ans统计整个矩阵中可站位方式数量</span><br>    <span class="hljs-comment">// 开始填充矩阵并且扫描行，统计行对应的可站位方式数量</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; R; i++) &#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// count用来统计当前行连续的可站位的数量，初始化为0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; C; j++) &#123;<br>cin &gt;&gt; s[i][j];<br><span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123; <span class="hljs-comment">// 如果有可站位</span><br>count++; <span class="hljs-comment">// 当前行连续的可站位数量+1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span> &amp;&amp; s[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123; <span class="hljs-comment">//有连续可站位但是连续可站位中断</span><br><span class="hljs-keyword">if</span> (count &gt;= K) &#123; <span class="hljs-comment">// 满足队员的可站位方式</span><br>ans += (count - K + <span class="hljs-number">1</span>); <span class="hljs-comment">// 将可站位方式数量count-K+1累加进ans中</span><br>&#125;<br>count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 无论怎样，进入这个if语句内count都要归零</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (count &gt;= K) &#123; <span class="hljs-comment">// 考虑遍历当前行后没有遇到s[i] [j]==&#x27;#&#x27;的情况,如果count&gt;=k,</span><br>            <span class="hljs-comment">// 说明也存在可行性站位方式，也要将这种情况累加进ans中</span><br>ans += (count - K + <span class="hljs-number">1</span>);<br>&#125;<br>&#125; <br>    <span class="hljs-comment">// 一下循环对矩阵的每一列进行扫描，统计出列队员的可站位方式</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; C; j++) &#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// count用来统计当前列连续的可站位的数量，初始化为0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; R; i++) &#123;<br><span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123; <span class="hljs-comment">// 如果有可站位</span><br>count++; <span class="hljs-comment">// 当前行连续的可站位数量+1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span> &amp;&amp; s[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123; <span class="hljs-comment">//有连续可站位但是连续可站位中断</span><br><span class="hljs-keyword">if</span> (count &gt;= K) &#123; <span class="hljs-comment">// 满足队员的可站位方式</span><br>ans += (count - K + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 将可站位方式数量count-K+1累加进ans中</span><br>&#125;<br>count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 无论怎样，进入这个if语句内count都要归零</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (count &gt;= K) &#123;  <span class="hljs-comment">// 考虑遍历当前行后没有遇到s[i] [j]==&#x27;#&#x27;的情况,如果count&gt;=k,</span><br>            <br>ans += (count - K + <span class="hljs-number">1</span>); <span class="hljs-comment">// 说明也存在可行性站位方式，也要将这种情况累加进ans中</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (K == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 对K==1的情况单独处理，这种情况ans重复统计了一遍，ans需要除以2</span><br>ans /= <span class="hljs-number">2</span>; <span class="hljs-comment">// ans除以2</span><br>&#125;<br>cout &lt;&lt; ans; <span class="hljs-comment">// 输出总共的站位方式数量</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
